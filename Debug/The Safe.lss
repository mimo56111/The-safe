
The Safe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002132  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ba  00800060  00002132  000021c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080011a  0080011a  00002280  2**0
                  ALLOC
  3 .stab         00002640  00000000  00000000  00002280  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000843  00000000  00000000  000048c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00005108  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002477  00000000  00000000  000052c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097c  00000000  00000000  0000773f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fed  00000000  00000000  000080bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000534  00000000  00000000  000090a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bb  00000000  00000000  000095dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000258b  00000000  00000000  00009b97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000c122  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 31       	cpi	r26, 0x1A	; 26
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e1       	ldi	r26, 0x1A	; 26
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 31       	cpi	r26, 0x1E	; 30
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4d 08 	call	0x109a	; 0x109a <main>
      8a:	0c 94 97 10 	jmp	0x212e	; 0x212e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EEPROM_Write>:
 */ 
#include "Register.h"
#include "stdmacros.h"
#include "Data_type.h"
void EEPROM_Write(u16 address , u8 value){
	myEEARL = (u8)address;      
      92:	8e bb       	out	0x1e, r24	; 30
	myEEARH= (u8)(address>>8);
      94:	9f bb       	out	0x1f, r25	; 31
	myEEDR = value;
      96:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(myEECR , myEEMWE);
      98:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(myEECR , myEEWE);
      9a:	e1 9a       	sbi	0x1c, 1	; 28
	while(READ_BIT(myEECR , myEEWE)==1);
      9c:	e1 99       	sbic	0x1c, 1	; 28
      9e:	fe cf       	rjmp	.-4      	; 0x9c <EEPROM_Write+0xa>
}
      a0:	08 95       	ret

000000a2 <EEPROM_Read>:



u8 EEPROM_Read(const u16 address){
	myEEARL = (u8)address;
      a2:	8e bb       	out	0x1e, r24	; 30
	myEEARH = (u8)(address>>8);
      a4:	9f bb       	out	0x1f, r25	; 31
	SET_BIT(myEECR , myEERE);
      a6:	e0 9a       	sbi	0x1c, 0	; 28
	return myEEDR;
      a8:	8d b3       	in	r24, 0x1d	; 29
      aa:	08 95       	ret

000000ac <GPIO_voidInit>:
#include "GPIO_MCAL.h"

//================================Initialization=======================================
 void GPIO_voidInit(void){
	 /*Comment!: DDR initialization  */
	myDDRA = Init_direction_default;
      ac:	1a ba       	out	0x1a, r1	; 26
	myDDRB = Init_direction_default;
      ae:	17 ba       	out	0x17, r1	; 23
	myDDRC = Init_direction_default;
      b0:	14 ba       	out	0x14, r1	; 20
	myDDRD = Init_direction_default;
      b2:	11 ba       	out	0x11, r1	; 17
 }
      b4:	08 95       	ret

000000b6 <GPIO_vsetPIN_DIR>:
//=====================================================================================

//===================================PIN===============================================

void GPIO_vsetPIN_DIR(u8 portnum, u8 pinnum, u8 dir ){
	switch (portnum){
      b6:	84 34       	cpi	r24, 0x44	; 68
      b8:	09 f4       	brne	.+2      	; 0xbc <GPIO_vsetPIN_DIR+0x6>
      ba:	71 c0       	rjmp	.+226    	; 0x19e <GPIO_vsetPIN_DIR+0xe8>
      bc:	85 34       	cpi	r24, 0x45	; 69
      be:	48 f4       	brcc	.+18     	; 0xd2 <GPIO_vsetPIN_DIR+0x1c>
      c0:	82 34       	cpi	r24, 0x42	; 66
      c2:	99 f1       	breq	.+102    	; 0x12a <GPIO_vsetPIN_DIR+0x74>
      c4:	83 34       	cpi	r24, 0x43	; 67
      c6:	08 f0       	brcs	.+2      	; 0xca <GPIO_vsetPIN_DIR+0x14>
      c8:	4d c0       	rjmp	.+154    	; 0x164 <GPIO_vsetPIN_DIR+0xae>
      ca:	81 34       	cpi	r24, 0x41	; 65
      cc:	09 f0       	breq	.+2      	; 0xd0 <GPIO_vsetPIN_DIR+0x1a>
      ce:	83 c0       	rjmp	.+262    	; 0x1d6 <GPIO_vsetPIN_DIR+0x120>
      d0:	0f c0       	rjmp	.+30     	; 0xf0 <GPIO_vsetPIN_DIR+0x3a>
      d2:	82 36       	cpi	r24, 0x62	; 98
      d4:	51 f1       	breq	.+84     	; 0x12a <GPIO_vsetPIN_DIR+0x74>
      d6:	83 36       	cpi	r24, 0x63	; 99
      d8:	20 f4       	brcc	.+8      	; 0xe2 <GPIO_vsetPIN_DIR+0x2c>
      da:	81 36       	cpi	r24, 0x61	; 97
      dc:	09 f0       	breq	.+2      	; 0xe0 <GPIO_vsetPIN_DIR+0x2a>
      de:	7b c0       	rjmp	.+246    	; 0x1d6 <GPIO_vsetPIN_DIR+0x120>
      e0:	07 c0       	rjmp	.+14     	; 0xf0 <GPIO_vsetPIN_DIR+0x3a>
      e2:	83 36       	cpi	r24, 0x63	; 99
      e4:	09 f4       	brne	.+2      	; 0xe8 <GPIO_vsetPIN_DIR+0x32>
      e6:	3e c0       	rjmp	.+124    	; 0x164 <GPIO_vsetPIN_DIR+0xae>
      e8:	84 36       	cpi	r24, 0x64	; 100
      ea:	09 f0       	breq	.+2      	; 0xee <GPIO_vsetPIN_DIR+0x38>
      ec:	74 c0       	rjmp	.+232    	; 0x1d6 <GPIO_vsetPIN_DIR+0x120>
      ee:	57 c0       	rjmp	.+174    	; 0x19e <GPIO_vsetPIN_DIR+0xe8>
		case 'A' :
		case 'a' :
			if(dir == 1){
      f0:	41 30       	cpi	r20, 0x01	; 1
      f2:	69 f4       	brne	.+26     	; 0x10e <GPIO_vsetPIN_DIR+0x58>
				SET_BIT(myDDRA , pinnum);
      f4:	2a b3       	in	r18, 0x1a	; 26
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	ac 01       	movw	r20, r24
      fc:	02 c0       	rjmp	.+4      	; 0x102 <GPIO_vsetPIN_DIR+0x4c>
      fe:	44 0f       	add	r20, r20
     100:	55 1f       	adc	r21, r21
     102:	6a 95       	dec	r22
     104:	e2 f7       	brpl	.-8      	; 0xfe <GPIO_vsetPIN_DIR+0x48>
     106:	ba 01       	movw	r22, r20
     108:	62 2b       	or	r22, r18
     10a:	6a bb       	out	0x1a, r22	; 26
     10c:	08 95       	ret
			}else{
				CLR_BIT(myDDRA , pinnum);
     10e:	2a b3       	in	r18, 0x1a	; 26
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	ac 01       	movw	r20, r24
     116:	02 c0       	rjmp	.+4      	; 0x11c <GPIO_vsetPIN_DIR+0x66>
     118:	44 0f       	add	r20, r20
     11a:	55 1f       	adc	r21, r21
     11c:	6a 95       	dec	r22
     11e:	e2 f7       	brpl	.-8      	; 0x118 <GPIO_vsetPIN_DIR+0x62>
     120:	ba 01       	movw	r22, r20
     122:	60 95       	com	r22
     124:	62 23       	and	r22, r18
     126:	6a bb       	out	0x1a, r22	; 26
     128:	08 95       	ret
			}
			break;
		case 'b' :
		case 'B' :
			if(dir == 1){
     12a:	41 30       	cpi	r20, 0x01	; 1
     12c:	69 f4       	brne	.+26     	; 0x148 <GPIO_vsetPIN_DIR+0x92>
				SET_BIT(myDDRB , pinnum);
     12e:	27 b3       	in	r18, 0x17	; 23
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	ac 01       	movw	r20, r24
     136:	02 c0       	rjmp	.+4      	; 0x13c <GPIO_vsetPIN_DIR+0x86>
     138:	44 0f       	add	r20, r20
     13a:	55 1f       	adc	r21, r21
     13c:	6a 95       	dec	r22
     13e:	e2 f7       	brpl	.-8      	; 0x138 <GPIO_vsetPIN_DIR+0x82>
     140:	ba 01       	movw	r22, r20
     142:	62 2b       	or	r22, r18
     144:	67 bb       	out	0x17, r22	; 23
     146:	08 95       	ret
			}else{
				CLR_BIT(myDDRB , pinnum);
     148:	27 b3       	in	r18, 0x17	; 23
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	ac 01       	movw	r20, r24
     150:	02 c0       	rjmp	.+4      	; 0x156 <GPIO_vsetPIN_DIR+0xa0>
     152:	44 0f       	add	r20, r20
     154:	55 1f       	adc	r21, r21
     156:	6a 95       	dec	r22
     158:	e2 f7       	brpl	.-8      	; 0x152 <GPIO_vsetPIN_DIR+0x9c>
     15a:	ba 01       	movw	r22, r20
     15c:	60 95       	com	r22
     15e:	62 23       	and	r22, r18
     160:	67 bb       	out	0x17, r22	; 23
     162:	08 95       	ret
			}
			break;
		case 'C' :
		case 'c' :
			if(dir == 1){
     164:	41 30       	cpi	r20, 0x01	; 1
     166:	69 f4       	brne	.+26     	; 0x182 <GPIO_vsetPIN_DIR+0xcc>
				SET_BIT(myDDRC , pinnum);
     168:	24 b3       	in	r18, 0x14	; 20
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	ac 01       	movw	r20, r24
     170:	02 c0       	rjmp	.+4      	; 0x176 <GPIO_vsetPIN_DIR+0xc0>
     172:	44 0f       	add	r20, r20
     174:	55 1f       	adc	r21, r21
     176:	6a 95       	dec	r22
     178:	e2 f7       	brpl	.-8      	; 0x172 <GPIO_vsetPIN_DIR+0xbc>
     17a:	ba 01       	movw	r22, r20
     17c:	62 2b       	or	r22, r18
     17e:	64 bb       	out	0x14, r22	; 20
     180:	08 95       	ret
			}else{
				CLR_BIT(myDDRC , pinnum);
     182:	24 b3       	in	r18, 0x14	; 20
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	ac 01       	movw	r20, r24
     18a:	02 c0       	rjmp	.+4      	; 0x190 <GPIO_vsetPIN_DIR+0xda>
     18c:	44 0f       	add	r20, r20
     18e:	55 1f       	adc	r21, r21
     190:	6a 95       	dec	r22
     192:	e2 f7       	brpl	.-8      	; 0x18c <GPIO_vsetPIN_DIR+0xd6>
     194:	ba 01       	movw	r22, r20
     196:	60 95       	com	r22
     198:	62 23       	and	r22, r18
     19a:	64 bb       	out	0x14, r22	; 20
     19c:	08 95       	ret
			}
			break;
		case 'D' :
		case 'd' :
			if(dir == 1){
     19e:	41 30       	cpi	r20, 0x01	; 1
     1a0:	69 f4       	brne	.+26     	; 0x1bc <GPIO_vsetPIN_DIR+0x106>
				SET_BIT(myDDRD , pinnum);
     1a2:	21 b3       	in	r18, 0x11	; 17
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	ac 01       	movw	r20, r24
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <GPIO_vsetPIN_DIR+0xfa>
     1ac:	44 0f       	add	r20, r20
     1ae:	55 1f       	adc	r21, r21
     1b0:	6a 95       	dec	r22
     1b2:	e2 f7       	brpl	.-8      	; 0x1ac <GPIO_vsetPIN_DIR+0xf6>
     1b4:	ba 01       	movw	r22, r20
     1b6:	62 2b       	or	r22, r18
     1b8:	61 bb       	out	0x11, r22	; 17
     1ba:	08 95       	ret
			}else{
				CLR_BIT(myDDRD , pinnum);
     1bc:	21 b3       	in	r18, 0x11	; 17
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	ac 01       	movw	r20, r24
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <GPIO_vsetPIN_DIR+0x114>
     1c6:	44 0f       	add	r20, r20
     1c8:	55 1f       	adc	r21, r21
     1ca:	6a 95       	dec	r22
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <GPIO_vsetPIN_DIR+0x110>
     1ce:	ba 01       	movw	r22, r20
     1d0:	60 95       	com	r22
     1d2:	62 23       	and	r22, r18
     1d4:	61 bb       	out	0x11, r22	; 17
     1d6:	08 95       	ret

000001d8 <GPIO_vwrite_PIN>:
	}
	
}

void GPIO_vwrite_PIN(u8 portnum , u8 pinnum , u8 value ){
	switch(portnum){
     1d8:	84 34       	cpi	r24, 0x44	; 68
     1da:	09 f4       	brne	.+2      	; 0x1de <GPIO_vwrite_PIN+0x6>
     1dc:	71 c0       	rjmp	.+226    	; 0x2c0 <GPIO_vwrite_PIN+0xe8>
     1de:	85 34       	cpi	r24, 0x45	; 69
     1e0:	48 f4       	brcc	.+18     	; 0x1f4 <GPIO_vwrite_PIN+0x1c>
     1e2:	82 34       	cpi	r24, 0x42	; 66
     1e4:	99 f1       	breq	.+102    	; 0x24c <GPIO_vwrite_PIN+0x74>
     1e6:	83 34       	cpi	r24, 0x43	; 67
     1e8:	08 f0       	brcs	.+2      	; 0x1ec <GPIO_vwrite_PIN+0x14>
     1ea:	4d c0       	rjmp	.+154    	; 0x286 <GPIO_vwrite_PIN+0xae>
     1ec:	81 34       	cpi	r24, 0x41	; 65
     1ee:	09 f0       	breq	.+2      	; 0x1f2 <GPIO_vwrite_PIN+0x1a>
     1f0:	83 c0       	rjmp	.+262    	; 0x2f8 <GPIO_vwrite_PIN+0x120>
     1f2:	0f c0       	rjmp	.+30     	; 0x212 <GPIO_vwrite_PIN+0x3a>
     1f4:	82 36       	cpi	r24, 0x62	; 98
     1f6:	51 f1       	breq	.+84     	; 0x24c <GPIO_vwrite_PIN+0x74>
     1f8:	83 36       	cpi	r24, 0x63	; 99
     1fa:	20 f4       	brcc	.+8      	; 0x204 <GPIO_vwrite_PIN+0x2c>
     1fc:	81 36       	cpi	r24, 0x61	; 97
     1fe:	09 f0       	breq	.+2      	; 0x202 <GPIO_vwrite_PIN+0x2a>
     200:	7b c0       	rjmp	.+246    	; 0x2f8 <GPIO_vwrite_PIN+0x120>
     202:	07 c0       	rjmp	.+14     	; 0x212 <GPIO_vwrite_PIN+0x3a>
     204:	83 36       	cpi	r24, 0x63	; 99
     206:	09 f4       	brne	.+2      	; 0x20a <GPIO_vwrite_PIN+0x32>
     208:	3e c0       	rjmp	.+124    	; 0x286 <GPIO_vwrite_PIN+0xae>
     20a:	84 36       	cpi	r24, 0x64	; 100
     20c:	09 f0       	breq	.+2      	; 0x210 <GPIO_vwrite_PIN+0x38>
     20e:	74 c0       	rjmp	.+232    	; 0x2f8 <GPIO_vwrite_PIN+0x120>
     210:	57 c0       	rjmp	.+174    	; 0x2c0 <GPIO_vwrite_PIN+0xe8>
		case 'A':
		case 'a':
			if (value ==1){
     212:	41 30       	cpi	r20, 0x01	; 1
     214:	69 f4       	brne	.+26     	; 0x230 <GPIO_vwrite_PIN+0x58>
				SET_BIT(myPORTA , pinnum);
     216:	2b b3       	in	r18, 0x1b	; 27
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	ac 01       	movw	r20, r24
     21e:	02 c0       	rjmp	.+4      	; 0x224 <GPIO_vwrite_PIN+0x4c>
     220:	44 0f       	add	r20, r20
     222:	55 1f       	adc	r21, r21
     224:	6a 95       	dec	r22
     226:	e2 f7       	brpl	.-8      	; 0x220 <GPIO_vwrite_PIN+0x48>
     228:	ba 01       	movw	r22, r20
     22a:	62 2b       	or	r22, r18
     22c:	6b bb       	out	0x1b, r22	; 27
     22e:	08 95       	ret
			}else {
				CLR_BIT(myPORTA , pinnum);
     230:	2b b3       	in	r18, 0x1b	; 27
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	ac 01       	movw	r20, r24
     238:	02 c0       	rjmp	.+4      	; 0x23e <GPIO_vwrite_PIN+0x66>
     23a:	44 0f       	add	r20, r20
     23c:	55 1f       	adc	r21, r21
     23e:	6a 95       	dec	r22
     240:	e2 f7       	brpl	.-8      	; 0x23a <GPIO_vwrite_PIN+0x62>
     242:	ba 01       	movw	r22, r20
     244:	60 95       	com	r22
     246:	62 23       	and	r22, r18
     248:	6b bb       	out	0x1b, r22	; 27
     24a:	08 95       	ret
			}
			break;
		case 'b':
		case 'B':
			if (value ==1){
     24c:	41 30       	cpi	r20, 0x01	; 1
     24e:	69 f4       	brne	.+26     	; 0x26a <GPIO_vwrite_PIN+0x92>
				SET_BIT(myPORTB , pinnum);
     250:	28 b3       	in	r18, 0x18	; 24
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	ac 01       	movw	r20, r24
     258:	02 c0       	rjmp	.+4      	; 0x25e <GPIO_vwrite_PIN+0x86>
     25a:	44 0f       	add	r20, r20
     25c:	55 1f       	adc	r21, r21
     25e:	6a 95       	dec	r22
     260:	e2 f7       	brpl	.-8      	; 0x25a <GPIO_vwrite_PIN+0x82>
     262:	ba 01       	movw	r22, r20
     264:	62 2b       	or	r22, r18
     266:	68 bb       	out	0x18, r22	; 24
     268:	08 95       	ret
			}else {
				CLR_BIT(myPORTB , pinnum);
     26a:	28 b3       	in	r18, 0x18	; 24
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	ac 01       	movw	r20, r24
     272:	02 c0       	rjmp	.+4      	; 0x278 <GPIO_vwrite_PIN+0xa0>
     274:	44 0f       	add	r20, r20
     276:	55 1f       	adc	r21, r21
     278:	6a 95       	dec	r22
     27a:	e2 f7       	brpl	.-8      	; 0x274 <GPIO_vwrite_PIN+0x9c>
     27c:	ba 01       	movw	r22, r20
     27e:	60 95       	com	r22
     280:	62 23       	and	r22, r18
     282:	68 bb       	out	0x18, r22	; 24
     284:	08 95       	ret
			}
			break;
		case 'C':
		case 'c':
			if (value ==1){
     286:	41 30       	cpi	r20, 0x01	; 1
     288:	69 f4       	brne	.+26     	; 0x2a4 <GPIO_vwrite_PIN+0xcc>
				SET_BIT(myPORTC , pinnum);
     28a:	25 b3       	in	r18, 0x15	; 21
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	ac 01       	movw	r20, r24
     292:	02 c0       	rjmp	.+4      	; 0x298 <GPIO_vwrite_PIN+0xc0>
     294:	44 0f       	add	r20, r20
     296:	55 1f       	adc	r21, r21
     298:	6a 95       	dec	r22
     29a:	e2 f7       	brpl	.-8      	; 0x294 <GPIO_vwrite_PIN+0xbc>
     29c:	ba 01       	movw	r22, r20
     29e:	62 2b       	or	r22, r18
     2a0:	65 bb       	out	0x15, r22	; 21
     2a2:	08 95       	ret
			}else {
				CLR_BIT(myPORTC , pinnum);
     2a4:	25 b3       	in	r18, 0x15	; 21
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	ac 01       	movw	r20, r24
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <GPIO_vwrite_PIN+0xda>
     2ae:	44 0f       	add	r20, r20
     2b0:	55 1f       	adc	r21, r21
     2b2:	6a 95       	dec	r22
     2b4:	e2 f7       	brpl	.-8      	; 0x2ae <GPIO_vwrite_PIN+0xd6>
     2b6:	ba 01       	movw	r22, r20
     2b8:	60 95       	com	r22
     2ba:	62 23       	and	r22, r18
     2bc:	65 bb       	out	0x15, r22	; 21
     2be:	08 95       	ret
			}
			break;
		case 'D':
		case 'd':
			if (value ==1){
     2c0:	41 30       	cpi	r20, 0x01	; 1
     2c2:	69 f4       	brne	.+26     	; 0x2de <GPIO_vwrite_PIN+0x106>
				SET_BIT(myPORTD , pinnum);
     2c4:	22 b3       	in	r18, 0x12	; 18
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	ac 01       	movw	r20, r24
     2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <GPIO_vwrite_PIN+0xfa>
     2ce:	44 0f       	add	r20, r20
     2d0:	55 1f       	adc	r21, r21
     2d2:	6a 95       	dec	r22
     2d4:	e2 f7       	brpl	.-8      	; 0x2ce <GPIO_vwrite_PIN+0xf6>
     2d6:	ba 01       	movw	r22, r20
     2d8:	62 2b       	or	r22, r18
     2da:	62 bb       	out	0x12, r22	; 18
     2dc:	08 95       	ret
			}else {
				CLR_BIT(myPORTD , pinnum);
     2de:	22 b3       	in	r18, 0x12	; 18
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	ac 01       	movw	r20, r24
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <GPIO_vwrite_PIN+0x114>
     2e8:	44 0f       	add	r20, r20
     2ea:	55 1f       	adc	r21, r21
     2ec:	6a 95       	dec	r22
     2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <GPIO_vwrite_PIN+0x110>
     2f0:	ba 01       	movw	r22, r20
     2f2:	60 95       	com	r22
     2f4:	62 23       	and	r22, r18
     2f6:	62 bb       	out	0x12, r22	; 18
     2f8:	08 95       	ret

000002fa <GPIO_u8read_PIN>:
	}
}

u8 GPIO_u8read_PIN(u8 portnum, u8 pinnum){
	u8 x=0;
	switch (portnum){
     2fa:	84 34       	cpi	r24, 0x44	; 68
     2fc:	09 f4       	brne	.+2      	; 0x300 <GPIO_u8read_PIN+0x6>
     2fe:	4e c0       	rjmp	.+156    	; 0x39c <GPIO_u8read_PIN+0xa2>
     300:	85 34       	cpi	r24, 0x45	; 69
     302:	40 f4       	brcc	.+16     	; 0x314 <GPIO_u8read_PIN+0x1a>
     304:	82 34       	cpi	r24, 0x42	; 66
     306:	31 f1       	breq	.+76     	; 0x354 <GPIO_u8read_PIN+0x5a>
     308:	83 34       	cpi	r24, 0x43	; 67
     30a:	b0 f5       	brcc	.+108    	; 0x378 <GPIO_u8read_PIN+0x7e>
     30c:	81 34       	cpi	r24, 0x41	; 65
     30e:	09 f0       	breq	.+2      	; 0x312 <GPIO_u8read_PIN+0x18>
     310:	57 c0       	rjmp	.+174    	; 0x3c0 <GPIO_u8read_PIN+0xc6>
     312:	0e c0       	rjmp	.+28     	; 0x330 <GPIO_u8read_PIN+0x36>
     314:	82 36       	cpi	r24, 0x62	; 98
     316:	f1 f0       	breq	.+60     	; 0x354 <GPIO_u8read_PIN+0x5a>
     318:	83 36       	cpi	r24, 0x63	; 99
     31a:	20 f4       	brcc	.+8      	; 0x324 <GPIO_u8read_PIN+0x2a>
     31c:	81 36       	cpi	r24, 0x61	; 97
     31e:	09 f0       	breq	.+2      	; 0x322 <GPIO_u8read_PIN+0x28>
     320:	4f c0       	rjmp	.+158    	; 0x3c0 <GPIO_u8read_PIN+0xc6>
     322:	06 c0       	rjmp	.+12     	; 0x330 <GPIO_u8read_PIN+0x36>
     324:	83 36       	cpi	r24, 0x63	; 99
     326:	41 f1       	breq	.+80     	; 0x378 <GPIO_u8read_PIN+0x7e>
     328:	84 36       	cpi	r24, 0x64	; 100
     32a:	09 f0       	breq	.+2      	; 0x32e <GPIO_u8read_PIN+0x34>
     32c:	49 c0       	rjmp	.+146    	; 0x3c0 <GPIO_u8read_PIN+0xc6>
     32e:	36 c0       	rjmp	.+108    	; 0x39c <GPIO_u8read_PIN+0xa2>
		case 'A':
		case 'a':
			x= READ_BIT(myPINA, pinnum);
     330:	29 b3       	in	r18, 0x19	; 25
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	06 2e       	mov	r0, r22
     338:	02 c0       	rjmp	.+4      	; 0x33e <GPIO_u8read_PIN+0x44>
     33a:	88 0f       	add	r24, r24
     33c:	99 1f       	adc	r25, r25
     33e:	0a 94       	dec	r0
     340:	e2 f7       	brpl	.-8      	; 0x33a <GPIO_u8read_PIN+0x40>
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	82 23       	and	r24, r18
     346:	93 23       	and	r25, r19
     348:	02 c0       	rjmp	.+4      	; 0x34e <GPIO_u8read_PIN+0x54>
     34a:	95 95       	asr	r25
     34c:	87 95       	ror	r24
     34e:	6a 95       	dec	r22
     350:	e2 f7       	brpl	.-8      	; 0x34a <GPIO_u8read_PIN+0x50>
			break;
     352:	08 95       	ret
		case 'B':
		case 'b':
			x= READ_BIT(myPINB , pinnum);
     354:	26 b3       	in	r18, 0x16	; 22
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	06 2e       	mov	r0, r22
     35c:	02 c0       	rjmp	.+4      	; 0x362 <GPIO_u8read_PIN+0x68>
     35e:	88 0f       	add	r24, r24
     360:	99 1f       	adc	r25, r25
     362:	0a 94       	dec	r0
     364:	e2 f7       	brpl	.-8      	; 0x35e <GPIO_u8read_PIN+0x64>
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	82 23       	and	r24, r18
     36a:	93 23       	and	r25, r19
     36c:	02 c0       	rjmp	.+4      	; 0x372 <GPIO_u8read_PIN+0x78>
     36e:	95 95       	asr	r25
     370:	87 95       	ror	r24
     372:	6a 95       	dec	r22
     374:	e2 f7       	brpl	.-8      	; 0x36e <GPIO_u8read_PIN+0x74>
			break;
     376:	08 95       	ret
		case 'C':
		case 'c':
			x= READ_BIT(myPINC , pinnum);
     378:	23 b3       	in	r18, 0x13	; 19
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	06 2e       	mov	r0, r22
     380:	02 c0       	rjmp	.+4      	; 0x386 <GPIO_u8read_PIN+0x8c>
     382:	88 0f       	add	r24, r24
     384:	99 1f       	adc	r25, r25
     386:	0a 94       	dec	r0
     388:	e2 f7       	brpl	.-8      	; 0x382 <GPIO_u8read_PIN+0x88>
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	82 23       	and	r24, r18
     38e:	93 23       	and	r25, r19
     390:	02 c0       	rjmp	.+4      	; 0x396 <GPIO_u8read_PIN+0x9c>
     392:	95 95       	asr	r25
     394:	87 95       	ror	r24
     396:	6a 95       	dec	r22
     398:	e2 f7       	brpl	.-8      	; 0x392 <GPIO_u8read_PIN+0x98>
			break;
     39a:	08 95       	ret
		case 'D':
		case 'd':
			x= READ_BIT(myPIND, pinnum);
     39c:	20 b3       	in	r18, 0x10	; 16
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	06 2e       	mov	r0, r22
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <GPIO_u8read_PIN+0xb0>
     3a6:	88 0f       	add	r24, r24
     3a8:	99 1f       	adc	r25, r25
     3aa:	0a 94       	dec	r0
     3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <GPIO_u8read_PIN+0xac>
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	82 23       	and	r24, r18
     3b2:	93 23       	and	r25, r19
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <GPIO_u8read_PIN+0xc0>
     3b6:	95 95       	asr	r25
     3b8:	87 95       	ror	r24
     3ba:	6a 95       	dec	r22
     3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <GPIO_u8read_PIN+0xbc>
			break;
     3be:	08 95       	ret
		default: break;
	}
}

u8 GPIO_u8read_PIN(u8 portnum, u8 pinnum){
	u8 x=0;
     3c0:	80 e0       	ldi	r24, 0x00	; 0
			x= READ_BIT(myPIND, pinnum);
			break;
		default: break;
	}
	return x;
}
     3c2:	08 95       	ret

000003c4 <GPIO_vtoggle_PIN>:

void GPIO_vtoggle_PIN(u8 portnum, u8 pinnum){
	switch (portnum){
     3c4:	84 34       	cpi	r24, 0x44	; 68
     3c6:	09 f4       	brne	.+2      	; 0x3ca <GPIO_vtoggle_PIN+0x6>
     3c8:	3d c0       	rjmp	.+122    	; 0x444 <GPIO_vtoggle_PIN+0x80>
     3ca:	85 34       	cpi	r24, 0x45	; 69
     3cc:	40 f4       	brcc	.+16     	; 0x3de <GPIO_vtoggle_PIN+0x1a>
     3ce:	82 34       	cpi	r24, 0x42	; 66
     3d0:	f9 f0       	breq	.+62     	; 0x410 <GPIO_vtoggle_PIN+0x4c>
     3d2:	83 34       	cpi	r24, 0x43	; 67
     3d4:	50 f5       	brcc	.+84     	; 0x42a <GPIO_vtoggle_PIN+0x66>
     3d6:	81 34       	cpi	r24, 0x41	; 65
     3d8:	09 f0       	breq	.+2      	; 0x3dc <GPIO_vtoggle_PIN+0x18>
     3da:	40 c0       	rjmp	.+128    	; 0x45c <GPIO_vtoggle_PIN+0x98>
     3dc:	0c c0       	rjmp	.+24     	; 0x3f6 <GPIO_vtoggle_PIN+0x32>
     3de:	82 36       	cpi	r24, 0x62	; 98
     3e0:	b9 f0       	breq	.+46     	; 0x410 <GPIO_vtoggle_PIN+0x4c>
     3e2:	83 36       	cpi	r24, 0x63	; 99
     3e4:	18 f4       	brcc	.+6      	; 0x3ec <GPIO_vtoggle_PIN+0x28>
     3e6:	81 36       	cpi	r24, 0x61	; 97
     3e8:	c9 f5       	brne	.+114    	; 0x45c <GPIO_vtoggle_PIN+0x98>
     3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <GPIO_vtoggle_PIN+0x32>
     3ec:	83 36       	cpi	r24, 0x63	; 99
     3ee:	e9 f0       	breq	.+58     	; 0x42a <GPIO_vtoggle_PIN+0x66>
     3f0:	84 36       	cpi	r24, 0x64	; 100
     3f2:	a1 f5       	brne	.+104    	; 0x45c <GPIO_vtoggle_PIN+0x98>
     3f4:	27 c0       	rjmp	.+78     	; 0x444 <GPIO_vtoggle_PIN+0x80>
		case 'a' :
		case 'A' :
			TOGGLE_BIT(myPORTA, pinnum);
     3f6:	2b b3       	in	r18, 0x1b	; 27
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	ac 01       	movw	r20, r24
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <GPIO_vtoggle_PIN+0x40>
     400:	44 0f       	add	r20, r20
     402:	55 1f       	adc	r21, r21
     404:	6a 95       	dec	r22
     406:	e2 f7       	brpl	.-8      	; 0x400 <GPIO_vtoggle_PIN+0x3c>
     408:	ba 01       	movw	r22, r20
     40a:	62 27       	eor	r22, r18
     40c:	6b bb       	out	0x1b, r22	; 27
			break;
     40e:	08 95       	ret
		case 'b' :
		case 'B' :
			TOGGLE_BIT(myPORTB, pinnum);
     410:	28 b3       	in	r18, 0x18	; 24
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	ac 01       	movw	r20, r24
     418:	02 c0       	rjmp	.+4      	; 0x41e <GPIO_vtoggle_PIN+0x5a>
     41a:	44 0f       	add	r20, r20
     41c:	55 1f       	adc	r21, r21
     41e:	6a 95       	dec	r22
     420:	e2 f7       	brpl	.-8      	; 0x41a <GPIO_vtoggle_PIN+0x56>
     422:	ba 01       	movw	r22, r20
     424:	62 27       	eor	r22, r18
     426:	68 bb       	out	0x18, r22	; 24
			break;
     428:	08 95       	ret
		case 'c' :
		case 'C' :
			TOGGLE_BIT(myPORTC, pinnum);
     42a:	25 b3       	in	r18, 0x15	; 21
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	ac 01       	movw	r20, r24
     432:	02 c0       	rjmp	.+4      	; 0x438 <GPIO_vtoggle_PIN+0x74>
     434:	44 0f       	add	r20, r20
     436:	55 1f       	adc	r21, r21
     438:	6a 95       	dec	r22
     43a:	e2 f7       	brpl	.-8      	; 0x434 <GPIO_vtoggle_PIN+0x70>
     43c:	ba 01       	movw	r22, r20
     43e:	62 27       	eor	r22, r18
     440:	65 bb       	out	0x15, r22	; 21
			break;
     442:	08 95       	ret
		case 'd' :
		case 'D' :
			TOGGLE_BIT(myPORTD, pinnum);
     444:	22 b3       	in	r18, 0x12	; 18
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	ac 01       	movw	r20, r24
     44c:	02 c0       	rjmp	.+4      	; 0x452 <GPIO_vtoggle_PIN+0x8e>
     44e:	44 0f       	add	r20, r20
     450:	55 1f       	adc	r21, r21
     452:	6a 95       	dec	r22
     454:	e2 f7       	brpl	.-8      	; 0x44e <GPIO_vtoggle_PIN+0x8a>
     456:	ba 01       	movw	r22, r20
     458:	62 27       	eor	r22, r18
     45a:	62 bb       	out	0x12, r22	; 18
     45c:	08 95       	ret

0000045e <GPIO_vconnectpullup>:
		default: break;
	}
}

void GPIO_vconnectpullup( u8 port, u8 pin , u8 connect_pullup ){
	switch (port){
     45e:	84 34       	cpi	r24, 0x44	; 68
     460:	09 f4       	brne	.+2      	; 0x464 <GPIO_vconnectpullup+0x6>
     462:	7a c0       	rjmp	.+244    	; 0x558 <GPIO_vconnectpullup+0xfa>
     464:	85 34       	cpi	r24, 0x45	; 69
     466:	48 f4       	brcc	.+18     	; 0x47a <GPIO_vconnectpullup+0x1c>
     468:	82 34       	cpi	r24, 0x42	; 66
     46a:	b1 f1       	breq	.+108    	; 0x4d8 <GPIO_vconnectpullup+0x7a>
     46c:	83 34       	cpi	r24, 0x43	; 67
     46e:	08 f0       	brcs	.+2      	; 0x472 <GPIO_vconnectpullup+0x14>
     470:	53 c0       	rjmp	.+166    	; 0x518 <GPIO_vconnectpullup+0xba>
     472:	81 34       	cpi	r24, 0x41	; 65
     474:	09 f0       	breq	.+2      	; 0x478 <GPIO_vconnectpullup+0x1a>
     476:	8f c0       	rjmp	.+286    	; 0x596 <GPIO_vconnectpullup+0x138>
     478:	0f c0       	rjmp	.+30     	; 0x498 <GPIO_vconnectpullup+0x3a>
     47a:	82 36       	cpi	r24, 0x62	; 98
     47c:	69 f1       	breq	.+90     	; 0x4d8 <GPIO_vconnectpullup+0x7a>
     47e:	83 36       	cpi	r24, 0x63	; 99
     480:	20 f4       	brcc	.+8      	; 0x48a <GPIO_vconnectpullup+0x2c>
     482:	81 36       	cpi	r24, 0x61	; 97
     484:	09 f0       	breq	.+2      	; 0x488 <GPIO_vconnectpullup+0x2a>
     486:	87 c0       	rjmp	.+270    	; 0x596 <GPIO_vconnectpullup+0x138>
     488:	07 c0       	rjmp	.+14     	; 0x498 <GPIO_vconnectpullup+0x3a>
     48a:	83 36       	cpi	r24, 0x63	; 99
     48c:	09 f4       	brne	.+2      	; 0x490 <GPIO_vconnectpullup+0x32>
     48e:	44 c0       	rjmp	.+136    	; 0x518 <GPIO_vconnectpullup+0xba>
     490:	84 36       	cpi	r24, 0x64	; 100
     492:	09 f0       	breq	.+2      	; 0x496 <GPIO_vconnectpullup+0x38>
     494:	80 c0       	rjmp	.+256    	; 0x596 <GPIO_vconnectpullup+0x138>
     496:	60 c0       	rjmp	.+192    	; 0x558 <GPIO_vconnectpullup+0xfa>
		case 'A' :
		case 'a' :
			if (Connect==connect_pullup){
     498:	41 30       	cpi	r20, 0x01	; 1
     49a:	81 f4       	brne	.+32     	; 0x4bc <GPIO_vconnectpullup+0x5e>
				SET_BIT(myPORTA,pin);
     49c:	2b b3       	in	r18, 0x1b	; 27
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	ac 01       	movw	r20, r24
     4a4:	02 c0       	rjmp	.+4      	; 0x4aa <GPIO_vconnectpullup+0x4c>
     4a6:	44 0f       	add	r20, r20
     4a8:	55 1f       	adc	r21, r21
     4aa:	6a 95       	dec	r22
     4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <GPIO_vconnectpullup+0x48>
     4ae:	ba 01       	movw	r22, r20
     4b0:	62 2b       	or	r22, r18
     4b2:	6b bb       	out	0x1b, r22	; 27
				CLR_BIT(mySFIOR,PUD);
     4b4:	80 b7       	in	r24, 0x30	; 48
     4b6:	8b 7f       	andi	r24, 0xFB	; 251
     4b8:	80 bf       	out	0x30, r24	; 48
     4ba:	08 95       	ret
			}else{
				CLR_BIT(myPORTA,pin);
     4bc:	2b b3       	in	r18, 0x1b	; 27
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	ac 01       	movw	r20, r24
     4c4:	02 c0       	rjmp	.+4      	; 0x4ca <GPIO_vconnectpullup+0x6c>
     4c6:	44 0f       	add	r20, r20
     4c8:	55 1f       	adc	r21, r21
     4ca:	6a 95       	dec	r22
     4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <GPIO_vconnectpullup+0x68>
     4ce:	ba 01       	movw	r22, r20
     4d0:	60 95       	com	r22
     4d2:	62 23       	and	r22, r18
     4d4:	6b bb       	out	0x1b, r22	; 27
     4d6:	08 95       	ret
			}
			break;
		case 'B' :
		case 'b' :
			if (Connect==connect_pullup){
     4d8:	41 30       	cpi	r20, 0x01	; 1
     4da:	81 f4       	brne	.+32     	; 0x4fc <GPIO_vconnectpullup+0x9e>
				SET_BIT(myPORTB,pin);
     4dc:	28 b3       	in	r18, 0x18	; 24
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	ac 01       	movw	r20, r24
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <GPIO_vconnectpullup+0x8c>
     4e6:	44 0f       	add	r20, r20
     4e8:	55 1f       	adc	r21, r21
     4ea:	6a 95       	dec	r22
     4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <GPIO_vconnectpullup+0x88>
     4ee:	ba 01       	movw	r22, r20
     4f0:	62 2b       	or	r22, r18
     4f2:	68 bb       	out	0x18, r22	; 24
				CLR_BIT(mySFIOR,PUD);
     4f4:	80 b7       	in	r24, 0x30	; 48
     4f6:	8b 7f       	andi	r24, 0xFB	; 251
     4f8:	80 bf       	out	0x30, r24	; 48
     4fa:	08 95       	ret
			}else{
				CLR_BIT(myPORTB,pin);
     4fc:	28 b3       	in	r18, 0x18	; 24
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	ac 01       	movw	r20, r24
     504:	02 c0       	rjmp	.+4      	; 0x50a <GPIO_vconnectpullup+0xac>
     506:	44 0f       	add	r20, r20
     508:	55 1f       	adc	r21, r21
     50a:	6a 95       	dec	r22
     50c:	e2 f7       	brpl	.-8      	; 0x506 <GPIO_vconnectpullup+0xa8>
     50e:	ba 01       	movw	r22, r20
     510:	60 95       	com	r22
     512:	62 23       	and	r22, r18
     514:	68 bb       	out	0x18, r22	; 24
     516:	08 95       	ret
			}
			break;
		case 'C' :
		case 'c' :
			if (Connect==connect_pullup){
     518:	41 30       	cpi	r20, 0x01	; 1
     51a:	81 f4       	brne	.+32     	; 0x53c <GPIO_vconnectpullup+0xde>
				SET_BIT(myPORTC,pin);
     51c:	25 b3       	in	r18, 0x15	; 21
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	ac 01       	movw	r20, r24
     524:	02 c0       	rjmp	.+4      	; 0x52a <GPIO_vconnectpullup+0xcc>
     526:	44 0f       	add	r20, r20
     528:	55 1f       	adc	r21, r21
     52a:	6a 95       	dec	r22
     52c:	e2 f7       	brpl	.-8      	; 0x526 <GPIO_vconnectpullup+0xc8>
     52e:	ba 01       	movw	r22, r20
     530:	62 2b       	or	r22, r18
     532:	65 bb       	out	0x15, r22	; 21
				CLR_BIT(mySFIOR,PUD);
     534:	80 b7       	in	r24, 0x30	; 48
     536:	8b 7f       	andi	r24, 0xFB	; 251
     538:	80 bf       	out	0x30, r24	; 48
     53a:	08 95       	ret
			}else{
				CLR_BIT(myPORTC,pin);
     53c:	25 b3       	in	r18, 0x15	; 21
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	ac 01       	movw	r20, r24
     544:	02 c0       	rjmp	.+4      	; 0x54a <GPIO_vconnectpullup+0xec>
     546:	44 0f       	add	r20, r20
     548:	55 1f       	adc	r21, r21
     54a:	6a 95       	dec	r22
     54c:	e2 f7       	brpl	.-8      	; 0x546 <GPIO_vconnectpullup+0xe8>
     54e:	ba 01       	movw	r22, r20
     550:	60 95       	com	r22
     552:	62 23       	and	r22, r18
     554:	65 bb       	out	0x15, r22	; 21
     556:	08 95       	ret
			}
			break;
		case 'D' :
		case 'd' :
			if (Connect==connect_pullup){
     558:	41 30       	cpi	r20, 0x01	; 1
     55a:	81 f4       	brne	.+32     	; 0x57c <GPIO_vconnectpullup+0x11e>
				SET_BIT(myPORTD,pin);
     55c:	22 b3       	in	r18, 0x12	; 18
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	ac 01       	movw	r20, r24
     564:	02 c0       	rjmp	.+4      	; 0x56a <GPIO_vconnectpullup+0x10c>
     566:	44 0f       	add	r20, r20
     568:	55 1f       	adc	r21, r21
     56a:	6a 95       	dec	r22
     56c:	e2 f7       	brpl	.-8      	; 0x566 <GPIO_vconnectpullup+0x108>
     56e:	ba 01       	movw	r22, r20
     570:	62 2b       	or	r22, r18
     572:	62 bb       	out	0x12, r22	; 18
				CLR_BIT(mySFIOR,PUD);
     574:	80 b7       	in	r24, 0x30	; 48
     576:	8b 7f       	andi	r24, 0xFB	; 251
     578:	80 bf       	out	0x30, r24	; 48
     57a:	08 95       	ret
			}else{
				CLR_BIT(myPORTD,pin);
     57c:	22 b3       	in	r18, 0x12	; 18
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	ac 01       	movw	r20, r24
     584:	02 c0       	rjmp	.+4      	; 0x58a <GPIO_vconnectpullup+0x12c>
     586:	44 0f       	add	r20, r20
     588:	55 1f       	adc	r21, r21
     58a:	6a 95       	dec	r22
     58c:	e2 f7       	brpl	.-8      	; 0x586 <GPIO_vconnectpullup+0x128>
     58e:	ba 01       	movw	r22, r20
     590:	60 95       	com	r22
     592:	62 23       	and	r22, r18
     594:	62 bb       	out	0x12, r22	; 18
     596:	08 95       	ret

00000598 <GPIO_vset_PORT_DIR>:
}

//==================================PORT=============================================

void GPIO_vset_PORT_DIR(u8 portnum, u8 dir){
	switch (portnum){
     598:	84 34       	cpi	r24, 0x44	; 68
     59a:	d9 f0       	breq	.+54     	; 0x5d2 <GPIO_vset_PORT_DIR+0x3a>
     59c:	85 34       	cpi	r24, 0x45	; 69
     59e:	38 f4       	brcc	.+14     	; 0x5ae <GPIO_vset_PORT_DIR+0x16>
     5a0:	82 34       	cpi	r24, 0x42	; 66
     5a2:	99 f0       	breq	.+38     	; 0x5ca <GPIO_vset_PORT_DIR+0x32>
     5a4:	83 34       	cpi	r24, 0x43	; 67
     5a6:	98 f4       	brcc	.+38     	; 0x5ce <GPIO_vset_PORT_DIR+0x36>
     5a8:	81 34       	cpi	r24, 0x41	; 65
     5aa:	a1 f4       	brne	.+40     	; 0x5d4 <GPIO_vset_PORT_DIR+0x3c>
     5ac:	0c c0       	rjmp	.+24     	; 0x5c6 <GPIO_vset_PORT_DIR+0x2e>
     5ae:	82 36       	cpi	r24, 0x62	; 98
     5b0:	61 f0       	breq	.+24     	; 0x5ca <GPIO_vset_PORT_DIR+0x32>
     5b2:	83 36       	cpi	r24, 0x63	; 99
     5b4:	18 f4       	brcc	.+6      	; 0x5bc <GPIO_vset_PORT_DIR+0x24>
     5b6:	81 36       	cpi	r24, 0x61	; 97
     5b8:	69 f4       	brne	.+26     	; 0x5d4 <GPIO_vset_PORT_DIR+0x3c>
     5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <GPIO_vset_PORT_DIR+0x2e>
     5bc:	83 36       	cpi	r24, 0x63	; 99
     5be:	39 f0       	breq	.+14     	; 0x5ce <GPIO_vset_PORT_DIR+0x36>
     5c0:	84 36       	cpi	r24, 0x64	; 100
     5c2:	41 f4       	brne	.+16     	; 0x5d4 <GPIO_vset_PORT_DIR+0x3c>
     5c4:	06 c0       	rjmp	.+12     	; 0x5d2 <GPIO_vset_PORT_DIR+0x3a>
		case 'A' :
		case 'a' :
			myDDRA = dir;
     5c6:	6a bb       	out	0x1a, r22	; 26
			break;
     5c8:	08 95       	ret
		case 'b' :
		case 'B' :
			myDDRB = dir;
     5ca:	67 bb       	out	0x17, r22	; 23
			break;
     5cc:	08 95       	ret
		case 'c' :
		case 'C' :
			myDDRC = dir;
     5ce:	64 bb       	out	0x14, r22	; 20
			break;
     5d0:	08 95       	ret
		case 'd' :
		case 'D' :
			myDDRD = dir;
     5d2:	61 bb       	out	0x11, r22	; 17
     5d4:	08 95       	ret

000005d6 <GPIO_vwrite_PORT>:
		default: break;
	}
}

void GPIO_vwrite_PORT(u8 portnum, u8 portvalue){
	switch (portnum){
     5d6:	84 34       	cpi	r24, 0x44	; 68
     5d8:	d9 f0       	breq	.+54     	; 0x610 <GPIO_vwrite_PORT+0x3a>
     5da:	85 34       	cpi	r24, 0x45	; 69
     5dc:	38 f4       	brcc	.+14     	; 0x5ec <GPIO_vwrite_PORT+0x16>
     5de:	82 34       	cpi	r24, 0x42	; 66
     5e0:	99 f0       	breq	.+38     	; 0x608 <GPIO_vwrite_PORT+0x32>
     5e2:	83 34       	cpi	r24, 0x43	; 67
     5e4:	98 f4       	brcc	.+38     	; 0x60c <GPIO_vwrite_PORT+0x36>
     5e6:	81 34       	cpi	r24, 0x41	; 65
     5e8:	a1 f4       	brne	.+40     	; 0x612 <GPIO_vwrite_PORT+0x3c>
     5ea:	0c c0       	rjmp	.+24     	; 0x604 <GPIO_vwrite_PORT+0x2e>
     5ec:	82 36       	cpi	r24, 0x62	; 98
     5ee:	61 f0       	breq	.+24     	; 0x608 <GPIO_vwrite_PORT+0x32>
     5f0:	83 36       	cpi	r24, 0x63	; 99
     5f2:	18 f4       	brcc	.+6      	; 0x5fa <GPIO_vwrite_PORT+0x24>
     5f4:	81 36       	cpi	r24, 0x61	; 97
     5f6:	69 f4       	brne	.+26     	; 0x612 <GPIO_vwrite_PORT+0x3c>
     5f8:	05 c0       	rjmp	.+10     	; 0x604 <GPIO_vwrite_PORT+0x2e>
     5fa:	83 36       	cpi	r24, 0x63	; 99
     5fc:	39 f0       	breq	.+14     	; 0x60c <GPIO_vwrite_PORT+0x36>
     5fe:	84 36       	cpi	r24, 0x64	; 100
     600:	41 f4       	brne	.+16     	; 0x612 <GPIO_vwrite_PORT+0x3c>
     602:	06 c0       	rjmp	.+12     	; 0x610 <GPIO_vwrite_PORT+0x3a>
		case 'A' :
		case 'a' :
			myPORTA = portvalue;
     604:	6b bb       	out	0x1b, r22	; 27
			break;
     606:	08 95       	ret
		case 'B' :
		case 'b' :
			myPORTB = portvalue;
     608:	68 bb       	out	0x18, r22	; 24
			break;
     60a:	08 95       	ret
		case 'C' :
		case 'c' :
			myPORTC = portvalue;
     60c:	65 bb       	out	0x15, r22	; 21
			break;
     60e:	08 95       	ret
		case 'D' :
		case 'd' :
			myPORTD = portvalue;
     610:	62 bb       	out	0x12, r22	; 18
     612:	08 95       	ret

00000614 <GPIO_vtoggle_PORT>:
		default: break;
	}
}

void GPIO_vtoggle_PORT(u8 portnum){
	switch (portnum){
     614:	84 34       	cpi	r24, 0x44	; 68
     616:	09 f1       	breq	.+66     	; 0x65a <GPIO_vtoggle_PORT+0x46>
     618:	85 34       	cpi	r24, 0x45	; 69
     61a:	38 f4       	brcc	.+14     	; 0x62a <GPIO_vtoggle_PORT+0x16>
     61c:	82 34       	cpi	r24, 0x42	; 66
     61e:	a9 f0       	breq	.+42     	; 0x64a <GPIO_vtoggle_PORT+0x36>
     620:	83 34       	cpi	r24, 0x43	; 67
     622:	b8 f4       	brcc	.+46     	; 0x652 <GPIO_vtoggle_PORT+0x3e>
     624:	81 34       	cpi	r24, 0x41	; 65
     626:	e1 f4       	brne	.+56     	; 0x660 <GPIO_vtoggle_PORT+0x4c>
     628:	0c c0       	rjmp	.+24     	; 0x642 <GPIO_vtoggle_PORT+0x2e>
     62a:	82 36       	cpi	r24, 0x62	; 98
     62c:	71 f0       	breq	.+28     	; 0x64a <GPIO_vtoggle_PORT+0x36>
     62e:	83 36       	cpi	r24, 0x63	; 99
     630:	18 f4       	brcc	.+6      	; 0x638 <GPIO_vtoggle_PORT+0x24>
     632:	81 36       	cpi	r24, 0x61	; 97
     634:	a9 f4       	brne	.+42     	; 0x660 <GPIO_vtoggle_PORT+0x4c>
     636:	05 c0       	rjmp	.+10     	; 0x642 <GPIO_vtoggle_PORT+0x2e>
     638:	83 36       	cpi	r24, 0x63	; 99
     63a:	59 f0       	breq	.+22     	; 0x652 <GPIO_vtoggle_PORT+0x3e>
     63c:	84 36       	cpi	r24, 0x64	; 100
     63e:	81 f4       	brne	.+32     	; 0x660 <GPIO_vtoggle_PORT+0x4c>
     640:	0c c0       	rjmp	.+24     	; 0x65a <GPIO_vtoggle_PORT+0x46>
		case 'A' :
		case 'a' :
			myPORTA = ~myPORTA;
     642:	8b b3       	in	r24, 0x1b	; 27
     644:	80 95       	com	r24
     646:	8b bb       	out	0x1b, r24	; 27
			break;
     648:	08 95       	ret
		case 'B' :
		case 'b' :
			myPORTB = ~myPORTB;
     64a:	88 b3       	in	r24, 0x18	; 24
     64c:	80 95       	com	r24
     64e:	88 bb       	out	0x18, r24	; 24
			break;
     650:	08 95       	ret
		case 'C' :
		case 'c' :
			myPORTC = ~myPORTC;
     652:	85 b3       	in	r24, 0x15	; 21
     654:	80 95       	com	r24
     656:	85 bb       	out	0x15, r24	; 21
			break;
     658:	08 95       	ret
		case 'D' :
		case 'd' :
			myPORTD = ~myPORTD;
     65a:	82 b3       	in	r24, 0x12	; 18
     65c:	80 95       	com	r24
     65e:	82 bb       	out	0x12, r24	; 18
     660:	08 95       	ret

00000662 <GPIO_read_PORT>:
			break;
		default: break;
	}
}
u8 GPIO_read_PORT(u8 portnum){
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	0f 92       	push	r0
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62
	volatile u8 val=0;
     66c:	19 82       	std	Y+1, r1	; 0x01
	switch (portnum){
     66e:	84 34       	cpi	r24, 0x44	; 68
     670:	f1 f0       	breq	.+60     	; 0x6ae <GPIO_read_PORT+0x4c>
     672:	85 34       	cpi	r24, 0x45	; 69
     674:	38 f4       	brcc	.+14     	; 0x684 <GPIO_read_PORT+0x22>
     676:	82 34       	cpi	r24, 0x42	; 66
     678:	a1 f0       	breq	.+40     	; 0x6a2 <GPIO_read_PORT+0x40>
     67a:	83 34       	cpi	r24, 0x43	; 67
     67c:	a8 f4       	brcc	.+42     	; 0x6a8 <GPIO_read_PORT+0x46>
     67e:	81 34       	cpi	r24, 0x41	; 65
     680:	c1 f4       	brne	.+48     	; 0x6b2 <GPIO_read_PORT+0x50>
     682:	0c c0       	rjmp	.+24     	; 0x69c <GPIO_read_PORT+0x3a>
     684:	82 36       	cpi	r24, 0x62	; 98
     686:	69 f0       	breq	.+26     	; 0x6a2 <GPIO_read_PORT+0x40>
     688:	83 36       	cpi	r24, 0x63	; 99
     68a:	18 f4       	brcc	.+6      	; 0x692 <GPIO_read_PORT+0x30>
     68c:	81 36       	cpi	r24, 0x61	; 97
     68e:	89 f4       	brne	.+34     	; 0x6b2 <GPIO_read_PORT+0x50>
     690:	05 c0       	rjmp	.+10     	; 0x69c <GPIO_read_PORT+0x3a>
     692:	83 36       	cpi	r24, 0x63	; 99
     694:	49 f0       	breq	.+18     	; 0x6a8 <GPIO_read_PORT+0x46>
     696:	84 36       	cpi	r24, 0x64	; 100
     698:	61 f4       	brne	.+24     	; 0x6b2 <GPIO_read_PORT+0x50>
     69a:	09 c0       	rjmp	.+18     	; 0x6ae <GPIO_read_PORT+0x4c>
		case 'a' :
		case 'A' :
			val = myPINA;
     69c:	89 b3       	in	r24, 0x19	; 25
     69e:	89 83       	std	Y+1, r24	; 0x01
			break;
     6a0:	08 c0       	rjmp	.+16     	; 0x6b2 <GPIO_read_PORT+0x50>
		case 'b' :
		case 'B' :
			val = myPINB;
     6a2:	86 b3       	in	r24, 0x16	; 22
     6a4:	89 83       	std	Y+1, r24	; 0x01
			break;
     6a6:	05 c0       	rjmp	.+10     	; 0x6b2 <GPIO_read_PORT+0x50>
		case 'c' :
		case 'C' :
			val = myPINC;
     6a8:	83 b3       	in	r24, 0x13	; 19
     6aa:	89 83       	std	Y+1, r24	; 0x01
			break;
     6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <GPIO_read_PORT+0x50>
		case 'd' :
		case 'D' :
			val = myPIND;
     6ae:	80 b3       	in	r24, 0x10	; 16
     6b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		default: break;
	}
}
     6b2:	0f 90       	pop	r0
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	08 95       	ret

000006ba <GPIO_High_Nibble_vset_dir>:
//=====================================================================================

//==================================Nibble=============================================

//==================================High Nibble========================================
void GPIO_High_Nibble_vset_dir(u8 port,u8 dir){
     6ba:	cf 93       	push	r28
     6bc:	c8 2f       	mov	r28, r24
	if (1==dir){
     6be:	61 30       	cpi	r22, 0x01	; 1
     6c0:	a1 f4       	brne	.+40     	; 0x6ea <GPIO_High_Nibble_vset_dir+0x30>
		GPIO_vsetPIN_DIR(port,4,1);
     6c2:	64 e0       	ldi	r22, 0x04	; 4
     6c4:	41 e0       	ldi	r20, 0x01	; 1
     6c6:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,5,1);
     6ca:	8c 2f       	mov	r24, r28
     6cc:	65 e0       	ldi	r22, 0x05	; 5
     6ce:	41 e0       	ldi	r20, 0x01	; 1
     6d0:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,6,1);
     6d4:	8c 2f       	mov	r24, r28
     6d6:	66 e0       	ldi	r22, 0x06	; 6
     6d8:	41 e0       	ldi	r20, 0x01	; 1
     6da:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,7,1);
     6de:	8c 2f       	mov	r24, r28
     6e0:	67 e0       	ldi	r22, 0x07	; 7
     6e2:	41 e0       	ldi	r20, 0x01	; 1
     6e4:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_vsetPIN_DIR>
     6e8:	13 c0       	rjmp	.+38     	; 0x710 <GPIO_High_Nibble_vset_dir+0x56>
	}else{
		GPIO_vsetPIN_DIR(port,4,0);
     6ea:	64 e0       	ldi	r22, 0x04	; 4
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,5,0);
     6f2:	8c 2f       	mov	r24, r28
     6f4:	65 e0       	ldi	r22, 0x05	; 5
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,6,0);
     6fc:	8c 2f       	mov	r24, r28
     6fe:	66 e0       	ldi	r22, 0x06	; 6
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,7,0);
     706:	8c 2f       	mov	r24, r28
     708:	67 e0       	ldi	r22, 0x07	; 7
     70a:	40 e0       	ldi	r20, 0x00	; 0
     70c:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_vsetPIN_DIR>
	}
	
}
     710:	cf 91       	pop	r28
     712:	08 95       	ret

00000714 <GPIO_High_Nibble_vwrite>:

void GPIO_High_Nibble_vwrite( u8 port , u8 value ){
	value <<= 4;   
     714:	62 95       	swap	r22
     716:	60 7f       	andi	r22, 0xF0	; 240
	switch (port){    
     718:	84 34       	cpi	r24, 0x44	; 68
     71a:	51 f1       	breq	.+84     	; 0x770 <GPIO_High_Nibble_vwrite+0x5c>
     71c:	85 34       	cpi	r24, 0x45	; 69
     71e:	38 f4       	brcc	.+14     	; 0x72e <GPIO_High_Nibble_vwrite+0x1a>
     720:	82 34       	cpi	r24, 0x42	; 66
     722:	c1 f0       	breq	.+48     	; 0x754 <GPIO_High_Nibble_vwrite+0x40>
     724:	83 34       	cpi	r24, 0x43	; 67
     726:	e8 f4       	brcc	.+58     	; 0x762 <GPIO_High_Nibble_vwrite+0x4e>
     728:	81 34       	cpi	r24, 0x41	; 65
     72a:	41 f5       	brne	.+80     	; 0x77c <GPIO_High_Nibble_vwrite+0x68>
     72c:	0c c0       	rjmp	.+24     	; 0x746 <GPIO_High_Nibble_vwrite+0x32>
     72e:	82 36       	cpi	r24, 0x62	; 98
     730:	89 f0       	breq	.+34     	; 0x754 <GPIO_High_Nibble_vwrite+0x40>
     732:	83 36       	cpi	r24, 0x63	; 99
     734:	18 f4       	brcc	.+6      	; 0x73c <GPIO_High_Nibble_vwrite+0x28>
     736:	81 36       	cpi	r24, 0x61	; 97
     738:	09 f5       	brne	.+66     	; 0x77c <GPIO_High_Nibble_vwrite+0x68>
     73a:	05 c0       	rjmp	.+10     	; 0x746 <GPIO_High_Nibble_vwrite+0x32>
     73c:	83 36       	cpi	r24, 0x63	; 99
     73e:	89 f0       	breq	.+34     	; 0x762 <GPIO_High_Nibble_vwrite+0x4e>
     740:	84 36       	cpi	r24, 0x64	; 100
     742:	e1 f4       	brne	.+56     	; 0x77c <GPIO_High_Nibble_vwrite+0x68>
     744:	15 c0       	rjmp	.+42     	; 0x770 <GPIO_High_Nibble_vwrite+0x5c>
		case 'A':
		case 'a':			
			myPORTA &=0x0f; 
     746:	8b b3       	in	r24, 0x1b	; 27
     748:	8f 70       	andi	r24, 0x0F	; 15
     74a:	8b bb       	out	0x1b, r24	; 27
			myPORTA |=value;
     74c:	8b b3       	in	r24, 0x1b	; 27
     74e:	68 2b       	or	r22, r24
     750:	6b bb       	out	0x1b, r22	; 27
			break;				
     752:	08 95       	ret
		case 'B':
		case 'b':
			myPORTB &=0x0f;
     754:	88 b3       	in	r24, 0x18	; 24
     756:	8f 70       	andi	r24, 0x0F	; 15
     758:	88 bb       	out	0x18, r24	; 24
			myPORTB |=value;
     75a:	88 b3       	in	r24, 0x18	; 24
     75c:	68 2b       	or	r22, r24
     75e:	68 bb       	out	0x18, r22	; 24
			break;
     760:	08 95       	ret
		case 'C':
		case 'c':
			myPORTC &=0x0f;
     762:	85 b3       	in	r24, 0x15	; 21
     764:	8f 70       	andi	r24, 0x0F	; 15
     766:	85 bb       	out	0x15, r24	; 21
			myPORTC |=value;
     768:	85 b3       	in	r24, 0x15	; 21
     76a:	68 2b       	or	r22, r24
     76c:	65 bb       	out	0x15, r22	; 21
			break;
     76e:	08 95       	ret
		case 'D':
		case 'd':
			myPORTD &=0x0f;
     770:	82 b3       	in	r24, 0x12	; 18
     772:	8f 70       	andi	r24, 0x0F	; 15
     774:	82 bb       	out	0x12, r24	; 18
			myPORTD |=value;
     776:	82 b3       	in	r24, 0x12	; 18
     778:	68 2b       	or	r22, r24
     77a:	62 bb       	out	0x12, r22	; 18
     77c:	08 95       	ret

0000077e <GPIO_Low_Nibble_vset_dir>:
		default: break;
	}
}

//==================================Low Nibble========================================
void GPIO_Low_Nibble_vset_dir(u8 port,u8 dir){
     77e:	cf 93       	push	r28
     780:	c8 2f       	mov	r28, r24
	if (1==dir){
     782:	61 30       	cpi	r22, 0x01	; 1
     784:	a1 f4       	brne	.+40     	; 0x7ae <GPIO_Low_Nibble_vset_dir+0x30>
		GPIO_vsetPIN_DIR(port,0,1);
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	41 e0       	ldi	r20, 0x01	; 1
     78a:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,1,1);
     78e:	8c 2f       	mov	r24, r28
     790:	61 e0       	ldi	r22, 0x01	; 1
     792:	41 e0       	ldi	r20, 0x01	; 1
     794:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,2,1);
     798:	8c 2f       	mov	r24, r28
     79a:	62 e0       	ldi	r22, 0x02	; 2
     79c:	41 e0       	ldi	r20, 0x01	; 1
     79e:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,3,1);
     7a2:	8c 2f       	mov	r24, r28
     7a4:	63 e0       	ldi	r22, 0x03	; 3
     7a6:	41 e0       	ldi	r20, 0x01	; 1
     7a8:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_vsetPIN_DIR>
     7ac:	13 c0       	rjmp	.+38     	; 0x7d4 <GPIO_Low_Nibble_vset_dir+0x56>
	}else{
		GPIO_vsetPIN_DIR(port,0,0);
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	40 e0       	ldi	r20, 0x00	; 0
     7b2:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,1,0);
     7b6:	8c 2f       	mov	r24, r28
     7b8:	61 e0       	ldi	r22, 0x01	; 1
     7ba:	40 e0       	ldi	r20, 0x00	; 0
     7bc:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,2,0);
     7c0:	8c 2f       	mov	r24, r28
     7c2:	62 e0       	ldi	r22, 0x02	; 2
     7c4:	40 e0       	ldi	r20, 0x00	; 0
     7c6:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_vsetPIN_DIR>
		GPIO_vsetPIN_DIR(port,3,0);
     7ca:	8c 2f       	mov	r24, r28
     7cc:	63 e0       	ldi	r22, 0x03	; 3
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_vsetPIN_DIR>
	}
}
     7d4:	cf 91       	pop	r28
     7d6:	08 95       	ret

000007d8 <GPIO_Low_Nibble_vwrite>:

void GPIO_Low_Nibble_vwrite( u8 port , u8 value ){
	value &=0x0f;
     7d8:	6f 70       	andi	r22, 0x0F	; 15
	switch (port){
     7da:	84 34       	cpi	r24, 0x44	; 68
     7dc:	51 f1       	breq	.+84     	; 0x832 <GPIO_Low_Nibble_vwrite+0x5a>
     7de:	85 34       	cpi	r24, 0x45	; 69
     7e0:	38 f4       	brcc	.+14     	; 0x7f0 <GPIO_Low_Nibble_vwrite+0x18>
     7e2:	82 34       	cpi	r24, 0x42	; 66
     7e4:	c1 f0       	breq	.+48     	; 0x816 <GPIO_Low_Nibble_vwrite+0x3e>
     7e6:	83 34       	cpi	r24, 0x43	; 67
     7e8:	e8 f4       	brcc	.+58     	; 0x824 <GPIO_Low_Nibble_vwrite+0x4c>
     7ea:	81 34       	cpi	r24, 0x41	; 65
     7ec:	41 f5       	brne	.+80     	; 0x83e <GPIO_Low_Nibble_vwrite+0x66>
     7ee:	0c c0       	rjmp	.+24     	; 0x808 <GPIO_Low_Nibble_vwrite+0x30>
     7f0:	82 36       	cpi	r24, 0x62	; 98
     7f2:	89 f0       	breq	.+34     	; 0x816 <GPIO_Low_Nibble_vwrite+0x3e>
     7f4:	83 36       	cpi	r24, 0x63	; 99
     7f6:	18 f4       	brcc	.+6      	; 0x7fe <GPIO_Low_Nibble_vwrite+0x26>
     7f8:	81 36       	cpi	r24, 0x61	; 97
     7fa:	09 f5       	brne	.+66     	; 0x83e <GPIO_Low_Nibble_vwrite+0x66>
     7fc:	05 c0       	rjmp	.+10     	; 0x808 <GPIO_Low_Nibble_vwrite+0x30>
     7fe:	83 36       	cpi	r24, 0x63	; 99
     800:	89 f0       	breq	.+34     	; 0x824 <GPIO_Low_Nibble_vwrite+0x4c>
     802:	84 36       	cpi	r24, 0x64	; 100
     804:	e1 f4       	brne	.+56     	; 0x83e <GPIO_Low_Nibble_vwrite+0x66>
     806:	15 c0       	rjmp	.+42     	; 0x832 <GPIO_Low_Nibble_vwrite+0x5a>
		case 'A':
		case 'a':
			myPORTA &=0xf0;
     808:	8b b3       	in	r24, 0x1b	; 27
     80a:	80 7f       	andi	r24, 0xF0	; 240
     80c:	8b bb       	out	0x1b, r24	; 27
			myPORTA |=value;
     80e:	8b b3       	in	r24, 0x1b	; 27
     810:	68 2b       	or	r22, r24
     812:	6b bb       	out	0x1b, r22	; 27
			break;
     814:	08 95       	ret
		case 'B':
		case 'b':
			myPORTB &=0xf0;
     816:	88 b3       	in	r24, 0x18	; 24
     818:	80 7f       	andi	r24, 0xF0	; 240
     81a:	88 bb       	out	0x18, r24	; 24
			myPORTB |=value;
     81c:	88 b3       	in	r24, 0x18	; 24
     81e:	68 2b       	or	r22, r24
     820:	68 bb       	out	0x18, r22	; 24
			break;
     822:	08 95       	ret
		case 'C':
		case 'c':
			myPORTC &=0xf0;
     824:	85 b3       	in	r24, 0x15	; 21
     826:	80 7f       	andi	r24, 0xF0	; 240
     828:	85 bb       	out	0x15, r24	; 21
			myPORTC |=value;
     82a:	85 b3       	in	r24, 0x15	; 21
     82c:	68 2b       	or	r22, r24
     82e:	65 bb       	out	0x15, r22	; 21
			break;
     830:	08 95       	ret
		case 'D':
		case 'd':
			myPORTD &=0xf0;
     832:	82 b3       	in	r24, 0x12	; 18
     834:	80 7f       	andi	r24, 0xF0	; 240
     836:	82 bb       	out	0x12, r24	; 18
			myPORTD |=value;
     838:	82 b3       	in	r24, 0x12	; 18
     83a:	68 2b       	or	r22, r24
     83c:	62 bb       	out	0x12, r22	; 18
     83e:	08 95       	ret

00000840 <keypad_vInit>:
 * Keypad_ECU.c
 *
 *  Author: Mahmoud Ayman
 */ 
#include "Keypad_ECU.h"
void keypad_vInit(u8 port){
     840:	cf 93       	push	r28
     842:	c8 2f       	mov	r28, r24
	
		GPIO_vset_PORT_DIR(port,0x0f);
     844:	6f e0       	ldi	r22, 0x0F	; 15
     846:	0e 94 cc 02 	call	0x598	; 0x598 <GPIO_vset_PORT_DIR>
		GPIO_vconnectpullup(port,4,1);
     84a:	8c 2f       	mov	r24, r28
     84c:	64 e0       	ldi	r22, 0x04	; 4
     84e:	41 e0       	ldi	r20, 0x01	; 1
     850:	0e 94 2f 02 	call	0x45e	; 0x45e <GPIO_vconnectpullup>
		GPIO_vconnectpullup(port,5,1);
     854:	8c 2f       	mov	r24, r28
     856:	65 e0       	ldi	r22, 0x05	; 5
     858:	41 e0       	ldi	r20, 0x01	; 1
     85a:	0e 94 2f 02 	call	0x45e	; 0x45e <GPIO_vconnectpullup>
		GPIO_vconnectpullup(port,6,1);
     85e:	8c 2f       	mov	r24, r28
     860:	66 e0       	ldi	r22, 0x06	; 6
     862:	41 e0       	ldi	r20, 0x01	; 1
     864:	0e 94 2f 02 	call	0x45e	; 0x45e <GPIO_vconnectpullup>
		GPIO_vconnectpullup(port,7,1);
     868:	8c 2f       	mov	r24, r28
     86a:	67 e0       	ldi	r22, 0x07	; 7
     86c:	41 e0       	ldi	r20, 0x01	; 1
     86e:	0e 94 2f 02 	call	0x45e	; 0x45e <GPIO_vconnectpullup>
	
}
     872:	cf 91       	pop	r28
     874:	08 95       	ret

00000876 <keypad_u8check_press>:

u8 keypad_u8check_press(u8 port){
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
     884:	60 97       	sbiw	r28, 0x10	; 16
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	de bf       	out	0x3e, r29	; 62
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	cd bf       	out	0x3d, r28	; 61
     890:	08 2f       	mov	r16, r24
//uint8 arr[4][4]={{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}};  //real 4*4 keypad
	u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};  //proteus 4*4 keypad
     892:	de 01       	movw	r26, r28
     894:	11 96       	adiw	r26, 0x01	; 1
     896:	e0 e6       	ldi	r30, 0x60	; 96
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	80 e1       	ldi	r24, 0x10	; 16
     89c:	01 90       	ld	r0, Z+
     89e:	0d 92       	st	X+, r0
     8a0:	81 50       	subi	r24, 0x01	; 1
     8a2:	e1 f7       	brne	.-8      	; 0x89c <keypad_u8check_press+0x26>
	u8 row, coloumn, x;
	u8 returnval = NOTPRESSED;
	for (row = 0; row < 4; row++){
     8a4:	ff 24       	eor	r15, r15
		GPIO_vwrite_PIN(port,0,1);
     8a6:	80 2f       	mov	r24, r16
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	41 e0       	ldi	r20, 0x01	; 1
     8ac:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_vwrite_PIN>
		GPIO_vwrite_PIN(port,1,1);
     8b0:	80 2f       	mov	r24, r16
     8b2:	61 e0       	ldi	r22, 0x01	; 1
     8b4:	41 e0       	ldi	r20, 0x01	; 1
     8b6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_vwrite_PIN>
		GPIO_vwrite_PIN(port,2,1);
     8ba:	80 2f       	mov	r24, r16
     8bc:	62 e0       	ldi	r22, 0x02	; 2
     8be:	41 e0       	ldi	r20, 0x01	; 1
     8c0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_vwrite_PIN>
		GPIO_vwrite_PIN(port,3,1);
     8c4:	80 2f       	mov	r24, r16
     8c6:	63 e0       	ldi	r22, 0x03	; 3
     8c8:	41 e0       	ldi	r20, 0x01	; 1
     8ca:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_vwrite_PIN>
		GPIO_vwrite_PIN(port,row,0);
     8ce:	80 2f       	mov	r24, r16
     8d0:	6f 2d       	mov	r22, r15
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_vwrite_PIN>
		
			for (coloumn=0; coloumn < 4; coloumn++){
     8d8:	10 e0       	ldi	r17, 0x00	; 0
				x=GPIO_u8read_PIN('D',(coloumn+4));
     8da:	61 2f       	mov	r22, r17
     8dc:	6c 5f       	subi	r22, 0xFC	; 252
     8de:	84 e4       	ldi	r24, 0x44	; 68
     8e0:	0e 94 7d 01 	call	0x2fa	; 0x2fa <GPIO_u8read_PIN>
				if(0==x){
     8e4:	88 23       	and	r24, r24
     8e6:	61 f4       	brne	.+24     	; 0x900 <keypad_u8check_press+0x8a>
					returnval = arr[row][coloumn];
     8e8:	ef 2d       	mov	r30, r15
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	ee 0f       	add	r30, r30
     8ee:	ff 1f       	adc	r31, r31
     8f0:	ee 0f       	add	r30, r30
     8f2:	ff 1f       	adc	r31, r31
     8f4:	e1 0f       	add	r30, r17
     8f6:	f1 1d       	adc	r31, r1
     8f8:	ec 0f       	add	r30, r28
     8fa:	fd 1f       	adc	r31, r29
     8fc:	81 81       	ldd	r24, Z+1	; 0x01
     8fe:	04 c0       	rjmp	.+8      	; 0x908 <keypad_u8check_press+0x92>
		GPIO_vwrite_PIN(port,1,1);
		GPIO_vwrite_PIN(port,2,1);
		GPIO_vwrite_PIN(port,3,1);
		GPIO_vwrite_PIN(port,row,0);
		
			for (coloumn=0; coloumn < 4; coloumn++){
     900:	1f 5f       	subi	r17, 0xFF	; 255
     902:	14 30       	cpi	r17, 0x04	; 4
     904:	51 f7       	brne	.-44     	; 0x8da <keypad_u8check_press+0x64>
     906:	0c c0       	rjmp	.+24     	; 0x920 <keypad_u8check_press+0xaa>
		if(0==x){
			break;
		}
	}	
	return returnval;
     908:	60 96       	adiw	r28, 0x10	; 16
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	f8 94       	cli
     90e:	de bf       	out	0x3e, r29	; 62
     910:	0f be       	out	0x3f, r0	; 63
     912:	cd bf       	out	0x3d, r28	; 61
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	ff 90       	pop	r15
     91e:	08 95       	ret
u8 keypad_u8check_press(u8 port){
//uint8 arr[4][4]={{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}};  //real 4*4 keypad
	u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};  //proteus 4*4 keypad
	u8 row, coloumn, x;
	u8 returnval = NOTPRESSED;
	for (row = 0; row < 4; row++){
     920:	f3 94       	inc	r15
     922:	84 e0       	ldi	r24, 0x04	; 4
     924:	f8 16       	cp	r15, r24
     926:	09 f0       	breq	.+2      	; 0x92a <keypad_u8check_press+0xb4>
     928:	be cf       	rjmp	.-132    	; 0x8a6 <keypad_u8check_press+0x30>
     92a:	8f ef       	ldi	r24, 0xFF	; 255
     92c:	ed cf       	rjmp	.-38     	; 0x908 <keypad_u8check_press+0x92>

0000092e <send_falling_edge>:
			_delay_ms(1);
		}
	}
}

  static void send_falling_edge(u8 EN_port,u8 EN_pin){
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	d8 2f       	mov	r29, r24
     934:	c6 2f       	mov	r28, r22
	GPIO_vwrite_PIN(EN_port,EN_pin,1);
     936:	41 e0       	ldi	r20, 0x01	; 1
     938:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_vwrite_PIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     93c:	8f e9       	ldi	r24, 0x9F	; 159
     93e:	9f e0       	ldi	r25, 0x0F	; 15
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	f1 f7       	brne	.-4      	; 0x940 <send_falling_edge+0x12>
     944:	00 c0       	rjmp	.+0      	; 0x946 <send_falling_edge+0x18>
     946:	00 00       	nop
	_delay_ms(2);
	GPIO_vwrite_PIN(EN_port,EN_pin,0);
     948:	8d 2f       	mov	r24, r29
     94a:	6c 2f       	mov	r22, r28
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_vwrite_PIN>
}
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	08 95       	ret

00000958 <LCD_vsend_cmd>:
			_delay_ms(1);
		}
	}
}

void LCD_vsend_cmd(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 cmd,u8 EN_port,u8 EN_pin){
     958:	af 92       	push	r10
     95a:	cf 92       	push	r12
     95c:	ef 92       	push	r14
     95e:	0f 93       	push	r16
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	c4 2f       	mov	r28, r20
     966:	d2 2f       	mov	r29, r18
	if(1==Mode){
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	71 f4       	brne	.+28     	; 0x988 <LCD_vsend_cmd+0x30>
		GPIO_vwrite_PORT(port,cmd);
     96c:	84 2f       	mov	r24, r20
     96e:	6e 2d       	mov	r22, r14
     970:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <GPIO_vwrite_PORT>
		GPIO_vwrite_PIN(RS_port,RS_pin,0);
     974:	8d 2f       	mov	r24, r29
     976:	60 2f       	mov	r22, r16
     978:	40 e0       	ldi	r20, 0x00	; 0
     97a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_vwrite_PIN>
		send_falling_edge(EN_port,EN_pin);
     97e:	8c 2d       	mov	r24, r12
     980:	6a 2d       	mov	r22, r10
     982:	0e 94 97 04 	call	0x92e	; 0x92e <send_falling_edge>
     986:	47 c0       	rjmp	.+142    	; 0xa16 <LCD_vsend_cmd+0xbe>
	}else {
		if (1==Nibble){
     988:	61 30       	cpi	r22, 0x01	; 1
     98a:	19 f5       	brne	.+70     	; 0x9d2 <LCD_vsend_cmd+0x7a>
			GPIO_High_Nibble_vwrite(port,cmd>>4);     
     98c:	6e 2d       	mov	r22, r14
     98e:	62 95       	swap	r22
     990:	6f 70       	andi	r22, 0x0F	; 15
     992:	84 2f       	mov	r24, r20
     994:	0e 94 8a 03 	call	0x714	; 0x714 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     998:	8d 2f       	mov	r24, r29
     99a:	60 2f       	mov	r22, r16
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     9a2:	8c 2d       	mov	r24, r12
     9a4:	6a 2d       	mov	r22, r10
     9a6:	0e 94 97 04 	call	0x92e	; 0x92e <send_falling_edge>
			GPIO_High_Nibble_vwrite(port,cmd);
     9aa:	8c 2f       	mov	r24, r28
     9ac:	6e 2d       	mov	r22, r14
     9ae:	0e 94 8a 03 	call	0x714	; 0x714 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     9b2:	8d 2f       	mov	r24, r29
     9b4:	60 2f       	mov	r22, r16
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     9bc:	8c 2d       	mov	r24, r12
     9be:	6a 2d       	mov	r22, r10
     9c0:	0e 94 97 04 	call	0x92e	; 0x92e <send_falling_edge>
     9c4:	8f ec       	ldi	r24, 0xCF	; 207
     9c6:	97 e0       	ldi	r25, 0x07	; 7
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	f1 f7       	brne	.-4      	; 0x9c8 <LCD_vsend_cmd+0x70>
     9cc:	00 c0       	rjmp	.+0      	; 0x9ce <LCD_vsend_cmd+0x76>
     9ce:	00 00       	nop
     9d0:	22 c0       	rjmp	.+68     	; 0xa16 <LCD_vsend_cmd+0xbe>
			_delay_ms(1);
		}else{
			GPIO_Low_Nibble_vwrite(port,cmd>>4);   
     9d2:	6e 2d       	mov	r22, r14
     9d4:	62 95       	swap	r22
     9d6:	6f 70       	andi	r22, 0x0F	; 15
     9d8:	84 2f       	mov	r24, r20
     9da:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     9de:	8d 2f       	mov	r24, r29
     9e0:	60 2f       	mov	r22, r16
     9e2:	40 e0       	ldi	r20, 0x00	; 0
     9e4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     9e8:	8c 2d       	mov	r24, r12
     9ea:	6a 2d       	mov	r22, r10
     9ec:	0e 94 97 04 	call	0x92e	; 0x92e <send_falling_edge>
			GPIO_Low_Nibble_vwrite(port,cmd);
     9f0:	8c 2f       	mov	r24, r28
     9f2:	6e 2d       	mov	r22, r14
     9f4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,0);
     9f8:	8d 2f       	mov	r24, r29
     9fa:	60 2f       	mov	r22, r16
     9fc:	40 e0       	ldi	r20, 0x00	; 0
     9fe:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     a02:	8c 2d       	mov	r24, r12
     a04:	6a 2d       	mov	r22, r10
     a06:	0e 94 97 04 	call	0x92e	; 0x92e <send_falling_edge>
     a0a:	8f ec       	ldi	r24, 0xCF	; 207
     a0c:	97 e0       	ldi	r25, 0x07	; 7
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	f1 f7       	brne	.-4      	; 0xa0e <LCD_vsend_cmd+0xb6>
     a12:	00 c0       	rjmp	.+0      	; 0xa14 <LCD_vsend_cmd+0xbc>
     a14:	00 00       	nop
			_delay_ms(1);
		}
	}
}
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	0f 91       	pop	r16
     a1c:	ef 90       	pop	r14
     a1e:	cf 90       	pop	r12
     a20:	af 90       	pop	r10
     a22:	08 95       	ret

00000a24 <LCD_vInit>:
 *
 *  Author: Mahmoud Ayman
 */ 
#include "LCD_ECU.h"

void LCD_vInit(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin, u8 RW_port, u8 RW_pin,u8 EN_port,u8 EN_pin){
     a24:	7f 92       	push	r7
     a26:	8f 92       	push	r8
     a28:	9f 92       	push	r9
     a2a:	af 92       	push	r10
     a2c:	bf 92       	push	r11
     a2e:	cf 92       	push	r12
     a30:	df 92       	push	r13
     a32:	ef 92       	push	r14
     a34:	ff 92       	push	r15
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
     a42:	18 2f       	mov	r17, r24
     a44:	f6 2e       	mov	r15, r22
     a46:	74 2e       	mov	r7, r20
     a48:	92 2e       	mov	r9, r18
     a4a:	8f ef       	ldi	r24, 0xFF	; 255
     a4c:	91 ee       	ldi	r25, 0xE1	; 225
     a4e:	a4 e0       	ldi	r26, 0x04	; 4
     a50:	81 50       	subi	r24, 0x01	; 1
     a52:	90 40       	sbci	r25, 0x00	; 0
     a54:	a0 40       	sbci	r26, 0x00	; 0
     a56:	e1 f7       	brne	.-8      	; 0xa50 <LCD_vInit+0x2c>
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <LCD_vInit+0x36>
     a5a:	00 00       	nop
	_delay_ms(200);
	GPIO_vsetPIN_DIR(RS_port,RS_pin,1);
     a5c:	82 2f       	mov	r24, r18
     a5e:	60 2f       	mov	r22, r16
     a60:	41 e0       	ldi	r20, 0x01	; 1
     a62:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_vsetPIN_DIR>
	GPIO_vsetPIN_DIR(RW_port,RW_pin,1);
     a66:	8e 2d       	mov	r24, r14
     a68:	6c 2d       	mov	r22, r12
     a6a:	41 e0       	ldi	r20, 0x01	; 1
     a6c:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_vsetPIN_DIR>
	GPIO_vsetPIN_DIR(EN_port,EN_pin,1);
     a70:	8a 2d       	mov	r24, r10
     a72:	68 2d       	mov	r22, r8
     a74:	41 e0       	ldi	r20, 0x01	; 1
     a76:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_vsetPIN_DIR>
	if (1==Mode){
     a7a:	11 30       	cpi	r17, 0x01	; 1
     a7c:	09 f0       	breq	.+2      	; 0xa80 <LCD_vInit+0x5c>
     a7e:	50 c0       	rjmp	.+160    	; 0xb20 <LCD_vInit+0xfc>
		GPIO_vset_PORT_DIR(port,0xff);
     a80:	87 2d       	mov	r24, r7
     a82:	6f ef       	ldi	r22, 0xFF	; 255
     a84:	0e 94 cc 02 	call	0x598	; 0x598 <GPIO_vset_PORT_DIR>
		GPIO_vwrite_PIN(RW_port,RW_pin,0);
     a88:	8e 2d       	mov	r24, r14
     a8a:	6c 2d       	mov	r22, r12
     a8c:	40 e0       	ldi	r20, 0x00	; 0
     a8e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_vwrite_PIN>
     a92:	af e2       	ldi	r26, 0x2F	; 47
     a94:	b5 e7       	ldi	r27, 0x75	; 117
     a96:	11 97       	sbiw	r26, 0x01	; 1
     a98:	f1 f7       	brne	.-4      	; 0xa96 <LCD_vInit+0x72>
     a9a:	00 c0       	rjmp	.+0      	; 0xa9c <LCD_vInit+0x78>
     a9c:	00 00       	nop
		_delay_ms(15);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_Function_8BIT_2Lines,EN_port,EN_pin);
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	6f 2d       	mov	r22, r15
     aa2:	47 2d       	mov	r20, r7
     aa4:	29 2d       	mov	r18, r9
     aa6:	0f 2e       	mov	r0, r31
     aa8:	f8 e3       	ldi	r31, 0x38	; 56
     aaa:	ef 2e       	mov	r14, r31
     aac:	f0 2d       	mov	r31, r0
     aae:	ca 2c       	mov	r12, r10
     ab0:	a8 2c       	mov	r10, r8
     ab2:	0e 94 ac 04 	call	0x958	; 0x958 <LCD_vsend_cmd>
     ab6:	8f ec       	ldi	r24, 0xCF	; 207
     ab8:	97 e0       	ldi	r25, 0x07	; 7
     aba:	01 97       	sbiw	r24, 0x01	; 1
     abc:	f1 f7       	brne	.-4      	; 0xaba <LCD_vInit+0x96>
     abe:	00 c0       	rjmp	.+0      	; 0xac0 <LCD_vInit+0x9c>
     ac0:	00 00       	nop
		_delay_ms(1);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_DISP_ON_CURSOR_ON,EN_port,EN_pin);
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	6f 2d       	mov	r22, r15
     ac6:	47 2d       	mov	r20, r7
     ac8:	29 2d       	mov	r18, r9
     aca:	0f 2e       	mov	r0, r31
     acc:	fe e0       	ldi	r31, 0x0E	; 14
     ace:	ef 2e       	mov	r14, r31
     ad0:	f0 2d       	mov	r31, r0
     ad2:	0e 94 ac 04 	call	0x958	; 0x958 <LCD_vsend_cmd>
     ad6:	af ec       	ldi	r26, 0xCF	; 207
     ad8:	b7 e0       	ldi	r27, 0x07	; 7
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	f1 f7       	brne	.-4      	; 0xada <LCD_vInit+0xb6>
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <LCD_vInit+0xbc>
     ae0:	00 00       	nop
		_delay_ms(1);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	6f 2d       	mov	r22, r15
     ae6:	47 2d       	mov	r20, r7
     ae8:	29 2d       	mov	r18, r9
     aea:	ee 24       	eor	r14, r14
     aec:	e3 94       	inc	r14
     aee:	0e 94 ac 04 	call	0x958	; 0x958 <LCD_vsend_cmd>
     af2:	8f e1       	ldi	r24, 0x1F	; 31
     af4:	9e e4       	ldi	r25, 0x4E	; 78
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <LCD_vInit+0xd2>
     afa:	00 c0       	rjmp	.+0      	; 0xafc <LCD_vInit+0xd8>
     afc:	00 00       	nop
		_delay_ms(10);
		LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_ENTRY_MODE,EN_port,EN_pin);
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	6f 2d       	mov	r22, r15
     b02:	47 2d       	mov	r20, r7
     b04:	29 2d       	mov	r18, r9
     b06:	0f 2e       	mov	r0, r31
     b08:	f6 e0       	ldi	r31, 0x06	; 6
     b0a:	ef 2e       	mov	r14, r31
     b0c:	f0 2d       	mov	r31, r0
     b0e:	0e 94 ac 04 	call	0x958	; 0x958 <LCD_vsend_cmd>
     b12:	af ec       	ldi	r26, 0xCF	; 207
     b14:	b7 e0       	ldi	r27, 0x07	; 7
     b16:	11 97       	sbiw	r26, 0x01	; 1
     b18:	f1 f7       	brne	.-4      	; 0xb16 <LCD_vInit+0xf2>
     b1a:	00 c0       	rjmp	.+0      	; 0xb1c <LCD_vInit+0xf8>
     b1c:	00 00       	nop
     b1e:	b5 c0       	rjmp	.+362    	; 0xc8a <LCD_vInit+0x266>
		_delay_ms(1);
		
	}else{
		if (1==Nibble){
     b20:	b1 e0       	ldi	r27, 0x01	; 1
     b22:	fb 16       	cp	r15, r27
     b24:	09 f0       	breq	.+2      	; 0xb28 <LCD_vInit+0x104>
     b26:	59 c0       	rjmp	.+178    	; 0xbda <LCD_vInit+0x1b6>
			GPIO_High_Nibble_vset_dir(port,1);
     b28:	87 2d       	mov	r24, r7
     b2a:	61 e0       	ldi	r22, 0x01	; 1
     b2c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <GPIO_High_Nibble_vset_dir>
			GPIO_vwrite_PIN(RW_port,RW_pin,0);
     b30:	8e 2d       	mov	r24, r14
     b32:	6c 2d       	mov	r22, r12
     b34:	40 e0       	ldi	r20, 0x00	; 0
     b36:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_vwrite_PIN>
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_RETURN_HOME,EN_port,EN_pin);
     b3a:	81 2f       	mov	r24, r17
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	47 2d       	mov	r20, r7
     b40:	29 2d       	mov	r18, r9
     b42:	ee 24       	eor	r14, r14
     b44:	68 94       	set
     b46:	e1 f8       	bld	r14, 1
     b48:	ca 2c       	mov	r12, r10
     b4a:	a8 2c       	mov	r10, r8
     b4c:	0e 94 ac 04 	call	0x958	; 0x958 <LCD_vsend_cmd>
     b50:	8f e2       	ldi	r24, 0x2F	; 47
     b52:	95 e7       	ldi	r25, 0x75	; 117
     b54:	01 97       	sbiw	r24, 0x01	; 1
     b56:	f1 f7       	brne	.-4      	; 0xb54 <LCD_vInit+0x130>
     b58:	00 c0       	rjmp	.+0      	; 0xb5a <LCD_vInit+0x136>
     b5a:	00 00       	nop
			_delay_ms(15);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_Function_4BIT_2Lines,EN_port,EN_pin);
     b5c:	81 2f       	mov	r24, r17
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	47 2d       	mov	r20, r7
     b62:	29 2d       	mov	r18, r9
     b64:	0f 2e       	mov	r0, r31
     b66:	f8 e2       	ldi	r31, 0x28	; 40
     b68:	ef 2e       	mov	r14, r31
     b6a:	f0 2d       	mov	r31, r0
     b6c:	0e 94 ac 04 	call	0x958	; 0x958 <LCD_vsend_cmd>
     b70:	af ec       	ldi	r26, 0xCF	; 207
     b72:	b7 e0       	ldi	r27, 0x07	; 7
     b74:	11 97       	sbiw	r26, 0x01	; 1
     b76:	f1 f7       	brne	.-4      	; 0xb74 <LCD_vInit+0x150>
     b78:	00 c0       	rjmp	.+0      	; 0xb7a <LCD_vInit+0x156>
     b7a:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_DISP_ON_CURSOR_ON,EN_port,EN_pin);
     b7c:	81 2f       	mov	r24, r17
     b7e:	61 e0       	ldi	r22, 0x01	; 1
     b80:	47 2d       	mov	r20, r7
     b82:	29 2d       	mov	r18, r9
     b84:	0f 2e       	mov	r0, r31
     b86:	fe e0       	ldi	r31, 0x0E	; 14
     b88:	ef 2e       	mov	r14, r31
     b8a:	f0 2d       	mov	r31, r0
     b8c:	0e 94 ac 04 	call	0x958	; 0x958 <LCD_vsend_cmd>
     b90:	8f ec       	ldi	r24, 0xCF	; 207
     b92:	97 e0       	ldi	r25, 0x07	; 7
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	f1 f7       	brne	.-4      	; 0xb94 <LCD_vInit+0x170>
     b98:	00 c0       	rjmp	.+0      	; 0xb9a <LCD_vInit+0x176>
     b9a:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     b9c:	81 2f       	mov	r24, r17
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	47 2d       	mov	r20, r7
     ba2:	29 2d       	mov	r18, r9
     ba4:	ee 24       	eor	r14, r14
     ba6:	e3 94       	inc	r14
     ba8:	0e 94 ac 04 	call	0x958	; 0x958 <LCD_vsend_cmd>
     bac:	af e1       	ldi	r26, 0x1F	; 31
     bae:	be e4       	ldi	r27, 0x4E	; 78
     bb0:	11 97       	sbiw	r26, 0x01	; 1
     bb2:	f1 f7       	brne	.-4      	; 0xbb0 <LCD_vInit+0x18c>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <LCD_vInit+0x192>
     bb6:	00 00       	nop
			_delay_ms(10);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_ENTRY_MODE,EN_port,EN_pin);
     bb8:	81 2f       	mov	r24, r17
     bba:	61 e0       	ldi	r22, 0x01	; 1
     bbc:	47 2d       	mov	r20, r7
     bbe:	29 2d       	mov	r18, r9
     bc0:	0f 2e       	mov	r0, r31
     bc2:	f6 e0       	ldi	r31, 0x06	; 6
     bc4:	ef 2e       	mov	r14, r31
     bc6:	f0 2d       	mov	r31, r0
     bc8:	0e 94 ac 04 	call	0x958	; 0x958 <LCD_vsend_cmd>
     bcc:	8f ec       	ldi	r24, 0xCF	; 207
     bce:	97 e0       	ldi	r25, 0x07	; 7
     bd0:	01 97       	sbiw	r24, 0x01	; 1
     bd2:	f1 f7       	brne	.-4      	; 0xbd0 <LCD_vInit+0x1ac>
     bd4:	00 c0       	rjmp	.+0      	; 0xbd6 <LCD_vInit+0x1b2>
     bd6:	00 00       	nop
     bd8:	58 c0       	rjmp	.+176    	; 0xc8a <LCD_vInit+0x266>
			_delay_ms(1);
		}else{
			GPIO_Low_Nibble_vset_dir(port,1);
     bda:	87 2d       	mov	r24, r7
     bdc:	61 e0       	ldi	r22, 0x01	; 1
     bde:	0e 94 bf 03 	call	0x77e	; 0x77e <GPIO_Low_Nibble_vset_dir>
			GPIO_vwrite_PIN(RW_port,RW_pin,0);
     be2:	8e 2d       	mov	r24, r14
     be4:	6c 2d       	mov	r22, r12
     be6:	40 e0       	ldi	r20, 0x00	; 0
     be8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_vwrite_PIN>
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_RETURN_HOME,EN_port,EN_pin);
     bec:	81 2f       	mov	r24, r17
     bee:	6f 2d       	mov	r22, r15
     bf0:	47 2d       	mov	r20, r7
     bf2:	29 2d       	mov	r18, r9
     bf4:	ee 24       	eor	r14, r14
     bf6:	68 94       	set
     bf8:	e1 f8       	bld	r14, 1
     bfa:	ca 2c       	mov	r12, r10
     bfc:	a8 2c       	mov	r10, r8
     bfe:	0e 94 ac 04 	call	0x958	; 0x958 <LCD_vsend_cmd>
     c02:	af e2       	ldi	r26, 0x2F	; 47
     c04:	b5 e7       	ldi	r27, 0x75	; 117
     c06:	11 97       	sbiw	r26, 0x01	; 1
     c08:	f1 f7       	brne	.-4      	; 0xc06 <LCD_vInit+0x1e2>
     c0a:	00 c0       	rjmp	.+0      	; 0xc0c <LCD_vInit+0x1e8>
     c0c:	00 00       	nop
			_delay_ms(15);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_Function_4BIT_2Lines,EN_port,EN_pin);
     c0e:	81 2f       	mov	r24, r17
     c10:	6f 2d       	mov	r22, r15
     c12:	47 2d       	mov	r20, r7
     c14:	29 2d       	mov	r18, r9
     c16:	0f 2e       	mov	r0, r31
     c18:	f8 e2       	ldi	r31, 0x28	; 40
     c1a:	ef 2e       	mov	r14, r31
     c1c:	f0 2d       	mov	r31, r0
     c1e:	0e 94 ac 04 	call	0x958	; 0x958 <LCD_vsend_cmd>
     c22:	8f ec       	ldi	r24, 0xCF	; 207
     c24:	97 e0       	ldi	r25, 0x07	; 7
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	f1 f7       	brne	.-4      	; 0xc26 <LCD_vInit+0x202>
     c2a:	00 c0       	rjmp	.+0      	; 0xc2c <LCD_vInit+0x208>
     c2c:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_DISP_ON_CURSOR_ON,EN_port,EN_pin);
     c2e:	81 2f       	mov	r24, r17
     c30:	6f 2d       	mov	r22, r15
     c32:	47 2d       	mov	r20, r7
     c34:	29 2d       	mov	r18, r9
     c36:	0f 2e       	mov	r0, r31
     c38:	fe e0       	ldi	r31, 0x0E	; 14
     c3a:	ef 2e       	mov	r14, r31
     c3c:	f0 2d       	mov	r31, r0
     c3e:	0e 94 ac 04 	call	0x958	; 0x958 <LCD_vsend_cmd>
     c42:	af ec       	ldi	r26, 0xCF	; 207
     c44:	b7 e0       	ldi	r27, 0x07	; 7
     c46:	11 97       	sbiw	r26, 0x01	; 1
     c48:	f1 f7       	brne	.-4      	; 0xc46 <LCD_vInit+0x222>
     c4a:	00 c0       	rjmp	.+0      	; 0xc4c <LCD_vInit+0x228>
     c4c:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     c4e:	81 2f       	mov	r24, r17
     c50:	6f 2d       	mov	r22, r15
     c52:	47 2d       	mov	r20, r7
     c54:	29 2d       	mov	r18, r9
     c56:	ee 24       	eor	r14, r14
     c58:	e3 94       	inc	r14
     c5a:	0e 94 ac 04 	call	0x958	; 0x958 <LCD_vsend_cmd>
     c5e:	8f e1       	ldi	r24, 0x1F	; 31
     c60:	9e e4       	ldi	r25, 0x4E	; 78
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <LCD_vInit+0x23e>
     c66:	00 c0       	rjmp	.+0      	; 0xc68 <LCD_vInit+0x244>
     c68:	00 00       	nop
			_delay_ms(10);
			LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_ENTRY_MODE,EN_port,EN_pin);
     c6a:	81 2f       	mov	r24, r17
     c6c:	6f 2d       	mov	r22, r15
     c6e:	47 2d       	mov	r20, r7
     c70:	29 2d       	mov	r18, r9
     c72:	0f 2e       	mov	r0, r31
     c74:	f6 e0       	ldi	r31, 0x06	; 6
     c76:	ef 2e       	mov	r14, r31
     c78:	f0 2d       	mov	r31, r0
     c7a:	0e 94 ac 04 	call	0x958	; 0x958 <LCD_vsend_cmd>
     c7e:	af ec       	ldi	r26, 0xCF	; 207
     c80:	b7 e0       	ldi	r27, 0x07	; 7
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	f1 f7       	brne	.-4      	; 0xc82 <LCD_vInit+0x25e>
     c86:	00 c0       	rjmp	.+0      	; 0xc88 <LCD_vInit+0x264>
     c88:	00 00       	nop
			_delay_ms(1);
		}
	}
}
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	df 90       	pop	r13
     c98:	cf 90       	pop	r12
     c9a:	bf 90       	pop	r11
     c9c:	af 90       	pop	r10
     c9e:	9f 90       	pop	r9
     ca0:	8f 90       	pop	r8
     ca2:	7f 90       	pop	r7
     ca4:	08 95       	ret

00000ca6 <LCD_clear_screen>:
	GPIO_vwrite_PIN(EN_port,EN_pin,1);
	_delay_ms(2);
	GPIO_vwrite_PIN(EN_port,EN_pin,0);
}

void LCD_clear_screen(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 EN_port,u8 EN_pin){
     ca6:	af 92       	push	r10
     ca8:	cf 92       	push	r12
     caa:	ef 92       	push	r14
     cac:	0f 93       	push	r16
     cae:	9e 2d       	mov	r25, r14
     cb0:	ac 2c       	mov	r10, r12
	LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,LCD_CLEAR_SCREEN,EN_port,EN_pin);
     cb2:	ee 24       	eor	r14, r14
     cb4:	e3 94       	inc	r14
     cb6:	c9 2e       	mov	r12, r25
     cb8:	0e 94 ac 04 	call	0x958	; 0x958 <LCD_vsend_cmd>
     cbc:	8f e1       	ldi	r24, 0x1F	; 31
     cbe:	9e e4       	ldi	r25, 0x4E	; 78
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <LCD_clear_screen+0x1a>
     cc4:	00 c0       	rjmp	.+0      	; 0xcc6 <LCD_clear_screen+0x20>
     cc6:	00 00       	nop
	_delay_ms(10);
}
     cc8:	0f 91       	pop	r16
     cca:	ef 90       	pop	r14
     ccc:	cf 90       	pop	r12
     cce:	af 90       	pop	r10
     cd0:	08 95       	ret

00000cd2 <LCD_Move_Cursor>:

void LCD_Move_Cursor(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 EN_port,u8 EN_pin,u8 line ,u8 position){
     cd2:	8f 92       	push	r8
     cd4:	af 92       	push	r10
     cd6:	cf 92       	push	r12
     cd8:	ef 92       	push	r14
     cda:	0f 93       	push	r16
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	3e 2d       	mov	r19, r14
     ce6:	9c 2d       	mov	r25, r12
	u8 data;
	if(line > 3 || line < 1 || position >16 || position <1){
     ce8:	7a 2d       	mov	r23, r10
     cea:	71 50       	subi	r23, 0x01	; 1
     cec:	73 30       	cpi	r23, 0x03	; 3
     cee:	88 f4       	brcc	.+34     	; 0xd12 <LCD_Move_Cursor+0x40>
     cf0:	70 e1       	ldi	r23, 0x10	; 16
     cf2:	78 15       	cp	r23, r8
     cf4:	80 f0       	brcs	.+32     	; 0xd16 <LCD_Move_Cursor+0x44>
     cf6:	88 20       	and	r8, r8
     cf8:	81 f0       	breq	.+32     	; 0xd1a <LCD_Move_Cursor+0x48>
		data = 0x80;
	}else if (1 == line ){
     cfa:	71 e0       	ldi	r23, 0x01	; 1
     cfc:	a7 16       	cp	r10, r23
     cfe:	19 f4       	brne	.+6      	; 0xd06 <LCD_Move_Cursor+0x34>
		data = 0x80 + (position - 1);         
     d00:	58 2d       	mov	r21, r8
     d02:	51 58       	subi	r21, 0x81	; 129
     d04:	0b c0       	rjmp	.+22     	; 0xd1c <LCD_Move_Cursor+0x4a>
	}else if (2 == line){
     d06:	72 e0       	ldi	r23, 0x02	; 2
     d08:	a7 16       	cp	r10, r23
     d0a:	41 f4       	brne	.+16     	; 0xd1c <LCD_Move_Cursor+0x4a>
		data = 0xC0 + (position - 1);  
     d0c:	58 2d       	mov	r21, r8
     d0e:	51 54       	subi	r21, 0x41	; 65
     d10:	05 c0       	rjmp	.+10     	; 0xd1c <LCD_Move_Cursor+0x4a>
}

void LCD_Move_Cursor(u8 Mode, u8 Nibble ,u8 port, u8 RS_port,u8 RS_pin,u8 EN_port,u8 EN_pin,u8 line ,u8 position){
	u8 data;
	if(line > 3 || line < 1 || position >16 || position <1){
		data = 0x80;
     d12:	50 e8       	ldi	r21, 0x80	; 128
     d14:	03 c0       	rjmp	.+6      	; 0xd1c <LCD_Move_Cursor+0x4a>
     d16:	50 e8       	ldi	r21, 0x80	; 128
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <LCD_Move_Cursor+0x4a>
     d1a:	50 e8       	ldi	r21, 0x80	; 128
	}else if (1 == line ){
		data = 0x80 + (position - 1);         
	}else if (2 == line){
		data = 0xC0 + (position - 1);  
	}
	LCD_vsend_cmd(Mode,Nibble,port,RS_port,RS_pin,data,EN_port,EN_pin);
     d1c:	e5 2e       	mov	r14, r21
     d1e:	c3 2e       	mov	r12, r19
     d20:	a9 2e       	mov	r10, r25
     d22:	0e 94 ac 04 	call	0x958	; 0x958 <LCD_vsend_cmd>
     d26:	8f ec       	ldi	r24, 0xCF	; 207
     d28:	97 e0       	ldi	r25, 0x07	; 7
     d2a:	01 97       	sbiw	r24, 0x01	; 1
     d2c:	f1 f7       	brne	.-4      	; 0xd2a <LCD_Move_Cursor+0x58>
     d2e:	00 c0       	rjmp	.+0      	; 0xd30 <LCD_Move_Cursor+0x5e>
     d30:	00 00       	nop
	_delay_ms(1);
}
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	0f 91       	pop	r16
     d38:	ef 90       	pop	r14
     d3a:	cf 90       	pop	r12
     d3c:	af 90       	pop	r10
     d3e:	8f 90       	pop	r8
     d40:	08 95       	ret

00000d42 <LCD_vsend_char>:

void LCD_vsend_char(u8 Mood , u8 Nibble,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 data){
     d42:	af 92       	push	r10
     d44:	cf 92       	push	r12
     d46:	ef 92       	push	r14
     d48:	0f 93       	push	r16
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	c4 2f       	mov	r28, r20
     d50:	d2 2f       	mov	r29, r18
	if (1==Mood){
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	a1 f4       	brne	.+40     	; 0xd7e <LCD_vsend_char+0x3c>
		GPIO_vwrite_PORT(port,data);
     d56:	84 2f       	mov	r24, r20
     d58:	6a 2d       	mov	r22, r10
     d5a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <GPIO_vwrite_PORT>
		GPIO_vwrite_PIN(RS_port,RS_pin,1);
     d5e:	8d 2f       	mov	r24, r29
     d60:	60 2f       	mov	r22, r16
     d62:	41 e0       	ldi	r20, 0x01	; 1
     d64:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_vwrite_PIN>
		send_falling_edge(EN_port,EN_pin);
     d68:	8e 2d       	mov	r24, r14
     d6a:	6c 2d       	mov	r22, r12
     d6c:	0e 94 97 04 	call	0x92e	; 0x92e <send_falling_edge>
     d70:	8f ec       	ldi	r24, 0xCF	; 207
     d72:	97 e0       	ldi	r25, 0x07	; 7
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	f1 f7       	brne	.-4      	; 0xd74 <LCD_vsend_char+0x32>
     d78:	00 c0       	rjmp	.+0      	; 0xd7a <LCD_vsend_char+0x38>
     d7a:	00 00       	nop
     d7c:	47 c0       	rjmp	.+142    	; 0xe0c <LCD_vsend_char+0xca>
		_delay_ms(1);
	}else{
		if (1==Nibble){
     d7e:	61 30       	cpi	r22, 0x01	; 1
     d80:	19 f5       	brne	.+70     	; 0xdc8 <LCD_vsend_char+0x86>
			GPIO_High_Nibble_vwrite(port,data>>4);
     d82:	6a 2d       	mov	r22, r10
     d84:	62 95       	swap	r22
     d86:	6f 70       	andi	r22, 0x0F	; 15
     d88:	84 2f       	mov	r24, r20
     d8a:	0e 94 8a 03 	call	0x714	; 0x714 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     d8e:	8d 2f       	mov	r24, r29
     d90:	60 2f       	mov	r22, r16
     d92:	41 e0       	ldi	r20, 0x01	; 1
     d94:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     d98:	8e 2d       	mov	r24, r14
     d9a:	6c 2d       	mov	r22, r12
     d9c:	0e 94 97 04 	call	0x92e	; 0x92e <send_falling_edge>
			GPIO_High_Nibble_vwrite(port,data);
     da0:	8c 2f       	mov	r24, r28
     da2:	6a 2d       	mov	r22, r10
     da4:	0e 94 8a 03 	call	0x714	; 0x714 <GPIO_High_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     da8:	8d 2f       	mov	r24, r29
     daa:	60 2f       	mov	r22, r16
     dac:	41 e0       	ldi	r20, 0x01	; 1
     dae:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     db2:	8e 2d       	mov	r24, r14
     db4:	6c 2d       	mov	r22, r12
     db6:	0e 94 97 04 	call	0x92e	; 0x92e <send_falling_edge>
     dba:	8f ec       	ldi	r24, 0xCF	; 207
     dbc:	97 e0       	ldi	r25, 0x07	; 7
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	f1 f7       	brne	.-4      	; 0xdbe <LCD_vsend_char+0x7c>
     dc2:	00 c0       	rjmp	.+0      	; 0xdc4 <LCD_vsend_char+0x82>
     dc4:	00 00       	nop
     dc6:	22 c0       	rjmp	.+68     	; 0xe0c <LCD_vsend_char+0xca>
			_delay_ms(1);
		}else{
			GPIO_Low_Nibble_vwrite(port,data>>4);
     dc8:	6a 2d       	mov	r22, r10
     dca:	62 95       	swap	r22
     dcc:	6f 70       	andi	r22, 0x0F	; 15
     dce:	84 2f       	mov	r24, r20
     dd0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     dd4:	8d 2f       	mov	r24, r29
     dd6:	60 2f       	mov	r22, r16
     dd8:	41 e0       	ldi	r20, 0x01	; 1
     dda:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     dde:	8e 2d       	mov	r24, r14
     de0:	6c 2d       	mov	r22, r12
     de2:	0e 94 97 04 	call	0x92e	; 0x92e <send_falling_edge>
			GPIO_Low_Nibble_vwrite(port,data);
     de6:	8c 2f       	mov	r24, r28
     de8:	6a 2d       	mov	r22, r10
     dea:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <GPIO_Low_Nibble_vwrite>
			GPIO_vwrite_PIN(RS_port,RS_pin,1);
     dee:	8d 2f       	mov	r24, r29
     df0:	60 2f       	mov	r22, r16
     df2:	41 e0       	ldi	r20, 0x01	; 1
     df4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_vwrite_PIN>
			send_falling_edge(EN_port,EN_pin);
     df8:	8e 2d       	mov	r24, r14
     dfa:	6c 2d       	mov	r22, r12
     dfc:	0e 94 97 04 	call	0x92e	; 0x92e <send_falling_edge>
     e00:	8f ec       	ldi	r24, 0xCF	; 207
     e02:	97 e0       	ldi	r25, 0x07	; 7
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	f1 f7       	brne	.-4      	; 0xe04 <LCD_vsend_char+0xc2>
     e08:	00 c0       	rjmp	.+0      	; 0xe0a <LCD_vsend_char+0xc8>
     e0a:	00 00       	nop
			_delay_ms(1);
		}
	}
}
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	0f 91       	pop	r16
     e12:	ef 90       	pop	r14
     e14:	cf 90       	pop	r12
     e16:	af 90       	pop	r10
     e18:	08 95       	ret

00000e1a <LCD_vsend_string>:
 
void LCD_vsend_string(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 *data){
     e1a:	6f 92       	push	r6
     e1c:	7f 92       	push	r7
     e1e:	8f 92       	push	r8
     e20:	9f 92       	push	r9
     e22:	af 92       	push	r10
     e24:	bf 92       	push	r11
     e26:	cf 92       	push	r12
     e28:	df 92       	push	r13
     e2a:	ef 92       	push	r14
     e2c:	ff 92       	push	r15
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	68 2e       	mov	r6, r24
     e38:	76 2e       	mov	r7, r22
     e3a:	84 2e       	mov	r8, r20
     e3c:	92 2e       	mov	r9, r18
     e3e:	d0 2e       	mov	r13, r16
     e40:	fe 2c       	mov	r15, r14
     e42:	1c 2d       	mov	r17, r12
     e44:	e5 01       	movw	r28, r10
	while((*data)!='\0'){
     e46:	a8 80       	ld	r10, Y
     e48:	aa 20       	and	r10, r10
     e4a:	69 f0       	breq	.+26     	; 0xe66 <LCD_vsend_string+0x4c>
			_delay_ms(1);
		}
	}
}
 
void LCD_vsend_string(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 *data){
     e4c:	21 96       	adiw	r28, 0x01	; 1
	while((*data)!='\0'){
		LCD_vsend_char(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,*data);
     e4e:	86 2d       	mov	r24, r6
     e50:	67 2d       	mov	r22, r7
     e52:	48 2d       	mov	r20, r8
     e54:	29 2d       	mov	r18, r9
     e56:	0d 2d       	mov	r16, r13
     e58:	ef 2c       	mov	r14, r15
     e5a:	c1 2e       	mov	r12, r17
     e5c:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_vsend_char>
		}
	}
}
 
void LCD_vsend_string(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u8 *data){
	while((*data)!='\0'){
     e60:	a9 90       	ld	r10, Y+
     e62:	aa 20       	and	r10, r10
     e64:	a1 f7       	brne	.-24     	; 0xe4e <LCD_vsend_string+0x34>
		LCD_vsend_char(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,*data);
		data++;
	}
}
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	ff 90       	pop	r15
     e70:	ef 90       	pop	r14
     e72:	df 90       	pop	r13
     e74:	cf 90       	pop	r12
     e76:	bf 90       	pop	r11
     e78:	af 90       	pop	r10
     e7a:	9f 90       	pop	r9
     e7c:	8f 90       	pop	r8
     e7e:	7f 90       	pop	r7
     e80:	6f 90       	pop	r6
     e82:	08 95       	ret

00000e84 <LCD_display_number>:

void LCD_display_number(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,u32 Number){
     e84:	7f 92       	push	r7
     e86:	8f 92       	push	r8
     e88:	9f 92       	push	r9
     e8a:	af 92       	push	r10
     e8c:	bf 92       	push	r11
     e8e:	cf 92       	push	r12
     e90:	df 92       	push	r13
     e92:	ef 92       	push	r14
     e94:	ff 92       	push	r15
     e96:	0f 93       	push	r16
     e98:	1f 93       	push	r17
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	27 97       	sbiw	r28, 0x07	; 7
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	18 2f       	mov	r17, r24
     eb0:	f6 2e       	mov	r15, r22
     eb2:	d4 2e       	mov	r13, r20
     eb4:	72 2e       	mov	r7, r18
     eb6:	d5 01       	movw	r26, r10
     eb8:	c4 01       	movw	r24, r8
	u8 str[7]; 
	sprintf(str,"%d",Number);
     eba:	2d b7       	in	r18, 0x3d	; 61
     ebc:	3e b7       	in	r19, 0x3e	; 62
     ebe:	28 50       	subi	r18, 0x08	; 8
     ec0:	30 40       	sbci	r19, 0x00	; 0
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	3e bf       	out	0x3e, r19	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	2d bf       	out	0x3d, r18	; 61
     ecc:	4d b7       	in	r20, 0x3d	; 61
     ece:	5e b7       	in	r21, 0x3e	; 62
     ed0:	4f 5f       	subi	r20, 0xFF	; 255
     ed2:	5f 4f       	sbci	r21, 0xFF	; 255
     ed4:	5e 01       	movw	r10, r28
     ed6:	08 94       	sec
     ed8:	a1 1c       	adc	r10, r1
     eda:	b1 1c       	adc	r11, r1
     edc:	ed b7       	in	r30, 0x3d	; 61
     ede:	fe b7       	in	r31, 0x3e	; 62
     ee0:	b2 82       	std	Z+2, r11	; 0x02
     ee2:	a1 82       	std	Z+1, r10	; 0x01
     ee4:	20 e7       	ldi	r18, 0x70	; 112
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	fa 01       	movw	r30, r20
     eea:	33 83       	std	Z+3, r19	; 0x03
     eec:	22 83       	std	Z+2, r18	; 0x02
     eee:	84 83       	std	Z+4, r24	; 0x04
     ef0:	95 83       	std	Z+5, r25	; 0x05
     ef2:	a6 83       	std	Z+6, r26	; 0x06
     ef4:	b7 83       	std	Z+7, r27	; 0x07
     ef6:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <sprintf>
	LCD_vsend_string(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,str);
     efa:	2d b7       	in	r18, 0x3d	; 61
     efc:	3e b7       	in	r19, 0x3e	; 62
     efe:	28 5f       	subi	r18, 0xF8	; 248
     f00:	3f 4f       	sbci	r19, 0xFF	; 255
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	3e bf       	out	0x3e, r19	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	2d bf       	out	0x3d, r18	; 61
     f0c:	81 2f       	mov	r24, r17
     f0e:	6f 2d       	mov	r22, r15
     f10:	4d 2d       	mov	r20, r13
     f12:	27 2d       	mov	r18, r7
     f14:	0e 94 0d 07 	call	0xe1a	; 0xe1a <LCD_vsend_string>
}
     f18:	27 96       	adiw	r28, 0x07	; 7
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	ff 90       	pop	r15
     f2e:	ef 90       	pop	r14
     f30:	df 90       	pop	r13
     f32:	cf 90       	pop	r12
     f34:	bf 90       	pop	r11
     f36:	af 90       	pop	r10
     f38:	9f 90       	pop	r9
     f3a:	8f 90       	pop	r8
     f3c:	7f 90       	pop	r7
     f3e:	08 95       	ret

00000f40 <LCD_display_real_number>:

void LCD_display_real_number(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,s64 Number){
     f40:	2f 92       	push	r2
     f42:	3f 92       	push	r3
     f44:	4f 92       	push	r4
     f46:	5f 92       	push	r5
     f48:	6f 92       	push	r6
     f4a:	7f 92       	push	r7
     f4c:	9f 92       	push	r9
     f4e:	af 92       	push	r10
     f50:	bf 92       	push	r11
     f52:	cf 92       	push	r12
     f54:	df 92       	push	r13
     f56:	ef 92       	push	r14
     f58:	ff 92       	push	r15
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	62 97       	sbiw	r28, 0x12	; 18
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	18 2f       	mov	r17, r24
     f74:	f6 2e       	mov	r15, r22
     f76:	d4 2e       	mov	r13, r20
     f78:	92 2e       	mov	r9, r18
     f7a:	2e a1       	lds	r18, 0x4e
     f7c:	3f a1       	lds	r19, 0x4f
     f7e:	48 a5       	lds	r20, 0x68
     f80:	59 a5       	lds	r21, 0x69
     f82:	6a a5       	lds	r22, 0x6a
     f84:	7b a5       	lds	r23, 0x6b
     f86:	8c a5       	lds	r24, 0x6c
     f88:	9d a5       	lds	r25, 0x6d
	u8 str [16];
	u8 *tmpsign = (Number < 0) ? "-": "";
     f8a:	99 23       	and	r25, r25
     f8c:	2c f0       	brlt	.+10     	; 0xf98 <LCD_display_real_number+0x58>
     f8e:	e5 e7       	ldi	r30, 0x75	; 117
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	fa 8b       	std	Y+18, r31	; 0x12
     f94:	e9 8b       	std	Y+17, r30	; 0x11
     f96:	04 c0       	rjmp	.+8      	; 0xfa0 <LCD_display_real_number+0x60>
     f98:	e3 e7       	ldi	r30, 0x73	; 115
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	fa 8b       	std	Y+18, r31	; 0x12
     f9e:	e9 8b       	std	Y+17, r30	; 0x11
	f32 tmpval = (Number < 0) ? -Number : Number;
     fa0:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__floatdisf>
     fa4:	2b 01       	movw	r4, r22
     fa6:	3c 01       	movw	r6, r24
     fa8:	e8 94       	clt
     faa:	77 f8       	bld	r7, 7
	s32 tmpInt1 = tmpval;
     fac:	c3 01       	movw	r24, r6
     fae:	b2 01       	movw	r22, r4
     fb0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__fixsfsi>
	f32 tmpFrac = tmpval - tmpInt1;
	s32 tmpInt2 = tmpFrac * 10000;
	sprintf(str, "%s%d.%04d", tmpsign,tmpInt1,tmpInt2);
     fb4:	2d b7       	in	r18, 0x3d	; 61
     fb6:	3e b7       	in	r19, 0x3e	; 62
     fb8:	2e 50       	subi	r18, 0x0E	; 14
     fba:	30 40       	sbci	r19, 0x00	; 0
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	3e bf       	out	0x3e, r19	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	2d bf       	out	0x3d, r18	; 61
     fc6:	ad b6       	in	r10, 0x3d	; 61
     fc8:	be b6       	in	r11, 0x3e	; 62
     fca:	08 94       	sec
     fcc:	a1 1c       	adc	r10, r1
     fce:	b1 1c       	adc	r11, r1
     fd0:	1e 01       	movw	r2, r28
     fd2:	08 94       	sec
     fd4:	21 1c       	adc	r2, r1
     fd6:	31 1c       	adc	r3, r1
     fd8:	ed b7       	in	r30, 0x3d	; 61
     fda:	fe b7       	in	r31, 0x3e	; 62
     fdc:	32 82       	std	Z+2, r3	; 0x02
     fde:	21 82       	std	Z+1, r2	; 0x01
     fe0:	26 e7       	ldi	r18, 0x76	; 118
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	f5 01       	movw	r30, r10
     fe6:	33 83       	std	Z+3, r19	; 0x03
     fe8:	22 83       	std	Z+2, r18	; 0x02
     fea:	29 89       	ldd	r18, Y+17	; 0x11
     fec:	3a 89       	ldd	r19, Y+18	; 0x12
     fee:	35 83       	std	Z+5, r19	; 0x05
     ff0:	24 83       	std	Z+4, r18	; 0x04
     ff2:	66 83       	std	Z+6, r22	; 0x06
     ff4:	77 83       	std	Z+7, r23	; 0x07
     ff6:	80 87       	std	Z+8, r24	; 0x08
     ff8:	91 87       	std	Z+9, r25	; 0x09
void LCD_display_real_number(u8 Mood , u8 Nibble ,u8 port ,u8 RS_port ,u8 RS_pin ,u8 EN_port,u8 EN_pin,s64 Number){
	u8 str [16];
	u8 *tmpsign = (Number < 0) ? "-": "";
	f32 tmpval = (Number < 0) ? -Number : Number;
	s32 tmpInt1 = tmpval;
	f32 tmpFrac = tmpval - tmpInt1;
     ffa:	0e 94 83 0c 	call	0x1906	; 0x1906 <__floatsisf>
     ffe:	9b 01       	movw	r18, r22
    1000:	ac 01       	movw	r20, r24
    1002:	c3 01       	movw	r24, r6
    1004:	b2 01       	movw	r22, r4
    1006:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <__subsf3>
	s32 tmpInt2 = tmpFrac * 10000;
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e4       	ldi	r19, 0x40	; 64
    100e:	4c e1       	ldi	r20, 0x1C	; 28
    1010:	56 e4       	ldi	r21, 0x46	; 70
    1012:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__mulsf3>
    1016:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__fixsfsi>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
	sprintf(str, "%s%d.%04d", tmpsign,tmpInt1,tmpInt2);
    101e:	f5 01       	movw	r30, r10
    1020:	82 87       	std	Z+10, r24	; 0x0a
    1022:	93 87       	std	Z+11, r25	; 0x0b
    1024:	a4 87       	std	Z+12, r26	; 0x0c
    1026:	b5 87       	std	Z+13, r27	; 0x0d
    1028:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <sprintf>
	LCD_vsend_string(Mood,Nibble,port,RS_port,RS_pin,EN_port,EN_pin,str);
    102c:	2d b7       	in	r18, 0x3d	; 61
    102e:	3e b7       	in	r19, 0x3e	; 62
    1030:	22 5f       	subi	r18, 0xF2	; 242
    1032:	3f 4f       	sbci	r19, 0xFF	; 255
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	3e bf       	out	0x3e, r19	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	2d bf       	out	0x3d, r18	; 61
    103e:	81 2f       	mov	r24, r17
    1040:	6f 2d       	mov	r22, r15
    1042:	4d 2d       	mov	r20, r13
    1044:	29 2d       	mov	r18, r9
    1046:	51 01       	movw	r10, r2
    1048:	0e 94 0d 07 	call	0xe1a	; 0xe1a <LCD_vsend_string>
    104c:	62 96       	adiw	r28, 0x12	; 18
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	ff 90       	pop	r15
    1062:	ef 90       	pop	r14
    1064:	df 90       	pop	r13
    1066:	cf 90       	pop	r12
    1068:	bf 90       	pop	r11
    106a:	af 90       	pop	r10
    106c:	9f 90       	pop	r9
    106e:	7f 90       	pop	r7
    1070:	6f 90       	pop	r6
    1072:	5f 90       	pop	r5
    1074:	4f 90       	pop	r4
    1076:	3f 90       	pop	r3
    1078:	2f 90       	pop	r2
    107a:	08 95       	ret

0000107c <LED_vintialize>:
 * It is in ECU abstraction layer 
 */

#include "GPIO_MCAL.h"
void LED_vintialize(u8 port , u8 pin){
	GPIO_vsetPIN_DIR(port, pin, 1);
    107c:	41 e0       	ldi	r20, 0x01	; 1
    107e:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_vsetPIN_DIR>
}
    1082:	08 95       	ret

00001084 <LED_vTurnon>:
void LED_vTurnon(u8 port, u8 pin){
	GPIO_vwrite_PIN(port,pin,1);
    1084:	41 e0       	ldi	r20, 0x01	; 1
    1086:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_vwrite_PIN>
}
    108a:	08 95       	ret

0000108c <LED_vTurnoff>:
void LED_vTurnoff(u8 port, u8 pin){
	GPIO_vwrite_PIN(port,pin,0);
    108c:	40 e0       	ldi	r20, 0x00	; 0
    108e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <GPIO_vwrite_PIN>
}
    1092:	08 95       	ret

00001094 <LED_vtoggle>:
void LED_vtoggle(u8 port, u8 pin){
	GPIO_vtoggle_PIN(port,pin);
    1094:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <GPIO_vtoggle_PIN>
    1098:	08 95       	ret

0000109a <main>:

int main(void){
	u8 val=NOTPRESSED;
	u8 flag =0;
	u8 Tries = MAX_TRIES;
	keypad_vInit('D');
    109a:	84 e4       	ldi	r24, 0x44	; 68
    109c:	0e 94 20 04 	call	0x840	; 0x840 <keypad_vInit>
	LCD_vInit(Four_bit,High_Nibble,'A','B',2,'B',3,'B',4);
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	61 e0       	ldi	r22, 0x01	; 1
    10a4:	41 e4       	ldi	r20, 0x41	; 65
    10a6:	22 e4       	ldi	r18, 0x42	; 66
    10a8:	02 e0       	ldi	r16, 0x02	; 2
    10aa:	0f 2e       	mov	r0, r31
    10ac:	f2 e4       	ldi	r31, 0x42	; 66
    10ae:	ef 2e       	mov	r14, r31
    10b0:	f0 2d       	mov	r31, r0
    10b2:	0f 2e       	mov	r0, r31
    10b4:	f3 e0       	ldi	r31, 0x03	; 3
    10b6:	cf 2e       	mov	r12, r31
    10b8:	f0 2d       	mov	r31, r0
    10ba:	0f 2e       	mov	r0, r31
    10bc:	f2 e4       	ldi	r31, 0x42	; 66
    10be:	af 2e       	mov	r10, r31
    10c0:	f0 2d       	mov	r31, r0
    10c2:	88 24       	eor	r8, r8
    10c4:	68 94       	set
    10c6:	82 f8       	bld	r8, 2
    10c8:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_vInit>
	if (EEPROM_Read(EEPROM_STATUS_LOCATION)==NOTPRESSED){
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_Read>
    10d4:	8f 3f       	cpi	r24, 0xFF	; 255
    10d6:	09 f0       	breq	.+2      	; 0x10da <main+0x40>
    10d8:	1c c1       	rjmp	.+568    	; 0x1312 <main+0x278>
		LCD_vsend_string(Four_bit,High_Nibble,'A','B',2,'B',4,"Set Pass:");
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	61 e0       	ldi	r22, 0x01	; 1
    10de:	41 e4       	ldi	r20, 0x41	; 65
    10e0:	22 e4       	ldi	r18, 0x42	; 66
    10e2:	cc 24       	eor	r12, r12
    10e4:	68 94       	set
    10e6:	c2 f8       	bld	r12, 2
    10e8:	0f 2e       	mov	r0, r31
    10ea:	f0 e8       	ldi	r31, 0x80	; 128
    10ec:	af 2e       	mov	r10, r31
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	bf 2e       	mov	r11, r31
    10f2:	f0 2d       	mov	r31, r0
    10f4:	0e 94 0d 07 	call	0xe1a	; 0xe1a <LCD_vsend_string>
		do {
			val = keypad_u8check_press('D');
    10f8:	84 e4       	ldi	r24, 0x44	; 68
    10fa:	0e 94 3b 04 	call	0x876	; 0x876 <keypad_u8check_press>
		} while (val ==NOTPRESSED);
    10fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1100:	d9 f3       	breq	.-10     	; 0x10f8 <main+0x5e>
    1102:	c8 2f       	mov	r28, r24
		LCD_vsend_char(Four_bit,High_Nibble,'A','B',2,'B',4,val);
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	61 e0       	ldi	r22, 0x01	; 1
    1108:	41 e4       	ldi	r20, 0x41	; 65
    110a:	22 e4       	ldi	r18, 0x42	; 66
    110c:	02 e0       	ldi	r16, 0x02	; 2
    110e:	0f 2e       	mov	r0, r31
    1110:	f2 e4       	ldi	r31, 0x42	; 66
    1112:	ef 2e       	mov	r14, r31
    1114:	f0 2d       	mov	r31, r0
    1116:	cc 24       	eor	r12, r12
    1118:	68 94       	set
    111a:	c2 f8       	bld	r12, 2
    111c:	ac 2e       	mov	r10, r28
    111e:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_vsend_char>
    1122:	8f ef       	ldi	r24, 0xFF	; 255
    1124:	94 e3       	ldi	r25, 0x34	; 52
    1126:	ac e0       	ldi	r26, 0x0C	; 12
    1128:	81 50       	subi	r24, 0x01	; 1
    112a:	90 40       	sbci	r25, 0x00	; 0
    112c:	a0 40       	sbci	r26, 0x00	; 0
    112e:	e1 f7       	brne	.-8      	; 0x1128 <main+0x8e>
    1130:	00 c0       	rjmp	.+0      	; 0x1132 <main+0x98>
    1132:	00 00       	nop
		_delay_ms(500);
		LCD_Move_Cursor(Four_bit,High_Nibble,'A','B',2,'B',4,1,10);
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	61 e0       	ldi	r22, 0x01	; 1
    1138:	41 e4       	ldi	r20, 0x41	; 65
    113a:	22 e4       	ldi	r18, 0x42	; 66
    113c:	aa 24       	eor	r10, r10
    113e:	a3 94       	inc	r10
    1140:	0f 2e       	mov	r0, r31
    1142:	fa e0       	ldi	r31, 0x0A	; 10
    1144:	8f 2e       	mov	r8, r31
    1146:	f0 2d       	mov	r31, r0
    1148:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LCD_Move_Cursor>
		LCD_vsend_char(Four_bit,High_Nibble,'A','B',2,'B',4,0x2A);
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	61 e0       	ldi	r22, 0x01	; 1
    1150:	41 e4       	ldi	r20, 0x41	; 65
    1152:	22 e4       	ldi	r18, 0x42	; 66
    1154:	0f 2e       	mov	r0, r31
    1156:	fa e2       	ldi	r31, 0x2A	; 42
    1158:	af 2e       	mov	r10, r31
    115a:	f0 2d       	mov	r31, r0
    115c:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_vsend_char>
    1160:	8f ef       	ldi	r24, 0xFF	; 255
    1162:	94 e3       	ldi	r25, 0x34	; 52
    1164:	ac e0       	ldi	r26, 0x0C	; 12
    1166:	81 50       	subi	r24, 0x01	; 1
    1168:	90 40       	sbci	r25, 0x00	; 0
    116a:	a0 40       	sbci	r26, 0x00	; 0
    116c:	e1 f7       	brne	.-8      	; 0x1166 <main+0xcc>
    116e:	00 c0       	rjmp	.+0      	; 0x1170 <main+0xd6>
    1170:	00 00       	nop
		_delay_ms(500);
		EEPROM_Write(EEPROM_PASSWORD_LOCATION1,val);
    1172:	84 e0       	ldi	r24, 0x04	; 4
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	6c 2f       	mov	r22, r28
    1178:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_Write>
		val=NOTPRESSED;
		do {
			val = keypad_u8check_press('D');
    117c:	84 e4       	ldi	r24, 0x44	; 68
    117e:	0e 94 3b 04 	call	0x876	; 0x876 <keypad_u8check_press>
		} while (val ==NOTPRESSED);
    1182:	8f 3f       	cpi	r24, 0xFF	; 255
    1184:	d9 f3       	breq	.-10     	; 0x117c <main+0xe2>
    1186:	c8 2f       	mov	r28, r24
		LCD_vsend_char(Four_bit,High_Nibble,'A','B',2,'B',4,val);
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	61 e0       	ldi	r22, 0x01	; 1
    118c:	41 e4       	ldi	r20, 0x41	; 65
    118e:	22 e4       	ldi	r18, 0x42	; 66
    1190:	02 e0       	ldi	r16, 0x02	; 2
    1192:	0f 2e       	mov	r0, r31
    1194:	f2 e4       	ldi	r31, 0x42	; 66
    1196:	ef 2e       	mov	r14, r31
    1198:	f0 2d       	mov	r31, r0
    119a:	cc 24       	eor	r12, r12
    119c:	68 94       	set
    119e:	c2 f8       	bld	r12, 2
    11a0:	ac 2e       	mov	r10, r28
    11a2:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_vsend_char>
    11a6:	8f ef       	ldi	r24, 0xFF	; 255
    11a8:	94 e3       	ldi	r25, 0x34	; 52
    11aa:	ac e0       	ldi	r26, 0x0C	; 12
    11ac:	81 50       	subi	r24, 0x01	; 1
    11ae:	90 40       	sbci	r25, 0x00	; 0
    11b0:	a0 40       	sbci	r26, 0x00	; 0
    11b2:	e1 f7       	brne	.-8      	; 0x11ac <main+0x112>
    11b4:	00 c0       	rjmp	.+0      	; 0x11b6 <main+0x11c>
    11b6:	00 00       	nop
		_delay_ms(500);
		LCD_Move_Cursor(Four_bit,High_Nibble,'A','B',2,'B',4,1,11);
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	61 e0       	ldi	r22, 0x01	; 1
    11bc:	41 e4       	ldi	r20, 0x41	; 65
    11be:	22 e4       	ldi	r18, 0x42	; 66
    11c0:	aa 24       	eor	r10, r10
    11c2:	a3 94       	inc	r10
    11c4:	0f 2e       	mov	r0, r31
    11c6:	fb e0       	ldi	r31, 0x0B	; 11
    11c8:	8f 2e       	mov	r8, r31
    11ca:	f0 2d       	mov	r31, r0
    11cc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LCD_Move_Cursor>
		LCD_vsend_char(Four_bit,High_Nibble,'A','B',2,'B',4,0x2A);
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	61 e0       	ldi	r22, 0x01	; 1
    11d4:	41 e4       	ldi	r20, 0x41	; 65
    11d6:	22 e4       	ldi	r18, 0x42	; 66
    11d8:	0f 2e       	mov	r0, r31
    11da:	fa e2       	ldi	r31, 0x2A	; 42
    11dc:	af 2e       	mov	r10, r31
    11de:	f0 2d       	mov	r31, r0
    11e0:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_vsend_char>
    11e4:	8f ef       	ldi	r24, 0xFF	; 255
    11e6:	94 e3       	ldi	r25, 0x34	; 52
    11e8:	ac e0       	ldi	r26, 0x0C	; 12
    11ea:	81 50       	subi	r24, 0x01	; 1
    11ec:	90 40       	sbci	r25, 0x00	; 0
    11ee:	a0 40       	sbci	r26, 0x00	; 0
    11f0:	e1 f7       	brne	.-8      	; 0x11ea <main+0x150>
    11f2:	00 c0       	rjmp	.+0      	; 0x11f4 <main+0x15a>
    11f4:	00 00       	nop
		_delay_ms(500);
		EEPROM_Write(EEPROM_PASSWORD_LOCATION2,val);
    11f6:	85 e0       	ldi	r24, 0x05	; 5
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	6c 2f       	mov	r22, r28
    11fc:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_Write>
		val=NOTPRESSED;
		do {
			val = keypad_u8check_press('D');
    1200:	84 e4       	ldi	r24, 0x44	; 68
    1202:	0e 94 3b 04 	call	0x876	; 0x876 <keypad_u8check_press>
		} while (val ==NOTPRESSED);
    1206:	8f 3f       	cpi	r24, 0xFF	; 255
    1208:	d9 f3       	breq	.-10     	; 0x1200 <main+0x166>
    120a:	c8 2f       	mov	r28, r24
		LCD_vsend_char(Four_bit,High_Nibble,'A','B',2,'B',4,val);
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	61 e0       	ldi	r22, 0x01	; 1
    1210:	41 e4       	ldi	r20, 0x41	; 65
    1212:	22 e4       	ldi	r18, 0x42	; 66
    1214:	02 e0       	ldi	r16, 0x02	; 2
    1216:	0f 2e       	mov	r0, r31
    1218:	f2 e4       	ldi	r31, 0x42	; 66
    121a:	ef 2e       	mov	r14, r31
    121c:	f0 2d       	mov	r31, r0
    121e:	cc 24       	eor	r12, r12
    1220:	68 94       	set
    1222:	c2 f8       	bld	r12, 2
    1224:	ac 2e       	mov	r10, r28
    1226:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_vsend_char>
    122a:	8f ef       	ldi	r24, 0xFF	; 255
    122c:	94 e3       	ldi	r25, 0x34	; 52
    122e:	ac e0       	ldi	r26, 0x0C	; 12
    1230:	81 50       	subi	r24, 0x01	; 1
    1232:	90 40       	sbci	r25, 0x00	; 0
    1234:	a0 40       	sbci	r26, 0x00	; 0
    1236:	e1 f7       	brne	.-8      	; 0x1230 <main+0x196>
    1238:	00 c0       	rjmp	.+0      	; 0x123a <main+0x1a0>
    123a:	00 00       	nop
		_delay_ms(500);
		LCD_Move_Cursor(Four_bit,High_Nibble,'A','B',2,'B',4,1,12);
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	61 e0       	ldi	r22, 0x01	; 1
    1240:	41 e4       	ldi	r20, 0x41	; 65
    1242:	22 e4       	ldi	r18, 0x42	; 66
    1244:	aa 24       	eor	r10, r10
    1246:	a3 94       	inc	r10
    1248:	0f 2e       	mov	r0, r31
    124a:	fc e0       	ldi	r31, 0x0C	; 12
    124c:	8f 2e       	mov	r8, r31
    124e:	f0 2d       	mov	r31, r0
    1250:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LCD_Move_Cursor>
		LCD_vsend_char(Four_bit,High_Nibble,'A','B',2,'B',4,0x2A);
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	61 e0       	ldi	r22, 0x01	; 1
    1258:	41 e4       	ldi	r20, 0x41	; 65
    125a:	22 e4       	ldi	r18, 0x42	; 66
    125c:	0f 2e       	mov	r0, r31
    125e:	fa e2       	ldi	r31, 0x2A	; 42
    1260:	af 2e       	mov	r10, r31
    1262:	f0 2d       	mov	r31, r0
    1264:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_vsend_char>
    1268:	8f ef       	ldi	r24, 0xFF	; 255
    126a:	94 e3       	ldi	r25, 0x34	; 52
    126c:	ac e0       	ldi	r26, 0x0C	; 12
    126e:	81 50       	subi	r24, 0x01	; 1
    1270:	90 40       	sbci	r25, 0x00	; 0
    1272:	a0 40       	sbci	r26, 0x00	; 0
    1274:	e1 f7       	brne	.-8      	; 0x126e <main+0x1d4>
    1276:	00 c0       	rjmp	.+0      	; 0x1278 <main+0x1de>
    1278:	00 00       	nop
		_delay_ms(500);
		EEPROM_Write(EEPROM_PASSWORD_LOCATION3,val);
    127a:	86 e0       	ldi	r24, 0x06	; 6
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	6c 2f       	mov	r22, r28
    1280:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_Write>
		val=NOTPRESSED;
		do {
			val = keypad_u8check_press('D');
    1284:	84 e4       	ldi	r24, 0x44	; 68
    1286:	0e 94 3b 04 	call	0x876	; 0x876 <keypad_u8check_press>
		} while (val ==NOTPRESSED);
    128a:	8f 3f       	cpi	r24, 0xFF	; 255
    128c:	d9 f3       	breq	.-10     	; 0x1284 <main+0x1ea>
    128e:	c8 2f       	mov	r28, r24
		LCD_vsend_char(Four_bit,High_Nibble,'A','B',2,'B',4,val);
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	61 e0       	ldi	r22, 0x01	; 1
    1294:	41 e4       	ldi	r20, 0x41	; 65
    1296:	22 e4       	ldi	r18, 0x42	; 66
    1298:	02 e0       	ldi	r16, 0x02	; 2
    129a:	0f 2e       	mov	r0, r31
    129c:	f2 e4       	ldi	r31, 0x42	; 66
    129e:	ef 2e       	mov	r14, r31
    12a0:	f0 2d       	mov	r31, r0
    12a2:	cc 24       	eor	r12, r12
    12a4:	68 94       	set
    12a6:	c2 f8       	bld	r12, 2
    12a8:	ac 2e       	mov	r10, r28
    12aa:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_vsend_char>
    12ae:	8f ef       	ldi	r24, 0xFF	; 255
    12b0:	94 e3       	ldi	r25, 0x34	; 52
    12b2:	ac e0       	ldi	r26, 0x0C	; 12
    12b4:	81 50       	subi	r24, 0x01	; 1
    12b6:	90 40       	sbci	r25, 0x00	; 0
    12b8:	a0 40       	sbci	r26, 0x00	; 0
    12ba:	e1 f7       	brne	.-8      	; 0x12b4 <main+0x21a>
    12bc:	00 c0       	rjmp	.+0      	; 0x12be <main+0x224>
    12be:	00 00       	nop
		_delay_ms(500);
		LCD_Move_Cursor(Four_bit,High_Nibble,'A','B',2,'B',4,1,13);
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	61 e0       	ldi	r22, 0x01	; 1
    12c4:	41 e4       	ldi	r20, 0x41	; 65
    12c6:	22 e4       	ldi	r18, 0x42	; 66
    12c8:	aa 24       	eor	r10, r10
    12ca:	a3 94       	inc	r10
    12cc:	0f 2e       	mov	r0, r31
    12ce:	fd e0       	ldi	r31, 0x0D	; 13
    12d0:	8f 2e       	mov	r8, r31
    12d2:	f0 2d       	mov	r31, r0
    12d4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LCD_Move_Cursor>
		LCD_vsend_char(Four_bit,High_Nibble,'A','B',2,'B',4,0x2A);
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	61 e0       	ldi	r22, 0x01	; 1
    12dc:	41 e4       	ldi	r20, 0x41	; 65
    12de:	22 e4       	ldi	r18, 0x42	; 66
    12e0:	0f 2e       	mov	r0, r31
    12e2:	fa e2       	ldi	r31, 0x2A	; 42
    12e4:	af 2e       	mov	r10, r31
    12e6:	f0 2d       	mov	r31, r0
    12e8:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_vsend_char>
    12ec:	8f ef       	ldi	r24, 0xFF	; 255
    12ee:	94 e3       	ldi	r25, 0x34	; 52
    12f0:	ac e0       	ldi	r26, 0x0C	; 12
    12f2:	81 50       	subi	r24, 0x01	; 1
    12f4:	90 40       	sbci	r25, 0x00	; 0
    12f6:	a0 40       	sbci	r26, 0x00	; 0
    12f8:	e1 f7       	brne	.-8      	; 0x12f2 <main+0x258>
    12fa:	00 c0       	rjmp	.+0      	; 0x12fc <main+0x262>
    12fc:	00 00       	nop
		_delay_ms(500);
		EEPROM_Write(EEPROM_PASSWORD_LOCATION4,val);
    12fe:	87 e0       	ldi	r24, 0x07	; 7
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	6c 2f       	mov	r22, r28
    1304:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_Write>
		val=NOTPRESSED;
		EEPROM_Write(EEPROM_STATUS_LOCATION,0x00);
    1308:	83 e0       	ldi	r24, 0x03	; 3
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_Write>
#define  EEPROM_PASSWORD_LOCATION4 0x07
#define MAX_TRIES 3

u8 arr[4];

int main(void){
    1312:	44 24       	eor	r4, r4
    1314:	55 24       	eor	r5, r5
    1316:	32 01       	movw	r6, r4
    1318:	68 94       	set
    131a:	41 f8       	bld	r4, 1
		val=NOTPRESSED;
		EEPROM_Write(EEPROM_STATUS_LOCATION,0x00);
		
	}
	while(0==flag){
		arr[0]=arr[1]=arr[2]=arr[3]=NOTPRESSED;
    131c:	cd e1       	ldi	r28, 0x1D	; 29
    131e:	d1 e0       	ldi	r29, 0x01	; 1
		LCD_clear_screen(Four_bit,High_Nibble,'A','B',2,'B',4);
		LCD_vsend_string(Four_bit,High_Nibble,'A','B',2,'B',4,"Enter pass:");
		
		do{
			arr[0]=keypad_u8check_press('D');
    1320:	0f 2e       	mov	r0, r31
    1322:	fa e1       	ldi	r31, 0x1A	; 26
    1324:	2f 2e       	mov	r2, r31
    1326:	f1 e0       	ldi	r31, 0x01	; 1
    1328:	3f 2e       	mov	r3, r31
    132a:	f0 2d       	mov	r31, r0
		val=NOTPRESSED;
		EEPROM_Write(EEPROM_STATUS_LOCATION,0x00);
		
	}
	while(0==flag){
		arr[0]=arr[1]=arr[2]=arr[3]=NOTPRESSED;
    132c:	8f ef       	ldi	r24, 0xFF	; 255
    132e:	88 83       	st	Y, r24
    1330:	ac e1       	ldi	r26, 0x1C	; 28
    1332:	b1 e0       	ldi	r27, 0x01	; 1
    1334:	8c 93       	st	X, r24
    1336:	eb e1       	ldi	r30, 0x1B	; 27
    1338:	f1 e0       	ldi	r31, 0x01	; 1
    133a:	80 83       	st	Z, r24
    133c:	12 97       	sbiw	r26, 0x02	; 2
    133e:	8c 93       	st	X, r24
		LCD_clear_screen(Four_bit,High_Nibble,'A','B',2,'B',4);
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	61 e0       	ldi	r22, 0x01	; 1
    1344:	41 e4       	ldi	r20, 0x41	; 65
    1346:	22 e4       	ldi	r18, 0x42	; 66
    1348:	02 e0       	ldi	r16, 0x02	; 2
    134a:	0f 2e       	mov	r0, r31
    134c:	f2 e4       	ldi	r31, 0x42	; 66
    134e:	ef 2e       	mov	r14, r31
    1350:	f0 2d       	mov	r31, r0
    1352:	cc 24       	eor	r12, r12
    1354:	68 94       	set
    1356:	c2 f8       	bld	r12, 2
    1358:	0e 94 53 06 	call	0xca6	; 0xca6 <LCD_clear_screen>
		LCD_vsend_string(Four_bit,High_Nibble,'A','B',2,'B',4,"Enter pass:");
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	61 e0       	ldi	r22, 0x01	; 1
    1360:	41 e4       	ldi	r20, 0x41	; 65
    1362:	22 e4       	ldi	r18, 0x42	; 66
    1364:	0f 2e       	mov	r0, r31
    1366:	fa e8       	ldi	r31, 0x8A	; 138
    1368:	af 2e       	mov	r10, r31
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	bf 2e       	mov	r11, r31
    136e:	f0 2d       	mov	r31, r0
    1370:	0e 94 0d 07 	call	0xe1a	; 0xe1a <LCD_vsend_string>
		
		do{
			arr[0]=keypad_u8check_press('D');
    1374:	84 e4       	ldi	r24, 0x44	; 68
    1376:	0e 94 3b 04 	call	0x876	; 0x876 <keypad_u8check_press>
    137a:	f1 01       	movw	r30, r2
    137c:	80 83       	st	Z, r24
		}while(arr[0]==NOTPRESSED);
    137e:	8f 3f       	cpi	r24, 0xFF	; 255
    1380:	c9 f3       	breq	.-14     	; 0x1374 <main+0x2da>
    1382:	98 2f       	mov	r25, r24
		LCD_vsend_char(Four_bit,High_Nibble,'A','B',2,'B',4,arr[0]);
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	61 e0       	ldi	r22, 0x01	; 1
    1388:	41 e4       	ldi	r20, 0x41	; 65
    138a:	22 e4       	ldi	r18, 0x42	; 66
    138c:	02 e0       	ldi	r16, 0x02	; 2
    138e:	0f 2e       	mov	r0, r31
    1390:	f2 e4       	ldi	r31, 0x42	; 66
    1392:	ef 2e       	mov	r14, r31
    1394:	f0 2d       	mov	r31, r0
    1396:	cc 24       	eor	r12, r12
    1398:	68 94       	set
    139a:	c2 f8       	bld	r12, 2
    139c:	a9 2e       	mov	r10, r25
    139e:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_vsend_char>
    13a2:	8f ef       	ldi	r24, 0xFF	; 255
    13a4:	94 e3       	ldi	r25, 0x34	; 52
    13a6:	ac e0       	ldi	r26, 0x0C	; 12
    13a8:	81 50       	subi	r24, 0x01	; 1
    13aa:	90 40       	sbci	r25, 0x00	; 0
    13ac:	a0 40       	sbci	r26, 0x00	; 0
    13ae:	e1 f7       	brne	.-8      	; 0x13a8 <main+0x30e>
    13b0:	00 c0       	rjmp	.+0      	; 0x13b2 <main+0x318>
    13b2:	00 00       	nop
		_delay_ms(500);
		LCD_Move_Cursor(Four_bit,High_Nibble,'A','B',2,'B',4,1,12);
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	61 e0       	ldi	r22, 0x01	; 1
    13b8:	41 e4       	ldi	r20, 0x41	; 65
    13ba:	22 e4       	ldi	r18, 0x42	; 66
    13bc:	aa 24       	eor	r10, r10
    13be:	a3 94       	inc	r10
    13c0:	0f 2e       	mov	r0, r31
    13c2:	fc e0       	ldi	r31, 0x0C	; 12
    13c4:	8f 2e       	mov	r8, r31
    13c6:	f0 2d       	mov	r31, r0
    13c8:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LCD_Move_Cursor>
		LCD_vsend_char(Four_bit,High_Nibble,'A','B',2,'B',4,0x2A);
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	61 e0       	ldi	r22, 0x01	; 1
    13d0:	41 e4       	ldi	r20, 0x41	; 65
    13d2:	22 e4       	ldi	r18, 0x42	; 66
    13d4:	0f 2e       	mov	r0, r31
    13d6:	fa e2       	ldi	r31, 0x2A	; 42
    13d8:	af 2e       	mov	r10, r31
    13da:	f0 2d       	mov	r31, r0
    13dc:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_vsend_char>
    13e0:	8f ef       	ldi	r24, 0xFF	; 255
    13e2:	94 e3       	ldi	r25, 0x34	; 52
    13e4:	ac e0       	ldi	r26, 0x0C	; 12
    13e6:	81 50       	subi	r24, 0x01	; 1
    13e8:	90 40       	sbci	r25, 0x00	; 0
    13ea:	a0 40       	sbci	r26, 0x00	; 0
    13ec:	e1 f7       	brne	.-8      	; 0x13e6 <main+0x34c>
    13ee:	00 c0       	rjmp	.+0      	; 0x13f0 <main+0x356>
    13f0:	00 00       	nop
		_delay_ms(500);
		
		do{
			arr[1]=keypad_u8check_press('D');
    13f2:	84 e4       	ldi	r24, 0x44	; 68
    13f4:	0e 94 3b 04 	call	0x876	; 0x876 <keypad_u8check_press>
    13f8:	ab e1       	ldi	r26, 0x1B	; 27
    13fa:	b1 e0       	ldi	r27, 0x01	; 1
    13fc:	8c 93       	st	X, r24
		}while(arr[1]==NOTPRESSED);
    13fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1400:	c1 f3       	breq	.-16     	; 0x13f2 <main+0x358>
    1402:	98 2f       	mov	r25, r24
		LCD_vsend_char(Four_bit,High_Nibble,'A','B',2,'B',4,arr[1]);
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	61 e0       	ldi	r22, 0x01	; 1
    1408:	41 e4       	ldi	r20, 0x41	; 65
    140a:	22 e4       	ldi	r18, 0x42	; 66
    140c:	02 e0       	ldi	r16, 0x02	; 2
    140e:	0f 2e       	mov	r0, r31
    1410:	f2 e4       	ldi	r31, 0x42	; 66
    1412:	ef 2e       	mov	r14, r31
    1414:	f0 2d       	mov	r31, r0
    1416:	cc 24       	eor	r12, r12
    1418:	68 94       	set
    141a:	c2 f8       	bld	r12, 2
    141c:	a9 2e       	mov	r10, r25
    141e:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_vsend_char>
    1422:	8f ef       	ldi	r24, 0xFF	; 255
    1424:	94 e3       	ldi	r25, 0x34	; 52
    1426:	ac e0       	ldi	r26, 0x0C	; 12
    1428:	81 50       	subi	r24, 0x01	; 1
    142a:	90 40       	sbci	r25, 0x00	; 0
    142c:	a0 40       	sbci	r26, 0x00	; 0
    142e:	e1 f7       	brne	.-8      	; 0x1428 <main+0x38e>
    1430:	00 c0       	rjmp	.+0      	; 0x1432 <main+0x398>
    1432:	00 00       	nop
		_delay_ms(500);
		LCD_Move_Cursor(Four_bit,High_Nibble,'A','B',2,'B',4,1,13);
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	61 e0       	ldi	r22, 0x01	; 1
    1438:	41 e4       	ldi	r20, 0x41	; 65
    143a:	22 e4       	ldi	r18, 0x42	; 66
    143c:	aa 24       	eor	r10, r10
    143e:	a3 94       	inc	r10
    1440:	0f 2e       	mov	r0, r31
    1442:	fd e0       	ldi	r31, 0x0D	; 13
    1444:	8f 2e       	mov	r8, r31
    1446:	f0 2d       	mov	r31, r0
    1448:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LCD_Move_Cursor>
		LCD_vsend_char(Four_bit,High_Nibble,'A','B',2,'B',4,0x2A);
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	61 e0       	ldi	r22, 0x01	; 1
    1450:	41 e4       	ldi	r20, 0x41	; 65
    1452:	22 e4       	ldi	r18, 0x42	; 66
    1454:	0f 2e       	mov	r0, r31
    1456:	fa e2       	ldi	r31, 0x2A	; 42
    1458:	af 2e       	mov	r10, r31
    145a:	f0 2d       	mov	r31, r0
    145c:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_vsend_char>
    1460:	8f ef       	ldi	r24, 0xFF	; 255
    1462:	94 e3       	ldi	r25, 0x34	; 52
    1464:	ac e0       	ldi	r26, 0x0C	; 12
    1466:	81 50       	subi	r24, 0x01	; 1
    1468:	90 40       	sbci	r25, 0x00	; 0
    146a:	a0 40       	sbci	r26, 0x00	; 0
    146c:	e1 f7       	brne	.-8      	; 0x1466 <main+0x3cc>
    146e:	00 c0       	rjmp	.+0      	; 0x1470 <main+0x3d6>
    1470:	00 00       	nop
		_delay_ms(500);
		
		do{
			arr[2]=keypad_u8check_press('D');
    1472:	84 e4       	ldi	r24, 0x44	; 68
    1474:	0e 94 3b 04 	call	0x876	; 0x876 <keypad_u8check_press>
    1478:	ac e1       	ldi	r26, 0x1C	; 28
    147a:	b1 e0       	ldi	r27, 0x01	; 1
    147c:	8c 93       	st	X, r24
		}while(arr[2]==NOTPRESSED);
    147e:	8f 3f       	cpi	r24, 0xFF	; 255
    1480:	c1 f3       	breq	.-16     	; 0x1472 <main+0x3d8>
    1482:	98 2f       	mov	r25, r24
		LCD_vsend_char(Four_bit,High_Nibble,'A','B',2,'B',4,arr[2]);
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	61 e0       	ldi	r22, 0x01	; 1
    1488:	41 e4       	ldi	r20, 0x41	; 65
    148a:	22 e4       	ldi	r18, 0x42	; 66
    148c:	02 e0       	ldi	r16, 0x02	; 2
    148e:	0f 2e       	mov	r0, r31
    1490:	f2 e4       	ldi	r31, 0x42	; 66
    1492:	ef 2e       	mov	r14, r31
    1494:	f0 2d       	mov	r31, r0
    1496:	cc 24       	eor	r12, r12
    1498:	68 94       	set
    149a:	c2 f8       	bld	r12, 2
    149c:	a9 2e       	mov	r10, r25
    149e:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_vsend_char>
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	94 e3       	ldi	r25, 0x34	; 52
    14a6:	ac e0       	ldi	r26, 0x0C	; 12
    14a8:	81 50       	subi	r24, 0x01	; 1
    14aa:	90 40       	sbci	r25, 0x00	; 0
    14ac:	a0 40       	sbci	r26, 0x00	; 0
    14ae:	e1 f7       	brne	.-8      	; 0x14a8 <main+0x40e>
    14b0:	00 c0       	rjmp	.+0      	; 0x14b2 <main+0x418>
    14b2:	00 00       	nop
		_delay_ms(500);
		LCD_Move_Cursor(Four_bit,High_Nibble,'A','B',2,'B',4,1,14);
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	61 e0       	ldi	r22, 0x01	; 1
    14b8:	41 e4       	ldi	r20, 0x41	; 65
    14ba:	22 e4       	ldi	r18, 0x42	; 66
    14bc:	aa 24       	eor	r10, r10
    14be:	a3 94       	inc	r10
    14c0:	0f 2e       	mov	r0, r31
    14c2:	fe e0       	ldi	r31, 0x0E	; 14
    14c4:	8f 2e       	mov	r8, r31
    14c6:	f0 2d       	mov	r31, r0
    14c8:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LCD_Move_Cursor>
		LCD_vsend_char(Four_bit,High_Nibble,'A','B',2,'B',4,0x2A);
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	61 e0       	ldi	r22, 0x01	; 1
    14d0:	41 e4       	ldi	r20, 0x41	; 65
    14d2:	22 e4       	ldi	r18, 0x42	; 66
    14d4:	0f 2e       	mov	r0, r31
    14d6:	fa e2       	ldi	r31, 0x2A	; 42
    14d8:	af 2e       	mov	r10, r31
    14da:	f0 2d       	mov	r31, r0
    14dc:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_vsend_char>
    14e0:	8f ef       	ldi	r24, 0xFF	; 255
    14e2:	94 e3       	ldi	r25, 0x34	; 52
    14e4:	ac e0       	ldi	r26, 0x0C	; 12
    14e6:	81 50       	subi	r24, 0x01	; 1
    14e8:	90 40       	sbci	r25, 0x00	; 0
    14ea:	a0 40       	sbci	r26, 0x00	; 0
    14ec:	e1 f7       	brne	.-8      	; 0x14e6 <main+0x44c>
    14ee:	00 c0       	rjmp	.+0      	; 0x14f0 <main+0x456>
    14f0:	00 00       	nop
		_delay_ms(500);
		
		do{
			arr[3]=keypad_u8check_press('D');
    14f2:	84 e4       	ldi	r24, 0x44	; 68
    14f4:	0e 94 3b 04 	call	0x876	; 0x876 <keypad_u8check_press>
    14f8:	88 83       	st	Y, r24
		}while(arr[3]==NOTPRESSED);
    14fa:	8f 3f       	cpi	r24, 0xFF	; 255
    14fc:	d1 f3       	breq	.-12     	; 0x14f2 <main+0x458>
    14fe:	98 2f       	mov	r25, r24
		LCD_vsend_char(Four_bit,High_Nibble,'A','B',2,'B',4,arr[3]);
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	61 e0       	ldi	r22, 0x01	; 1
    1504:	41 e4       	ldi	r20, 0x41	; 65
    1506:	22 e4       	ldi	r18, 0x42	; 66
    1508:	02 e0       	ldi	r16, 0x02	; 2
    150a:	0f 2e       	mov	r0, r31
    150c:	f2 e4       	ldi	r31, 0x42	; 66
    150e:	ef 2e       	mov	r14, r31
    1510:	f0 2d       	mov	r31, r0
    1512:	cc 24       	eor	r12, r12
    1514:	68 94       	set
    1516:	c2 f8       	bld	r12, 2
    1518:	a9 2e       	mov	r10, r25
    151a:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_vsend_char>
    151e:	8f ef       	ldi	r24, 0xFF	; 255
    1520:	94 e3       	ldi	r25, 0x34	; 52
    1522:	ac e0       	ldi	r26, 0x0C	; 12
    1524:	81 50       	subi	r24, 0x01	; 1
    1526:	90 40       	sbci	r25, 0x00	; 0
    1528:	a0 40       	sbci	r26, 0x00	; 0
    152a:	e1 f7       	brne	.-8      	; 0x1524 <main+0x48a>
    152c:	00 c0       	rjmp	.+0      	; 0x152e <main+0x494>
    152e:	00 00       	nop
		_delay_ms(500);
		LCD_Move_Cursor(Four_bit,High_Nibble,'A','B',2,'B',4,1,15);
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	61 e0       	ldi	r22, 0x01	; 1
    1534:	41 e4       	ldi	r20, 0x41	; 65
    1536:	22 e4       	ldi	r18, 0x42	; 66
    1538:	aa 24       	eor	r10, r10
    153a:	a3 94       	inc	r10
    153c:	0f 2e       	mov	r0, r31
    153e:	ff e0       	ldi	r31, 0x0F	; 15
    1540:	8f 2e       	mov	r8, r31
    1542:	f0 2d       	mov	r31, r0
    1544:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LCD_Move_Cursor>
		LCD_vsend_char(Four_bit,High_Nibble,'A','B',2,'B',4,0x2A);
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	61 e0       	ldi	r22, 0x01	; 1
    154c:	41 e4       	ldi	r20, 0x41	; 65
    154e:	22 e4       	ldi	r18, 0x42	; 66
    1550:	0f 2e       	mov	r0, r31
    1552:	fa e2       	ldi	r31, 0x2A	; 42
    1554:	af 2e       	mov	r10, r31
    1556:	f0 2d       	mov	r31, r0
    1558:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_vsend_char>
    155c:	8f ef       	ldi	r24, 0xFF	; 255
    155e:	94 e3       	ldi	r25, 0x34	; 52
    1560:	ac e0       	ldi	r26, 0x0C	; 12
    1562:	81 50       	subi	r24, 0x01	; 1
    1564:	90 40       	sbci	r25, 0x00	; 0
    1566:	a0 40       	sbci	r26, 0x00	; 0
    1568:	e1 f7       	brne	.-8      	; 0x1562 <main+0x4c8>
    156a:	00 c0       	rjmp	.+0      	; 0x156c <main+0x4d2>
    156c:	00 00       	nop
		_delay_ms(500);
		
		if (EEPROM_Read(EEPROM_PASSWORD_LOCATION1)==arr[0]  && EEPROM_Read(EEPROM_PASSWORD_LOCATION2)==arr[1]  && EEPROM_Read(EEPROM_PASSWORD_LOCATION3)==arr[2]  &&EEPROM_Read(EEPROM_PASSWORD_LOCATION4)==arr[3]){
    156e:	84 e0       	ldi	r24, 0x04	; 4
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_Read>
    1576:	d1 01       	movw	r26, r2
    1578:	9c 91       	ld	r25, X
    157a:	89 17       	cp	r24, r25
    157c:	09 f0       	breq	.+2      	; 0x1580 <main+0x4e6>
    157e:	43 c0       	rjmp	.+134    	; 0x1606 <main+0x56c>
    1580:	85 e0       	ldi	r24, 0x05	; 5
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_Read>
    1588:	eb e1       	ldi	r30, 0x1B	; 27
    158a:	f1 e0       	ldi	r31, 0x01	; 1
    158c:	90 81       	ld	r25, Z
    158e:	89 17       	cp	r24, r25
    1590:	d1 f5       	brne	.+116    	; 0x1606 <main+0x56c>
    1592:	86 e0       	ldi	r24, 0x06	; 6
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_Read>
    159a:	ac e1       	ldi	r26, 0x1C	; 28
    159c:	b1 e0       	ldi	r27, 0x01	; 1
    159e:	9c 91       	ld	r25, X
    15a0:	89 17       	cp	r24, r25
    15a2:	89 f5       	brne	.+98     	; 0x1606 <main+0x56c>
    15a4:	87 e0       	ldi	r24, 0x07	; 7
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_Read>
    15ac:	98 81       	ld	r25, Y
    15ae:	89 17       	cp	r24, r25
    15b0:	51 f5       	brne	.+84     	; 0x1606 <main+0x56c>
			LCD_clear_screen(Four_bit,High_Nibble,'A','B',2,'B',4);
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	61 e0       	ldi	r22, 0x01	; 1
    15b6:	41 e4       	ldi	r20, 0x41	; 65
    15b8:	22 e4       	ldi	r18, 0x42	; 66
    15ba:	0e 94 53 06 	call	0xca6	; 0xca6 <LCD_clear_screen>
			LCD_vsend_string(Four_bit,High_Nibble,'A','B',2,'B',4,"Right Password");
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	61 e0       	ldi	r22, 0x01	; 1
    15c2:	41 e4       	ldi	r20, 0x41	; 65
    15c4:	22 e4       	ldi	r18, 0x42	; 66
    15c6:	0f 2e       	mov	r0, r31
    15c8:	f6 e9       	ldi	r31, 0x96	; 150
    15ca:	af 2e       	mov	r10, r31
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	bf 2e       	mov	r11, r31
    15d0:	f0 2d       	mov	r31, r0
    15d2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <LCD_vsend_string>
			LCD_Move_Cursor(Four_bit,High_Nibble,'A','B',2,'B',4,2,1);
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	61 e0       	ldi	r22, 0x01	; 1
    15da:	41 e4       	ldi	r20, 0x41	; 65
    15dc:	22 e4       	ldi	r18, 0x42	; 66
    15de:	aa 24       	eor	r10, r10
    15e0:	68 94       	set
    15e2:	a1 f8       	bld	r10, 1
    15e4:	88 24       	eor	r8, r8
    15e6:	83 94       	inc	r8
    15e8:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LCD_Move_Cursor>
			LCD_vsend_string(Four_bit,High_Nibble,'A','B',2,'B',4,"The safe is open");
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	61 e0       	ldi	r22, 0x01	; 1
    15f0:	41 e4       	ldi	r20, 0x41	; 65
    15f2:	22 e4       	ldi	r18, 0x42	; 66
    15f4:	0f 2e       	mov	r0, r31
    15f6:	f5 ea       	ldi	r31, 0xA5	; 165
    15f8:	af 2e       	mov	r10, r31
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	bf 2e       	mov	r11, r31
    15fe:	f0 2d       	mov	r31, r0
    1600:	0e 94 0d 07 	call	0xe1a	; 0xe1a <LCD_vsend_string>
    1604:	e3 c0       	rjmp	.+454    	; 0x17cc <main+0x732>
			flag=1;
		}else{
			Tries-=1;
			if (Tries > 0){
    1606:	41 14       	cp	r4, r1
    1608:	51 04       	cpc	r5, r1
    160a:	61 04       	cpc	r6, r1
    160c:	71 04       	cpc	r7, r1
    160e:	09 f4       	brne	.+2      	; 0x1612 <main+0x578>
    1610:	4c c0       	rjmp	.+152    	; 0x16aa <main+0x610>
				LCD_clear_screen(Four_bit,High_Nibble,'A','B',2,'B',4);
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	61 e0       	ldi	r22, 0x01	; 1
    1616:	41 e4       	ldi	r20, 0x41	; 65
    1618:	22 e4       	ldi	r18, 0x42	; 66
    161a:	02 e0       	ldi	r16, 0x02	; 2
    161c:	0f 2e       	mov	r0, r31
    161e:	f2 e4       	ldi	r31, 0x42	; 66
    1620:	ef 2e       	mov	r14, r31
    1622:	f0 2d       	mov	r31, r0
    1624:	cc 24       	eor	r12, r12
    1626:	68 94       	set
    1628:	c2 f8       	bld	r12, 2
    162a:	0e 94 53 06 	call	0xca6	; 0xca6 <LCD_clear_screen>
				LCD_vsend_string(Four_bit,High_Nibble,'A','B',2,'B',4,"Wrong Password");
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	61 e0       	ldi	r22, 0x01	; 1
    1632:	41 e4       	ldi	r20, 0x41	; 65
    1634:	22 e4       	ldi	r18, 0x42	; 66
    1636:	0f 2e       	mov	r0, r31
    1638:	f6 eb       	ldi	r31, 0xB6	; 182
    163a:	af 2e       	mov	r10, r31
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	bf 2e       	mov	r11, r31
    1640:	f0 2d       	mov	r31, r0
    1642:	0e 94 0d 07 	call	0xe1a	; 0xe1a <LCD_vsend_string>
    1646:	8f ef       	ldi	r24, 0xFF	; 255
    1648:	99 e6       	ldi	r25, 0x69	; 105
    164a:	a8 e1       	ldi	r26, 0x18	; 24
    164c:	81 50       	subi	r24, 0x01	; 1
    164e:	90 40       	sbci	r25, 0x00	; 0
    1650:	a0 40       	sbci	r26, 0x00	; 0
    1652:	e1 f7       	brne	.-8      	; 0x164c <main+0x5b2>
    1654:	00 c0       	rjmp	.+0      	; 0x1656 <main+0x5bc>
    1656:	00 00       	nop
				_delay_ms(1000);
				LCD_clear_screen(Four_bit,High_Nibble,'A','B',2,'B',4);
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	61 e0       	ldi	r22, 0x01	; 1
    165c:	41 e4       	ldi	r20, 0x41	; 65
    165e:	22 e4       	ldi	r18, 0x42	; 66
    1660:	0e 94 53 06 	call	0xca6	; 0xca6 <LCD_clear_screen>
				LCD_vsend_string(Four_bit,High_Nibble,'A','B',2,'B',4,"Tries left:");
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	61 e0       	ldi	r22, 0x01	; 1
    1668:	41 e4       	ldi	r20, 0x41	; 65
    166a:	22 e4       	ldi	r18, 0x42	; 66
    166c:	0f 2e       	mov	r0, r31
    166e:	f5 ec       	ldi	r31, 0xC5	; 197
    1670:	af 2e       	mov	r10, r31
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	bf 2e       	mov	r11, r31
    1676:	f0 2d       	mov	r31, r0
    1678:	0e 94 0d 07 	call	0xe1a	; 0xe1a <LCD_vsend_string>
				LCD_display_number(Four_bit,High_Nibble,'A','B',2,'B',4,Tries);
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	61 e0       	ldi	r22, 0x01	; 1
    1680:	41 e4       	ldi	r20, 0x41	; 65
    1682:	22 e4       	ldi	r18, 0x42	; 66
    1684:	53 01       	movw	r10, r6
    1686:	42 01       	movw	r8, r4
    1688:	0e 94 42 07 	call	0xe84	; 0xe84 <LCD_display_number>
    168c:	8f ef       	ldi	r24, 0xFF	; 255
    168e:	99 e6       	ldi	r25, 0x69	; 105
    1690:	a8 e1       	ldi	r26, 0x18	; 24
    1692:	81 50       	subi	r24, 0x01	; 1
    1694:	90 40       	sbci	r25, 0x00	; 0
    1696:	a0 40       	sbci	r26, 0x00	; 0
    1698:	e1 f7       	brne	.-8      	; 0x1692 <main+0x5f8>
    169a:	00 c0       	rjmp	.+0      	; 0x169c <main+0x602>
    169c:	00 00       	nop
    169e:	08 94       	sec
    16a0:	41 08       	sbc	r4, r1
    16a2:	51 08       	sbc	r5, r1
    16a4:	61 08       	sbc	r6, r1
    16a6:	71 08       	sbc	r7, r1
    16a8:	41 ce       	rjmp	.-894    	; 0x132c <main+0x292>
				_delay_ms(1000);
			}else{
				LCD_clear_screen(Four_bit,High_Nibble,'A','B',2,'B',4);
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	61 e0       	ldi	r22, 0x01	; 1
    16ae:	41 e4       	ldi	r20, 0x41	; 65
    16b0:	22 e4       	ldi	r18, 0x42	; 66
    16b2:	02 e0       	ldi	r16, 0x02	; 2
    16b4:	0f 2e       	mov	r0, r31
    16b6:	f2 e4       	ldi	r31, 0x42	; 66
    16b8:	ef 2e       	mov	r14, r31
    16ba:	f0 2d       	mov	r31, r0
    16bc:	cc 24       	eor	r12, r12
    16be:	68 94       	set
    16c0:	c2 f8       	bld	r12, 2
    16c2:	0e 94 53 06 	call	0xca6	; 0xca6 <LCD_clear_screen>
				LCD_vsend_string(Four_bit,High_Nibble,'A','B',2,'B',4,"Wrong Password");
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	61 e0       	ldi	r22, 0x01	; 1
    16ca:	41 e4       	ldi	r20, 0x41	; 65
    16cc:	22 e4       	ldi	r18, 0x42	; 66
    16ce:	0f 2e       	mov	r0, r31
    16d0:	f6 eb       	ldi	r31, 0xB6	; 182
    16d2:	af 2e       	mov	r10, r31
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	bf 2e       	mov	r11, r31
    16d8:	f0 2d       	mov	r31, r0
    16da:	0e 94 0d 07 	call	0xe1a	; 0xe1a <LCD_vsend_string>
				LCD_Move_Cursor(Four_bit,High_Nibble,'A','B',2,'B',4,2,1);
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	61 e0       	ldi	r22, 0x01	; 1
    16e2:	41 e4       	ldi	r20, 0x41	; 65
    16e4:	22 e4       	ldi	r18, 0x42	; 66
    16e6:	aa 24       	eor	r10, r10
    16e8:	68 94       	set
    16ea:	a1 f8       	bld	r10, 1
    16ec:	88 24       	eor	r8, r8
    16ee:	83 94       	inc	r8
    16f0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LCD_Move_Cursor>
				LCD_vsend_string(Four_bit,High_Nibble,'A','B',2,'B',4,"The safe closed");
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	61 e0       	ldi	r22, 0x01	; 1
    16f8:	41 e4       	ldi	r20, 0x41	; 65
    16fa:	22 e4       	ldi	r18, 0x42	; 66
    16fc:	0f 2e       	mov	r0, r31
    16fe:	f1 ed       	ldi	r31, 0xD1	; 209
    1700:	af 2e       	mov	r10, r31
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	bf 2e       	mov	r11, r31
    1706:	f0 2d       	mov	r31, r0
    1708:	0e 94 0d 07 	call	0xe1a	; 0xe1a <LCD_vsend_string>
    170c:	8f ef       	ldi	r24, 0xFF	; 255
    170e:	99 e6       	ldi	r25, 0x69	; 105
    1710:	a8 e1       	ldi	r26, 0x18	; 24
    1712:	81 50       	subi	r24, 0x01	; 1
    1714:	90 40       	sbci	r25, 0x00	; 0
    1716:	a0 40       	sbci	r26, 0x00	; 0
    1718:	e1 f7       	brne	.-8      	; 0x1712 <main+0x678>
    171a:	00 c0       	rjmp	.+0      	; 0x171c <main+0x682>
    171c:	00 00       	nop
				_delay_ms(1000);
				LCD_clear_screen(Four_bit,High_Nibble,'A','B',2,'B',4);
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	61 e0       	ldi	r22, 0x01	; 1
    1722:	41 e4       	ldi	r20, 0x41	; 65
    1724:	22 e4       	ldi	r18, 0x42	; 66
    1726:	0e 94 53 06 	call	0xca6	; 0xca6 <LCD_clear_screen>
				LCD_vsend_string(Four_bit,High_Nibble,'A','B',2,'B',4,"Access denied");
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	61 e0       	ldi	r22, 0x01	; 1
    172e:	41 e4       	ldi	r20, 0x41	; 65
    1730:	22 e4       	ldi	r18, 0x42	; 66
    1732:	0f 2e       	mov	r0, r31
    1734:	f1 ee       	ldi	r31, 0xE1	; 225
    1736:	af 2e       	mov	r10, r31
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	bf 2e       	mov	r11, r31
    173c:	f0 2d       	mov	r31, r0
    173e:	0e 94 0d 07 	call	0xe1a	; 0xe1a <LCD_vsend_string>
				LCD_Move_Cursor(Four_bit,High_Nibble,'A','B',2,'B',4,2,1);
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	61 e0       	ldi	r22, 0x01	; 1
    1746:	41 e4       	ldi	r20, 0x41	; 65
    1748:	22 e4       	ldi	r18, 0x42	; 66
    174a:	aa 24       	eor	r10, r10
    174c:	68 94       	set
    174e:	a1 f8       	bld	r10, 1
    1750:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LCD_Move_Cursor>
				LCD_vsend_string(Four_bit,High_Nibble,'A','B',2,'B',4,"HHH 7ramy");
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	61 e0       	ldi	r22, 0x01	; 1
    1758:	41 e4       	ldi	r20, 0x41	; 65
    175a:	22 e4       	ldi	r18, 0x42	; 66
    175c:	0f 2e       	mov	r0, r31
    175e:	ff ee       	ldi	r31, 0xEF	; 239
    1760:	af 2e       	mov	r10, r31
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	bf 2e       	mov	r11, r31
    1766:	f0 2d       	mov	r31, r0
    1768:	0e 94 0d 07 	call	0xe1a	; 0xe1a <LCD_vsend_string>
    176c:	8f ef       	ldi	r24, 0xFF	; 255
    176e:	99 e6       	ldi	r25, 0x69	; 105
    1770:	a8 e1       	ldi	r26, 0x18	; 24
    1772:	81 50       	subi	r24, 0x01	; 1
    1774:	90 40       	sbci	r25, 0x00	; 0
    1776:	a0 40       	sbci	r26, 0x00	; 0
    1778:	e1 f7       	brne	.-8      	; 0x1772 <main+0x6d8>
    177a:	00 c0       	rjmp	.+0      	; 0x177c <main+0x6e2>
    177c:	00 00       	nop
				_delay_ms(1000);
				LCD_clear_screen(Four_bit,High_Nibble,'A','B',2,'B',4);
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	61 e0       	ldi	r22, 0x01	; 1
    1782:	41 e4       	ldi	r20, 0x41	; 65
    1784:	22 e4       	ldi	r18, 0x42	; 66
    1786:	0e 94 53 06 	call	0xca6	; 0xca6 <LCD_clear_screen>
				LCD_vsend_string(Four_bit,High_Nibble,'A','B',2,'B',4,"ya 7ramy ya wis5");
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	61 e0       	ldi	r22, 0x01	; 1
    178e:	41 e4       	ldi	r20, 0x41	; 65
    1790:	22 e4       	ldi	r18, 0x42	; 66
    1792:	0f 2e       	mov	r0, r31
    1794:	f9 ef       	ldi	r31, 0xF9	; 249
    1796:	af 2e       	mov	r10, r31
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	bf 2e       	mov	r11, r31
    179c:	f0 2d       	mov	r31, r0
    179e:	0e 94 0d 07 	call	0xe1a	; 0xe1a <LCD_vsend_string>
				LCD_Move_Cursor(Four_bit,High_Nibble,'A','B',2,'B',4,2,1);
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	61 e0       	ldi	r22, 0x01	; 1
    17a6:	41 e4       	ldi	r20, 0x41	; 65
    17a8:	22 e4       	ldi	r18, 0x42	; 66
    17aa:	aa 24       	eor	r10, r10
    17ac:	68 94       	set
    17ae:	a1 f8       	bld	r10, 1
    17b0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LCD_Move_Cursor>
				LCD_vsend_string(Four_bit,High_Nibble,'A','B',2,'B',4,"Help ya gd3aan");
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	61 e0       	ldi	r22, 0x01	; 1
    17b8:	41 e4       	ldi	r20, 0x41	; 65
    17ba:	22 e4       	ldi	r18, 0x42	; 66
    17bc:	0f 2e       	mov	r0, r31
    17be:	fa e0       	ldi	r31, 0x0A	; 10
    17c0:	af 2e       	mov	r10, r31
    17c2:	f1 e0       	ldi	r31, 0x01	; 1
    17c4:	bf 2e       	mov	r11, r31
    17c6:	f0 2d       	mov	r31, r0
    17c8:	0e 94 0d 07 	call	0xe1a	; 0xe1a <LCD_vsend_string>
    17cc:	ff cf       	rjmp	.-2      	; 0x17cc <main+0x732>

000017ce <__subsf3>:
    17ce:	50 58       	subi	r21, 0x80	; 128

000017d0 <__addsf3>:
    17d0:	bb 27       	eor	r27, r27
    17d2:	aa 27       	eor	r26, r26
    17d4:	0e d0       	rcall	.+28     	; 0x17f2 <__addsf3x>
    17d6:	37 c1       	rjmp	.+622    	; 0x1a46 <__fp_round>
    17d8:	28 d1       	rcall	.+592    	; 0x1a2a <__fp_pscA>
    17da:	30 f0       	brcs	.+12     	; 0x17e8 <__addsf3+0x18>
    17dc:	2d d1       	rcall	.+602    	; 0x1a38 <__fp_pscB>
    17de:	20 f0       	brcs	.+8      	; 0x17e8 <__addsf3+0x18>
    17e0:	31 f4       	brne	.+12     	; 0x17ee <__addsf3+0x1e>
    17e2:	9f 3f       	cpi	r25, 0xFF	; 255
    17e4:	11 f4       	brne	.+4      	; 0x17ea <__addsf3+0x1a>
    17e6:	1e f4       	brtc	.+6      	; 0x17ee <__addsf3+0x1e>
    17e8:	0d c1       	rjmp	.+538    	; 0x1a04 <__fp_nan>
    17ea:	0e f4       	brtc	.+2      	; 0x17ee <__addsf3+0x1e>
    17ec:	e0 95       	com	r30
    17ee:	e7 fb       	bst	r30, 7
    17f0:	03 c1       	rjmp	.+518    	; 0x19f8 <__fp_inf>

000017f2 <__addsf3x>:
    17f2:	e9 2f       	mov	r30, r25
    17f4:	39 d1       	rcall	.+626    	; 0x1a68 <__fp_split3>
    17f6:	80 f3       	brcs	.-32     	; 0x17d8 <__addsf3+0x8>
    17f8:	ba 17       	cp	r27, r26
    17fa:	62 07       	cpc	r22, r18
    17fc:	73 07       	cpc	r23, r19
    17fe:	84 07       	cpc	r24, r20
    1800:	95 07       	cpc	r25, r21
    1802:	18 f0       	brcs	.+6      	; 0x180a <__addsf3x+0x18>
    1804:	71 f4       	brne	.+28     	; 0x1822 <__addsf3x+0x30>
    1806:	9e f5       	brtc	.+102    	; 0x186e <__addsf3x+0x7c>
    1808:	51 c1       	rjmp	.+674    	; 0x1aac <__fp_zero>
    180a:	0e f4       	brtc	.+2      	; 0x180e <__addsf3x+0x1c>
    180c:	e0 95       	com	r30
    180e:	0b 2e       	mov	r0, r27
    1810:	ba 2f       	mov	r27, r26
    1812:	a0 2d       	mov	r26, r0
    1814:	0b 01       	movw	r0, r22
    1816:	b9 01       	movw	r22, r18
    1818:	90 01       	movw	r18, r0
    181a:	0c 01       	movw	r0, r24
    181c:	ca 01       	movw	r24, r20
    181e:	a0 01       	movw	r20, r0
    1820:	11 24       	eor	r1, r1
    1822:	ff 27       	eor	r31, r31
    1824:	59 1b       	sub	r21, r25
    1826:	99 f0       	breq	.+38     	; 0x184e <__addsf3x+0x5c>
    1828:	59 3f       	cpi	r21, 0xF9	; 249
    182a:	50 f4       	brcc	.+20     	; 0x1840 <__addsf3x+0x4e>
    182c:	50 3e       	cpi	r21, 0xE0	; 224
    182e:	68 f1       	brcs	.+90     	; 0x188a <__addsf3x+0x98>
    1830:	1a 16       	cp	r1, r26
    1832:	f0 40       	sbci	r31, 0x00	; 0
    1834:	a2 2f       	mov	r26, r18
    1836:	23 2f       	mov	r18, r19
    1838:	34 2f       	mov	r19, r20
    183a:	44 27       	eor	r20, r20
    183c:	58 5f       	subi	r21, 0xF8	; 248
    183e:	f3 cf       	rjmp	.-26     	; 0x1826 <__addsf3x+0x34>
    1840:	46 95       	lsr	r20
    1842:	37 95       	ror	r19
    1844:	27 95       	ror	r18
    1846:	a7 95       	ror	r26
    1848:	f0 40       	sbci	r31, 0x00	; 0
    184a:	53 95       	inc	r21
    184c:	c9 f7       	brne	.-14     	; 0x1840 <__addsf3x+0x4e>
    184e:	7e f4       	brtc	.+30     	; 0x186e <__addsf3x+0x7c>
    1850:	1f 16       	cp	r1, r31
    1852:	ba 0b       	sbc	r27, r26
    1854:	62 0b       	sbc	r22, r18
    1856:	73 0b       	sbc	r23, r19
    1858:	84 0b       	sbc	r24, r20
    185a:	ba f0       	brmi	.+46     	; 0x188a <__addsf3x+0x98>
    185c:	91 50       	subi	r25, 0x01	; 1
    185e:	a1 f0       	breq	.+40     	; 0x1888 <__addsf3x+0x96>
    1860:	ff 0f       	add	r31, r31
    1862:	bb 1f       	adc	r27, r27
    1864:	66 1f       	adc	r22, r22
    1866:	77 1f       	adc	r23, r23
    1868:	88 1f       	adc	r24, r24
    186a:	c2 f7       	brpl	.-16     	; 0x185c <__addsf3x+0x6a>
    186c:	0e c0       	rjmp	.+28     	; 0x188a <__addsf3x+0x98>
    186e:	ba 0f       	add	r27, r26
    1870:	62 1f       	adc	r22, r18
    1872:	73 1f       	adc	r23, r19
    1874:	84 1f       	adc	r24, r20
    1876:	48 f4       	brcc	.+18     	; 0x188a <__addsf3x+0x98>
    1878:	87 95       	ror	r24
    187a:	77 95       	ror	r23
    187c:	67 95       	ror	r22
    187e:	b7 95       	ror	r27
    1880:	f7 95       	ror	r31
    1882:	9e 3f       	cpi	r25, 0xFE	; 254
    1884:	08 f0       	brcs	.+2      	; 0x1888 <__addsf3x+0x96>
    1886:	b3 cf       	rjmp	.-154    	; 0x17ee <__addsf3+0x1e>
    1888:	93 95       	inc	r25
    188a:	88 0f       	add	r24, r24
    188c:	08 f0       	brcs	.+2      	; 0x1890 <__addsf3x+0x9e>
    188e:	99 27       	eor	r25, r25
    1890:	ee 0f       	add	r30, r30
    1892:	97 95       	ror	r25
    1894:	87 95       	ror	r24
    1896:	08 95       	ret

00001898 <__fixsfsi>:
    1898:	04 d0       	rcall	.+8      	; 0x18a2 <__fixunssfsi>
    189a:	68 94       	set
    189c:	b1 11       	cpse	r27, r1
    189e:	07 c1       	rjmp	.+526    	; 0x1aae <__fp_szero>
    18a0:	08 95       	ret

000018a2 <__fixunssfsi>:
    18a2:	ea d0       	rcall	.+468    	; 0x1a78 <__fp_splitA>
    18a4:	88 f0       	brcs	.+34     	; 0x18c8 <__fixunssfsi+0x26>
    18a6:	9f 57       	subi	r25, 0x7F	; 127
    18a8:	90 f0       	brcs	.+36     	; 0x18ce <__fixunssfsi+0x2c>
    18aa:	b9 2f       	mov	r27, r25
    18ac:	99 27       	eor	r25, r25
    18ae:	b7 51       	subi	r27, 0x17	; 23
    18b0:	a0 f0       	brcs	.+40     	; 0x18da <__fixunssfsi+0x38>
    18b2:	d1 f0       	breq	.+52     	; 0x18e8 <__fixunssfsi+0x46>
    18b4:	66 0f       	add	r22, r22
    18b6:	77 1f       	adc	r23, r23
    18b8:	88 1f       	adc	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	1a f0       	brmi	.+6      	; 0x18c4 <__fixunssfsi+0x22>
    18be:	ba 95       	dec	r27
    18c0:	c9 f7       	brne	.-14     	; 0x18b4 <__fixunssfsi+0x12>
    18c2:	12 c0       	rjmp	.+36     	; 0x18e8 <__fixunssfsi+0x46>
    18c4:	b1 30       	cpi	r27, 0x01	; 1
    18c6:	81 f0       	breq	.+32     	; 0x18e8 <__fixunssfsi+0x46>
    18c8:	f1 d0       	rcall	.+482    	; 0x1aac <__fp_zero>
    18ca:	b1 e0       	ldi	r27, 0x01	; 1
    18cc:	08 95       	ret
    18ce:	ee c0       	rjmp	.+476    	; 0x1aac <__fp_zero>
    18d0:	67 2f       	mov	r22, r23
    18d2:	78 2f       	mov	r23, r24
    18d4:	88 27       	eor	r24, r24
    18d6:	b8 5f       	subi	r27, 0xF8	; 248
    18d8:	39 f0       	breq	.+14     	; 0x18e8 <__fixunssfsi+0x46>
    18da:	b9 3f       	cpi	r27, 0xF9	; 249
    18dc:	cc f3       	brlt	.-14     	; 0x18d0 <__fixunssfsi+0x2e>
    18de:	86 95       	lsr	r24
    18e0:	77 95       	ror	r23
    18e2:	67 95       	ror	r22
    18e4:	b3 95       	inc	r27
    18e6:	d9 f7       	brne	.-10     	; 0x18de <__fixunssfsi+0x3c>
    18e8:	3e f4       	brtc	.+14     	; 0x18f8 <__fixunssfsi+0x56>
    18ea:	90 95       	com	r25
    18ec:	80 95       	com	r24
    18ee:	70 95       	com	r23
    18f0:	61 95       	neg	r22
    18f2:	7f 4f       	sbci	r23, 0xFF	; 255
    18f4:	8f 4f       	sbci	r24, 0xFF	; 255
    18f6:	9f 4f       	sbci	r25, 0xFF	; 255
    18f8:	08 95       	ret

000018fa <__floatdisf>:
    18fa:	97 fb       	bst	r25, 7
    18fc:	0e f4       	brtc	.+2      	; 0x1900 <__floatdisf+0x6>
    18fe:	85 d0       	rcall	.+266    	; 0x1a0a <__fp_negdi>
    1900:	3e c0       	rjmp	.+124    	; 0x197e <__fp_di2sf>

00001902 <__floatunsisf>:
    1902:	e8 94       	clt
    1904:	09 c0       	rjmp	.+18     	; 0x1918 <__floatsisf+0x12>

00001906 <__floatsisf>:
    1906:	97 fb       	bst	r25, 7
    1908:	3e f4       	brtc	.+14     	; 0x1918 <__floatsisf+0x12>
    190a:	90 95       	com	r25
    190c:	80 95       	com	r24
    190e:	70 95       	com	r23
    1910:	61 95       	neg	r22
    1912:	7f 4f       	sbci	r23, 0xFF	; 255
    1914:	8f 4f       	sbci	r24, 0xFF	; 255
    1916:	9f 4f       	sbci	r25, 0xFF	; 255
    1918:	99 23       	and	r25, r25
    191a:	a9 f0       	breq	.+42     	; 0x1946 <__floatsisf+0x40>
    191c:	f9 2f       	mov	r31, r25
    191e:	96 e9       	ldi	r25, 0x96	; 150
    1920:	bb 27       	eor	r27, r27
    1922:	93 95       	inc	r25
    1924:	f6 95       	lsr	r31
    1926:	87 95       	ror	r24
    1928:	77 95       	ror	r23
    192a:	67 95       	ror	r22
    192c:	b7 95       	ror	r27
    192e:	f1 11       	cpse	r31, r1
    1930:	f8 cf       	rjmp	.-16     	; 0x1922 <__floatsisf+0x1c>
    1932:	fa f4       	brpl	.+62     	; 0x1972 <__floatsisf+0x6c>
    1934:	bb 0f       	add	r27, r27
    1936:	11 f4       	brne	.+4      	; 0x193c <__floatsisf+0x36>
    1938:	60 ff       	sbrs	r22, 0
    193a:	1b c0       	rjmp	.+54     	; 0x1972 <__floatsisf+0x6c>
    193c:	6f 5f       	subi	r22, 0xFF	; 255
    193e:	7f 4f       	sbci	r23, 0xFF	; 255
    1940:	8f 4f       	sbci	r24, 0xFF	; 255
    1942:	9f 4f       	sbci	r25, 0xFF	; 255
    1944:	16 c0       	rjmp	.+44     	; 0x1972 <__floatsisf+0x6c>
    1946:	88 23       	and	r24, r24
    1948:	11 f0       	breq	.+4      	; 0x194e <__floatsisf+0x48>
    194a:	96 e9       	ldi	r25, 0x96	; 150
    194c:	11 c0       	rjmp	.+34     	; 0x1970 <__floatsisf+0x6a>
    194e:	77 23       	and	r23, r23
    1950:	21 f0       	breq	.+8      	; 0x195a <__floatsisf+0x54>
    1952:	9e e8       	ldi	r25, 0x8E	; 142
    1954:	87 2f       	mov	r24, r23
    1956:	76 2f       	mov	r23, r22
    1958:	05 c0       	rjmp	.+10     	; 0x1964 <__floatsisf+0x5e>
    195a:	66 23       	and	r22, r22
    195c:	71 f0       	breq	.+28     	; 0x197a <__floatsisf+0x74>
    195e:	96 e8       	ldi	r25, 0x86	; 134
    1960:	86 2f       	mov	r24, r22
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	60 e0       	ldi	r22, 0x00	; 0
    1966:	2a f0       	brmi	.+10     	; 0x1972 <__floatsisf+0x6c>
    1968:	9a 95       	dec	r25
    196a:	66 0f       	add	r22, r22
    196c:	77 1f       	adc	r23, r23
    196e:	88 1f       	adc	r24, r24
    1970:	da f7       	brpl	.-10     	; 0x1968 <__floatsisf+0x62>
    1972:	88 0f       	add	r24, r24
    1974:	96 95       	lsr	r25
    1976:	87 95       	ror	r24
    1978:	97 f9       	bld	r25, 7
    197a:	08 95       	ret

0000197c <__floatundisf>:
    197c:	e8 94       	clt

0000197e <__fp_di2sf>:
    197e:	f9 2f       	mov	r31, r25
    1980:	96 eb       	ldi	r25, 0xB6	; 182
    1982:	ff 23       	and	r31, r31
    1984:	81 f0       	breq	.+32     	; 0x19a6 <__fp_di2sf+0x28>
    1986:	12 16       	cp	r1, r18
    1988:	13 06       	cpc	r1, r19
    198a:	14 06       	cpc	r1, r20
    198c:	44 0b       	sbc	r20, r20
    198e:	93 95       	inc	r25
    1990:	f6 95       	lsr	r31
    1992:	87 95       	ror	r24
    1994:	77 95       	ror	r23
    1996:	67 95       	ror	r22
    1998:	57 95       	ror	r21
    199a:	40 40       	sbci	r20, 0x00	; 0
    199c:	ff 23       	and	r31, r31
    199e:	b9 f7       	brne	.-18     	; 0x198e <__fp_di2sf+0x10>
    19a0:	1b c0       	rjmp	.+54     	; 0x19d8 <__fp_di2sf+0x5a>
    19a2:	99 27       	eor	r25, r25
    19a4:	08 95       	ret
    19a6:	88 23       	and	r24, r24
    19a8:	51 f4       	brne	.+20     	; 0x19be <__fp_di2sf+0x40>
    19aa:	98 50       	subi	r25, 0x08	; 8
    19ac:	d2 f7       	brpl	.-12     	; 0x19a2 <__fp_di2sf+0x24>
    19ae:	87 2b       	or	r24, r23
    19b0:	76 2f       	mov	r23, r22
    19b2:	65 2f       	mov	r22, r21
    19b4:	54 2f       	mov	r21, r20
    19b6:	43 2f       	mov	r20, r19
    19b8:	32 2f       	mov	r19, r18
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	b1 f3       	breq	.-20     	; 0x19aa <__fp_di2sf+0x2c>
    19be:	12 16       	cp	r1, r18
    19c0:	13 06       	cpc	r1, r19
    19c2:	14 06       	cpc	r1, r20
    19c4:	44 0b       	sbc	r20, r20
    19c6:	88 23       	and	r24, r24
    19c8:	3a f0       	brmi	.+14     	; 0x19d8 <__fp_di2sf+0x5a>
    19ca:	9a 95       	dec	r25
    19cc:	44 0f       	add	r20, r20
    19ce:	55 1f       	adc	r21, r21
    19d0:	66 1f       	adc	r22, r22
    19d2:	77 1f       	adc	r23, r23
    19d4:	88 1f       	adc	r24, r24
    19d6:	ca f7       	brpl	.-14     	; 0x19ca <__fp_di2sf+0x4c>
    19d8:	55 23       	and	r21, r21
    19da:	4a f4       	brpl	.+18     	; 0x19ee <__fp_di2sf+0x70>
    19dc:	44 0f       	add	r20, r20
    19de:	55 1f       	adc	r21, r21
    19e0:	11 f4       	brne	.+4      	; 0x19e6 <__fp_di2sf+0x68>
    19e2:	60 ff       	sbrs	r22, 0
    19e4:	04 c0       	rjmp	.+8      	; 0x19ee <__fp_di2sf+0x70>
    19e6:	6f 5f       	subi	r22, 0xFF	; 255
    19e8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ea:	8f 4f       	sbci	r24, 0xFF	; 255
    19ec:	9f 4f       	sbci	r25, 0xFF	; 255
    19ee:	88 0f       	add	r24, r24
    19f0:	96 95       	lsr	r25
    19f2:	87 95       	ror	r24
    19f4:	97 f9       	bld	r25, 7
    19f6:	08 95       	ret

000019f8 <__fp_inf>:
    19f8:	97 f9       	bld	r25, 7
    19fa:	9f 67       	ori	r25, 0x7F	; 127
    19fc:	80 e8       	ldi	r24, 0x80	; 128
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	08 95       	ret

00001a04 <__fp_nan>:
    1a04:	9f ef       	ldi	r25, 0xFF	; 255
    1a06:	80 ec       	ldi	r24, 0xC0	; 192
    1a08:	08 95       	ret

00001a0a <__fp_negdi>:
    1a0a:	90 95       	com	r25
    1a0c:	80 95       	com	r24
    1a0e:	70 95       	com	r23
    1a10:	60 95       	com	r22
    1a12:	50 95       	com	r21
    1a14:	40 95       	com	r20
    1a16:	30 95       	com	r19
    1a18:	21 95       	neg	r18
    1a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1c:	4f 4f       	sbci	r20, 0xFF	; 255
    1a1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a20:	6f 4f       	sbci	r22, 0xFF	; 255
    1a22:	7f 4f       	sbci	r23, 0xFF	; 255
    1a24:	8f 4f       	sbci	r24, 0xFF	; 255
    1a26:	9f 4f       	sbci	r25, 0xFF	; 255
    1a28:	08 95       	ret

00001a2a <__fp_pscA>:
    1a2a:	00 24       	eor	r0, r0
    1a2c:	0a 94       	dec	r0
    1a2e:	16 16       	cp	r1, r22
    1a30:	17 06       	cpc	r1, r23
    1a32:	18 06       	cpc	r1, r24
    1a34:	09 06       	cpc	r0, r25
    1a36:	08 95       	ret

00001a38 <__fp_pscB>:
    1a38:	00 24       	eor	r0, r0
    1a3a:	0a 94       	dec	r0
    1a3c:	12 16       	cp	r1, r18
    1a3e:	13 06       	cpc	r1, r19
    1a40:	14 06       	cpc	r1, r20
    1a42:	05 06       	cpc	r0, r21
    1a44:	08 95       	ret

00001a46 <__fp_round>:
    1a46:	09 2e       	mov	r0, r25
    1a48:	03 94       	inc	r0
    1a4a:	00 0c       	add	r0, r0
    1a4c:	11 f4       	brne	.+4      	; 0x1a52 <__fp_round+0xc>
    1a4e:	88 23       	and	r24, r24
    1a50:	52 f0       	brmi	.+20     	; 0x1a66 <__fp_round+0x20>
    1a52:	bb 0f       	add	r27, r27
    1a54:	40 f4       	brcc	.+16     	; 0x1a66 <__fp_round+0x20>
    1a56:	bf 2b       	or	r27, r31
    1a58:	11 f4       	brne	.+4      	; 0x1a5e <__fp_round+0x18>
    1a5a:	60 ff       	sbrs	r22, 0
    1a5c:	04 c0       	rjmp	.+8      	; 0x1a66 <__fp_round+0x20>
    1a5e:	6f 5f       	subi	r22, 0xFF	; 255
    1a60:	7f 4f       	sbci	r23, 0xFF	; 255
    1a62:	8f 4f       	sbci	r24, 0xFF	; 255
    1a64:	9f 4f       	sbci	r25, 0xFF	; 255
    1a66:	08 95       	ret

00001a68 <__fp_split3>:
    1a68:	57 fd       	sbrc	r21, 7
    1a6a:	90 58       	subi	r25, 0x80	; 128
    1a6c:	44 0f       	add	r20, r20
    1a6e:	55 1f       	adc	r21, r21
    1a70:	59 f0       	breq	.+22     	; 0x1a88 <__fp_splitA+0x10>
    1a72:	5f 3f       	cpi	r21, 0xFF	; 255
    1a74:	71 f0       	breq	.+28     	; 0x1a92 <__fp_splitA+0x1a>
    1a76:	47 95       	ror	r20

00001a78 <__fp_splitA>:
    1a78:	88 0f       	add	r24, r24
    1a7a:	97 fb       	bst	r25, 7
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	61 f0       	breq	.+24     	; 0x1a98 <__fp_splitA+0x20>
    1a80:	9f 3f       	cpi	r25, 0xFF	; 255
    1a82:	79 f0       	breq	.+30     	; 0x1aa2 <__fp_splitA+0x2a>
    1a84:	87 95       	ror	r24
    1a86:	08 95       	ret
    1a88:	12 16       	cp	r1, r18
    1a8a:	13 06       	cpc	r1, r19
    1a8c:	14 06       	cpc	r1, r20
    1a8e:	55 1f       	adc	r21, r21
    1a90:	f2 cf       	rjmp	.-28     	; 0x1a76 <__fp_split3+0xe>
    1a92:	46 95       	lsr	r20
    1a94:	f1 df       	rcall	.-30     	; 0x1a78 <__fp_splitA>
    1a96:	08 c0       	rjmp	.+16     	; 0x1aa8 <__fp_splitA+0x30>
    1a98:	16 16       	cp	r1, r22
    1a9a:	17 06       	cpc	r1, r23
    1a9c:	18 06       	cpc	r1, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	f1 cf       	rjmp	.-30     	; 0x1a84 <__fp_splitA+0xc>
    1aa2:	86 95       	lsr	r24
    1aa4:	71 05       	cpc	r23, r1
    1aa6:	61 05       	cpc	r22, r1
    1aa8:	08 94       	sec
    1aaa:	08 95       	ret

00001aac <__fp_zero>:
    1aac:	e8 94       	clt

00001aae <__fp_szero>:
    1aae:	bb 27       	eor	r27, r27
    1ab0:	66 27       	eor	r22, r22
    1ab2:	77 27       	eor	r23, r23
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	97 f9       	bld	r25, 7
    1ab8:	08 95       	ret

00001aba <__mulsf3>:
    1aba:	0b d0       	rcall	.+22     	; 0x1ad2 <__mulsf3x>
    1abc:	c4 cf       	rjmp	.-120    	; 0x1a46 <__fp_round>
    1abe:	b5 df       	rcall	.-150    	; 0x1a2a <__fp_pscA>
    1ac0:	28 f0       	brcs	.+10     	; 0x1acc <__mulsf3+0x12>
    1ac2:	ba df       	rcall	.-140    	; 0x1a38 <__fp_pscB>
    1ac4:	18 f0       	brcs	.+6      	; 0x1acc <__mulsf3+0x12>
    1ac6:	95 23       	and	r25, r21
    1ac8:	09 f0       	breq	.+2      	; 0x1acc <__mulsf3+0x12>
    1aca:	96 cf       	rjmp	.-212    	; 0x19f8 <__fp_inf>
    1acc:	9b cf       	rjmp	.-202    	; 0x1a04 <__fp_nan>
    1ace:	11 24       	eor	r1, r1
    1ad0:	ee cf       	rjmp	.-36     	; 0x1aae <__fp_szero>

00001ad2 <__mulsf3x>:
    1ad2:	ca df       	rcall	.-108    	; 0x1a68 <__fp_split3>
    1ad4:	a0 f3       	brcs	.-24     	; 0x1abe <__mulsf3+0x4>

00001ad6 <__mulsf3_pse>:
    1ad6:	95 9f       	mul	r25, r21
    1ad8:	d1 f3       	breq	.-12     	; 0x1ace <__mulsf3+0x14>
    1ada:	95 0f       	add	r25, r21
    1adc:	50 e0       	ldi	r21, 0x00	; 0
    1ade:	55 1f       	adc	r21, r21
    1ae0:	62 9f       	mul	r22, r18
    1ae2:	f0 01       	movw	r30, r0
    1ae4:	72 9f       	mul	r23, r18
    1ae6:	bb 27       	eor	r27, r27
    1ae8:	f0 0d       	add	r31, r0
    1aea:	b1 1d       	adc	r27, r1
    1aec:	63 9f       	mul	r22, r19
    1aee:	aa 27       	eor	r26, r26
    1af0:	f0 0d       	add	r31, r0
    1af2:	b1 1d       	adc	r27, r1
    1af4:	aa 1f       	adc	r26, r26
    1af6:	64 9f       	mul	r22, r20
    1af8:	66 27       	eor	r22, r22
    1afa:	b0 0d       	add	r27, r0
    1afc:	a1 1d       	adc	r26, r1
    1afe:	66 1f       	adc	r22, r22
    1b00:	82 9f       	mul	r24, r18
    1b02:	22 27       	eor	r18, r18
    1b04:	b0 0d       	add	r27, r0
    1b06:	a1 1d       	adc	r26, r1
    1b08:	62 1f       	adc	r22, r18
    1b0a:	73 9f       	mul	r23, r19
    1b0c:	b0 0d       	add	r27, r0
    1b0e:	a1 1d       	adc	r26, r1
    1b10:	62 1f       	adc	r22, r18
    1b12:	83 9f       	mul	r24, r19
    1b14:	a0 0d       	add	r26, r0
    1b16:	61 1d       	adc	r22, r1
    1b18:	22 1f       	adc	r18, r18
    1b1a:	74 9f       	mul	r23, r20
    1b1c:	33 27       	eor	r19, r19
    1b1e:	a0 0d       	add	r26, r0
    1b20:	61 1d       	adc	r22, r1
    1b22:	23 1f       	adc	r18, r19
    1b24:	84 9f       	mul	r24, r20
    1b26:	60 0d       	add	r22, r0
    1b28:	21 1d       	adc	r18, r1
    1b2a:	82 2f       	mov	r24, r18
    1b2c:	76 2f       	mov	r23, r22
    1b2e:	6a 2f       	mov	r22, r26
    1b30:	11 24       	eor	r1, r1
    1b32:	9f 57       	subi	r25, 0x7F	; 127
    1b34:	50 40       	sbci	r21, 0x00	; 0
    1b36:	8a f0       	brmi	.+34     	; 0x1b5a <__mulsf3_pse+0x84>
    1b38:	e1 f0       	breq	.+56     	; 0x1b72 <__mulsf3_pse+0x9c>
    1b3a:	88 23       	and	r24, r24
    1b3c:	4a f0       	brmi	.+18     	; 0x1b50 <__mulsf3_pse+0x7a>
    1b3e:	ee 0f       	add	r30, r30
    1b40:	ff 1f       	adc	r31, r31
    1b42:	bb 1f       	adc	r27, r27
    1b44:	66 1f       	adc	r22, r22
    1b46:	77 1f       	adc	r23, r23
    1b48:	88 1f       	adc	r24, r24
    1b4a:	91 50       	subi	r25, 0x01	; 1
    1b4c:	50 40       	sbci	r21, 0x00	; 0
    1b4e:	a9 f7       	brne	.-22     	; 0x1b3a <__mulsf3_pse+0x64>
    1b50:	9e 3f       	cpi	r25, 0xFE	; 254
    1b52:	51 05       	cpc	r21, r1
    1b54:	70 f0       	brcs	.+28     	; 0x1b72 <__mulsf3_pse+0x9c>
    1b56:	50 cf       	rjmp	.-352    	; 0x19f8 <__fp_inf>
    1b58:	aa cf       	rjmp	.-172    	; 0x1aae <__fp_szero>
    1b5a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b5c:	ec f3       	brlt	.-6      	; 0x1b58 <__mulsf3_pse+0x82>
    1b5e:	98 3e       	cpi	r25, 0xE8	; 232
    1b60:	dc f3       	brlt	.-10     	; 0x1b58 <__mulsf3_pse+0x82>
    1b62:	86 95       	lsr	r24
    1b64:	77 95       	ror	r23
    1b66:	67 95       	ror	r22
    1b68:	b7 95       	ror	r27
    1b6a:	f7 95       	ror	r31
    1b6c:	e7 95       	ror	r30
    1b6e:	9f 5f       	subi	r25, 0xFF	; 255
    1b70:	c1 f7       	brne	.-16     	; 0x1b62 <__mulsf3_pse+0x8c>
    1b72:	fe 2b       	or	r31, r30
    1b74:	88 0f       	add	r24, r24
    1b76:	91 1d       	adc	r25, r1
    1b78:	96 95       	lsr	r25
    1b7a:	87 95       	ror	r24
    1b7c:	97 f9       	bld	r25, 7
    1b7e:	08 95       	ret

00001b80 <sprintf>:
    1b80:	ae e0       	ldi	r26, 0x0E	; 14
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e6 ec       	ldi	r30, 0xC6	; 198
    1b86:	fd e0       	ldi	r31, 0x0D	; 13
    1b88:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__prologue_saves__+0x1c>
    1b8c:	0d 89       	ldd	r16, Y+21	; 0x15
    1b8e:	1e 89       	ldd	r17, Y+22	; 0x16
    1b90:	86 e0       	ldi	r24, 0x06	; 6
    1b92:	8c 83       	std	Y+4, r24	; 0x04
    1b94:	1a 83       	std	Y+2, r17	; 0x02
    1b96:	09 83       	std	Y+1, r16	; 0x01
    1b98:	8f ef       	ldi	r24, 0xFF	; 255
    1b9a:	9f e7       	ldi	r25, 0x7F	; 127
    1b9c:	9e 83       	std	Y+6, r25	; 0x06
    1b9e:	8d 83       	std	Y+5, r24	; 0x05
    1ba0:	ae 01       	movw	r20, r28
    1ba2:	47 5e       	subi	r20, 0xE7	; 231
    1ba4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba6:	ce 01       	movw	r24, r28
    1ba8:	01 96       	adiw	r24, 0x01	; 1
    1baa:	6f 89       	ldd	r22, Y+23	; 0x17
    1bac:	78 8d       	ldd	r23, Y+24	; 0x18
    1bae:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <vfprintf>
    1bb2:	ef 81       	ldd	r30, Y+7	; 0x07
    1bb4:	f8 85       	ldd	r31, Y+8	; 0x08
    1bb6:	e0 0f       	add	r30, r16
    1bb8:	f1 1f       	adc	r31, r17
    1bba:	10 82       	st	Z, r1
    1bbc:	2e 96       	adiw	r28, 0x0e	; 14
    1bbe:	e4 e0       	ldi	r30, 0x04	; 4
    1bc0:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__epilogue_restores__+0x1c>

00001bc4 <vfprintf>:
    1bc4:	ad e0       	ldi	r26, 0x0D	; 13
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e8 ee       	ldi	r30, 0xE8	; 232
    1bca:	fd e0       	ldi	r31, 0x0D	; 13
    1bcc:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__prologue_saves__>
    1bd0:	3c 01       	movw	r6, r24
    1bd2:	7d 87       	std	Y+13, r23	; 0x0d
    1bd4:	6c 87       	std	Y+12, r22	; 0x0c
    1bd6:	5a 01       	movw	r10, r20
    1bd8:	fc 01       	movw	r30, r24
    1bda:	17 82       	std	Z+7, r1	; 0x07
    1bdc:	16 82       	std	Z+6, r1	; 0x06
    1bde:	83 81       	ldd	r24, Z+3	; 0x03
    1be0:	81 ff       	sbrs	r24, 1
    1be2:	c8 c1       	rjmp	.+912    	; 0x1f74 <vfprintf+0x3b0>
    1be4:	2e 01       	movw	r4, r28
    1be6:	08 94       	sec
    1be8:	41 1c       	adc	r4, r1
    1bea:	51 1c       	adc	r5, r1
    1bec:	f3 01       	movw	r30, r6
    1bee:	93 81       	ldd	r25, Z+3	; 0x03
    1bf0:	ec 85       	ldd	r30, Y+12	; 0x0c
    1bf2:	fd 85       	ldd	r31, Y+13	; 0x0d
    1bf4:	93 fd       	sbrc	r25, 3
    1bf6:	85 91       	lpm	r24, Z+
    1bf8:	93 ff       	sbrs	r25, 3
    1bfa:	81 91       	ld	r24, Z+
    1bfc:	fd 87       	std	Y+13, r31	; 0x0d
    1bfe:	ec 87       	std	Y+12, r30	; 0x0c
    1c00:	88 23       	and	r24, r24
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <vfprintf+0x42>
    1c04:	b3 c1       	rjmp	.+870    	; 0x1f6c <vfprintf+0x3a8>
    1c06:	85 32       	cpi	r24, 0x25	; 37
    1c08:	41 f4       	brne	.+16     	; 0x1c1a <vfprintf+0x56>
    1c0a:	93 fd       	sbrc	r25, 3
    1c0c:	85 91       	lpm	r24, Z+
    1c0e:	93 ff       	sbrs	r25, 3
    1c10:	81 91       	ld	r24, Z+
    1c12:	fd 87       	std	Y+13, r31	; 0x0d
    1c14:	ec 87       	std	Y+12, r30	; 0x0c
    1c16:	85 32       	cpi	r24, 0x25	; 37
    1c18:	29 f4       	brne	.+10     	; 0x1c24 <vfprintf+0x60>
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	b3 01       	movw	r22, r6
    1c1e:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <fputc>
    1c22:	e4 cf       	rjmp	.-56     	; 0x1bec <vfprintf+0x28>
    1c24:	ff 24       	eor	r15, r15
    1c26:	ee 24       	eor	r14, r14
    1c28:	10 e0       	ldi	r17, 0x00	; 0
    1c2a:	10 32       	cpi	r17, 0x20	; 32
    1c2c:	b0 f4       	brcc	.+44     	; 0x1c5a <vfprintf+0x96>
    1c2e:	8b 32       	cpi	r24, 0x2B	; 43
    1c30:	69 f0       	breq	.+26     	; 0x1c4c <vfprintf+0x88>
    1c32:	8c 32       	cpi	r24, 0x2C	; 44
    1c34:	28 f4       	brcc	.+10     	; 0x1c40 <vfprintf+0x7c>
    1c36:	80 32       	cpi	r24, 0x20	; 32
    1c38:	51 f0       	breq	.+20     	; 0x1c4e <vfprintf+0x8a>
    1c3a:	83 32       	cpi	r24, 0x23	; 35
    1c3c:	71 f4       	brne	.+28     	; 0x1c5a <vfprintf+0x96>
    1c3e:	0b c0       	rjmp	.+22     	; 0x1c56 <vfprintf+0x92>
    1c40:	8d 32       	cpi	r24, 0x2D	; 45
    1c42:	39 f0       	breq	.+14     	; 0x1c52 <vfprintf+0x8e>
    1c44:	80 33       	cpi	r24, 0x30	; 48
    1c46:	49 f4       	brne	.+18     	; 0x1c5a <vfprintf+0x96>
    1c48:	11 60       	ori	r17, 0x01	; 1
    1c4a:	2c c0       	rjmp	.+88     	; 0x1ca4 <vfprintf+0xe0>
    1c4c:	12 60       	ori	r17, 0x02	; 2
    1c4e:	14 60       	ori	r17, 0x04	; 4
    1c50:	29 c0       	rjmp	.+82     	; 0x1ca4 <vfprintf+0xe0>
    1c52:	18 60       	ori	r17, 0x08	; 8
    1c54:	27 c0       	rjmp	.+78     	; 0x1ca4 <vfprintf+0xe0>
    1c56:	10 61       	ori	r17, 0x10	; 16
    1c58:	25 c0       	rjmp	.+74     	; 0x1ca4 <vfprintf+0xe0>
    1c5a:	17 fd       	sbrc	r17, 7
    1c5c:	2e c0       	rjmp	.+92     	; 0x1cba <vfprintf+0xf6>
    1c5e:	28 2f       	mov	r18, r24
    1c60:	20 53       	subi	r18, 0x30	; 48
    1c62:	2a 30       	cpi	r18, 0x0A	; 10
    1c64:	98 f4       	brcc	.+38     	; 0x1c8c <vfprintf+0xc8>
    1c66:	16 ff       	sbrs	r17, 6
    1c68:	08 c0       	rjmp	.+16     	; 0x1c7a <vfprintf+0xb6>
    1c6a:	8f 2d       	mov	r24, r15
    1c6c:	88 0f       	add	r24, r24
    1c6e:	f8 2e       	mov	r15, r24
    1c70:	ff 0c       	add	r15, r15
    1c72:	ff 0c       	add	r15, r15
    1c74:	f8 0e       	add	r15, r24
    1c76:	f2 0e       	add	r15, r18
    1c78:	15 c0       	rjmp	.+42     	; 0x1ca4 <vfprintf+0xe0>
    1c7a:	8e 2d       	mov	r24, r14
    1c7c:	88 0f       	add	r24, r24
    1c7e:	e8 2e       	mov	r14, r24
    1c80:	ee 0c       	add	r14, r14
    1c82:	ee 0c       	add	r14, r14
    1c84:	e8 0e       	add	r14, r24
    1c86:	e2 0e       	add	r14, r18
    1c88:	10 62       	ori	r17, 0x20	; 32
    1c8a:	0c c0       	rjmp	.+24     	; 0x1ca4 <vfprintf+0xe0>
    1c8c:	8e 32       	cpi	r24, 0x2E	; 46
    1c8e:	21 f4       	brne	.+8      	; 0x1c98 <vfprintf+0xd4>
    1c90:	16 fd       	sbrc	r17, 6
    1c92:	6c c1       	rjmp	.+728    	; 0x1f6c <vfprintf+0x3a8>
    1c94:	10 64       	ori	r17, 0x40	; 64
    1c96:	06 c0       	rjmp	.+12     	; 0x1ca4 <vfprintf+0xe0>
    1c98:	8c 36       	cpi	r24, 0x6C	; 108
    1c9a:	11 f4       	brne	.+4      	; 0x1ca0 <vfprintf+0xdc>
    1c9c:	10 68       	ori	r17, 0x80	; 128
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <vfprintf+0xe0>
    1ca0:	88 36       	cpi	r24, 0x68	; 104
    1ca2:	59 f4       	brne	.+22     	; 0x1cba <vfprintf+0xf6>
    1ca4:	ec 85       	ldd	r30, Y+12	; 0x0c
    1ca6:	fd 85       	ldd	r31, Y+13	; 0x0d
    1ca8:	93 fd       	sbrc	r25, 3
    1caa:	85 91       	lpm	r24, Z+
    1cac:	93 ff       	sbrs	r25, 3
    1cae:	81 91       	ld	r24, Z+
    1cb0:	fd 87       	std	Y+13, r31	; 0x0d
    1cb2:	ec 87       	std	Y+12, r30	; 0x0c
    1cb4:	88 23       	and	r24, r24
    1cb6:	09 f0       	breq	.+2      	; 0x1cba <vfprintf+0xf6>
    1cb8:	b8 cf       	rjmp	.-144    	; 0x1c2a <vfprintf+0x66>
    1cba:	98 2f       	mov	r25, r24
    1cbc:	95 54       	subi	r25, 0x45	; 69
    1cbe:	93 30       	cpi	r25, 0x03	; 3
    1cc0:	18 f0       	brcs	.+6      	; 0x1cc8 <vfprintf+0x104>
    1cc2:	90 52       	subi	r25, 0x20	; 32
    1cc4:	93 30       	cpi	r25, 0x03	; 3
    1cc6:	38 f4       	brcc	.+14     	; 0x1cd6 <vfprintf+0x112>
    1cc8:	24 e0       	ldi	r18, 0x04	; 4
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	a2 0e       	add	r10, r18
    1cce:	b3 1e       	adc	r11, r19
    1cd0:	3f e3       	ldi	r19, 0x3F	; 63
    1cd2:	39 83       	std	Y+1, r19	; 0x01
    1cd4:	0f c0       	rjmp	.+30     	; 0x1cf4 <vfprintf+0x130>
    1cd6:	83 36       	cpi	r24, 0x63	; 99
    1cd8:	31 f0       	breq	.+12     	; 0x1ce6 <vfprintf+0x122>
    1cda:	83 37       	cpi	r24, 0x73	; 115
    1cdc:	81 f0       	breq	.+32     	; 0x1cfe <vfprintf+0x13a>
    1cde:	83 35       	cpi	r24, 0x53	; 83
    1ce0:	09 f0       	breq	.+2      	; 0x1ce4 <vfprintf+0x120>
    1ce2:	5a c0       	rjmp	.+180    	; 0x1d98 <vfprintf+0x1d4>
    1ce4:	22 c0       	rjmp	.+68     	; 0x1d2a <vfprintf+0x166>
    1ce6:	f5 01       	movw	r30, r10
    1ce8:	80 81       	ld	r24, Z
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	22 e0       	ldi	r18, 0x02	; 2
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	a2 0e       	add	r10, r18
    1cf2:	b3 1e       	adc	r11, r19
    1cf4:	21 e0       	ldi	r18, 0x01	; 1
    1cf6:	c2 2e       	mov	r12, r18
    1cf8:	d1 2c       	mov	r13, r1
    1cfa:	42 01       	movw	r8, r4
    1cfc:	14 c0       	rjmp	.+40     	; 0x1d26 <vfprintf+0x162>
    1cfe:	92 e0       	ldi	r25, 0x02	; 2
    1d00:	29 2e       	mov	r2, r25
    1d02:	31 2c       	mov	r3, r1
    1d04:	2a 0c       	add	r2, r10
    1d06:	3b 1c       	adc	r3, r11
    1d08:	f5 01       	movw	r30, r10
    1d0a:	80 80       	ld	r8, Z
    1d0c:	91 80       	ldd	r9, Z+1	; 0x01
    1d0e:	16 ff       	sbrs	r17, 6
    1d10:	03 c0       	rjmp	.+6      	; 0x1d18 <vfprintf+0x154>
    1d12:	6f 2d       	mov	r22, r15
    1d14:	70 e0       	ldi	r23, 0x00	; 0
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <vfprintf+0x158>
    1d18:	6f ef       	ldi	r22, 0xFF	; 255
    1d1a:	7f ef       	ldi	r23, 0xFF	; 255
    1d1c:	c4 01       	movw	r24, r8
    1d1e:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <strnlen>
    1d22:	6c 01       	movw	r12, r24
    1d24:	51 01       	movw	r10, r2
    1d26:	1f 77       	andi	r17, 0x7F	; 127
    1d28:	15 c0       	rjmp	.+42     	; 0x1d54 <vfprintf+0x190>
    1d2a:	82 e0       	ldi	r24, 0x02	; 2
    1d2c:	28 2e       	mov	r2, r24
    1d2e:	31 2c       	mov	r3, r1
    1d30:	2a 0c       	add	r2, r10
    1d32:	3b 1c       	adc	r3, r11
    1d34:	f5 01       	movw	r30, r10
    1d36:	80 80       	ld	r8, Z
    1d38:	91 80       	ldd	r9, Z+1	; 0x01
    1d3a:	16 ff       	sbrs	r17, 6
    1d3c:	03 c0       	rjmp	.+6      	; 0x1d44 <vfprintf+0x180>
    1d3e:	6f 2d       	mov	r22, r15
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <vfprintf+0x184>
    1d44:	6f ef       	ldi	r22, 0xFF	; 255
    1d46:	7f ef       	ldi	r23, 0xFF	; 255
    1d48:	c4 01       	movw	r24, r8
    1d4a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <strnlen_P>
    1d4e:	6c 01       	movw	r12, r24
    1d50:	10 68       	ori	r17, 0x80	; 128
    1d52:	51 01       	movw	r10, r2
    1d54:	13 fd       	sbrc	r17, 3
    1d56:	1c c0       	rjmp	.+56     	; 0x1d90 <vfprintf+0x1cc>
    1d58:	06 c0       	rjmp	.+12     	; 0x1d66 <vfprintf+0x1a2>
    1d5a:	80 e2       	ldi	r24, 0x20	; 32
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	b3 01       	movw	r22, r6
    1d60:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <fputc>
    1d64:	ea 94       	dec	r14
    1d66:	8e 2d       	mov	r24, r14
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	c8 16       	cp	r12, r24
    1d6c:	d9 06       	cpc	r13, r25
    1d6e:	a8 f3       	brcs	.-22     	; 0x1d5a <vfprintf+0x196>
    1d70:	0f c0       	rjmp	.+30     	; 0x1d90 <vfprintf+0x1cc>
    1d72:	f4 01       	movw	r30, r8
    1d74:	17 fd       	sbrc	r17, 7
    1d76:	85 91       	lpm	r24, Z+
    1d78:	17 ff       	sbrs	r17, 7
    1d7a:	81 91       	ld	r24, Z+
    1d7c:	4f 01       	movw	r8, r30
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	b3 01       	movw	r22, r6
    1d82:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <fputc>
    1d86:	e1 10       	cpse	r14, r1
    1d88:	ea 94       	dec	r14
    1d8a:	08 94       	sec
    1d8c:	c1 08       	sbc	r12, r1
    1d8e:	d1 08       	sbc	r13, r1
    1d90:	c1 14       	cp	r12, r1
    1d92:	d1 04       	cpc	r13, r1
    1d94:	71 f7       	brne	.-36     	; 0x1d72 <vfprintf+0x1ae>
    1d96:	e7 c0       	rjmp	.+462    	; 0x1f66 <vfprintf+0x3a2>
    1d98:	84 36       	cpi	r24, 0x64	; 100
    1d9a:	11 f0       	breq	.+4      	; 0x1da0 <vfprintf+0x1dc>
    1d9c:	89 36       	cpi	r24, 0x69	; 105
    1d9e:	51 f5       	brne	.+84     	; 0x1df4 <vfprintf+0x230>
    1da0:	f5 01       	movw	r30, r10
    1da2:	17 ff       	sbrs	r17, 7
    1da4:	07 c0       	rjmp	.+14     	; 0x1db4 <vfprintf+0x1f0>
    1da6:	80 81       	ld	r24, Z
    1da8:	91 81       	ldd	r25, Z+1	; 0x01
    1daa:	a2 81       	ldd	r26, Z+2	; 0x02
    1dac:	b3 81       	ldd	r27, Z+3	; 0x03
    1dae:	24 e0       	ldi	r18, 0x04	; 4
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	08 c0       	rjmp	.+16     	; 0x1dc4 <vfprintf+0x200>
    1db4:	80 81       	ld	r24, Z
    1db6:	91 81       	ldd	r25, Z+1	; 0x01
    1db8:	aa 27       	eor	r26, r26
    1dba:	97 fd       	sbrc	r25, 7
    1dbc:	a0 95       	com	r26
    1dbe:	ba 2f       	mov	r27, r26
    1dc0:	22 e0       	ldi	r18, 0x02	; 2
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	a2 0e       	add	r10, r18
    1dc6:	b3 1e       	adc	r11, r19
    1dc8:	01 2f       	mov	r16, r17
    1dca:	0f 76       	andi	r16, 0x6F	; 111
    1dcc:	b7 ff       	sbrs	r27, 7
    1dce:	08 c0       	rjmp	.+16     	; 0x1de0 <vfprintf+0x21c>
    1dd0:	b0 95       	com	r27
    1dd2:	a0 95       	com	r26
    1dd4:	90 95       	com	r25
    1dd6:	81 95       	neg	r24
    1dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dda:	af 4f       	sbci	r26, 0xFF	; 255
    1ddc:	bf 4f       	sbci	r27, 0xFF	; 255
    1dde:	00 68       	ori	r16, 0x80	; 128
    1de0:	bc 01       	movw	r22, r24
    1de2:	cd 01       	movw	r24, r26
    1de4:	a2 01       	movw	r20, r4
    1de6:	2a e0       	ldi	r18, 0x0A	; 10
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	0e 94 02 10 	call	0x2004	; 0x2004 <__ultoa_invert>
    1dee:	d8 2e       	mov	r13, r24
    1df0:	d4 18       	sub	r13, r4
    1df2:	3f c0       	rjmp	.+126    	; 0x1e72 <vfprintf+0x2ae>
    1df4:	85 37       	cpi	r24, 0x75	; 117
    1df6:	21 f4       	brne	.+8      	; 0x1e00 <vfprintf+0x23c>
    1df8:	1f 7e       	andi	r17, 0xEF	; 239
    1dfa:	2a e0       	ldi	r18, 0x0A	; 10
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	20 c0       	rjmp	.+64     	; 0x1e40 <vfprintf+0x27c>
    1e00:	19 7f       	andi	r17, 0xF9	; 249
    1e02:	8f 36       	cpi	r24, 0x6F	; 111
    1e04:	a9 f0       	breq	.+42     	; 0x1e30 <vfprintf+0x26c>
    1e06:	80 37       	cpi	r24, 0x70	; 112
    1e08:	20 f4       	brcc	.+8      	; 0x1e12 <vfprintf+0x24e>
    1e0a:	88 35       	cpi	r24, 0x58	; 88
    1e0c:	09 f0       	breq	.+2      	; 0x1e10 <vfprintf+0x24c>
    1e0e:	ae c0       	rjmp	.+348    	; 0x1f6c <vfprintf+0x3a8>
    1e10:	0b c0       	rjmp	.+22     	; 0x1e28 <vfprintf+0x264>
    1e12:	80 37       	cpi	r24, 0x70	; 112
    1e14:	21 f0       	breq	.+8      	; 0x1e1e <vfprintf+0x25a>
    1e16:	88 37       	cpi	r24, 0x78	; 120
    1e18:	09 f0       	breq	.+2      	; 0x1e1c <vfprintf+0x258>
    1e1a:	a8 c0       	rjmp	.+336    	; 0x1f6c <vfprintf+0x3a8>
    1e1c:	01 c0       	rjmp	.+2      	; 0x1e20 <vfprintf+0x25c>
    1e1e:	10 61       	ori	r17, 0x10	; 16
    1e20:	14 ff       	sbrs	r17, 4
    1e22:	09 c0       	rjmp	.+18     	; 0x1e36 <vfprintf+0x272>
    1e24:	14 60       	ori	r17, 0x04	; 4
    1e26:	07 c0       	rjmp	.+14     	; 0x1e36 <vfprintf+0x272>
    1e28:	14 ff       	sbrs	r17, 4
    1e2a:	08 c0       	rjmp	.+16     	; 0x1e3c <vfprintf+0x278>
    1e2c:	16 60       	ori	r17, 0x06	; 6
    1e2e:	06 c0       	rjmp	.+12     	; 0x1e3c <vfprintf+0x278>
    1e30:	28 e0       	ldi	r18, 0x08	; 8
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	05 c0       	rjmp	.+10     	; 0x1e40 <vfprintf+0x27c>
    1e36:	20 e1       	ldi	r18, 0x10	; 16
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <vfprintf+0x27c>
    1e3c:	20 e1       	ldi	r18, 0x10	; 16
    1e3e:	32 e0       	ldi	r19, 0x02	; 2
    1e40:	f5 01       	movw	r30, r10
    1e42:	17 ff       	sbrs	r17, 7
    1e44:	07 c0       	rjmp	.+14     	; 0x1e54 <vfprintf+0x290>
    1e46:	60 81       	ld	r22, Z
    1e48:	71 81       	ldd	r23, Z+1	; 0x01
    1e4a:	82 81       	ldd	r24, Z+2	; 0x02
    1e4c:	93 81       	ldd	r25, Z+3	; 0x03
    1e4e:	44 e0       	ldi	r20, 0x04	; 4
    1e50:	50 e0       	ldi	r21, 0x00	; 0
    1e52:	06 c0       	rjmp	.+12     	; 0x1e60 <vfprintf+0x29c>
    1e54:	60 81       	ld	r22, Z
    1e56:	71 81       	ldd	r23, Z+1	; 0x01
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	42 e0       	ldi	r20, 0x02	; 2
    1e5e:	50 e0       	ldi	r21, 0x00	; 0
    1e60:	a4 0e       	add	r10, r20
    1e62:	b5 1e       	adc	r11, r21
    1e64:	a2 01       	movw	r20, r4
    1e66:	0e 94 02 10 	call	0x2004	; 0x2004 <__ultoa_invert>
    1e6a:	d8 2e       	mov	r13, r24
    1e6c:	d4 18       	sub	r13, r4
    1e6e:	01 2f       	mov	r16, r17
    1e70:	0f 77       	andi	r16, 0x7F	; 127
    1e72:	06 ff       	sbrs	r16, 6
    1e74:	09 c0       	rjmp	.+18     	; 0x1e88 <vfprintf+0x2c4>
    1e76:	0e 7f       	andi	r16, 0xFE	; 254
    1e78:	df 14       	cp	r13, r15
    1e7a:	30 f4       	brcc	.+12     	; 0x1e88 <vfprintf+0x2c4>
    1e7c:	04 ff       	sbrs	r16, 4
    1e7e:	06 c0       	rjmp	.+12     	; 0x1e8c <vfprintf+0x2c8>
    1e80:	02 fd       	sbrc	r16, 2
    1e82:	04 c0       	rjmp	.+8      	; 0x1e8c <vfprintf+0x2c8>
    1e84:	0f 7e       	andi	r16, 0xEF	; 239
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <vfprintf+0x2c8>
    1e88:	1d 2d       	mov	r17, r13
    1e8a:	01 c0       	rjmp	.+2      	; 0x1e8e <vfprintf+0x2ca>
    1e8c:	1f 2d       	mov	r17, r15
    1e8e:	80 2f       	mov	r24, r16
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	04 ff       	sbrs	r16, 4
    1e94:	0c c0       	rjmp	.+24     	; 0x1eae <vfprintf+0x2ea>
    1e96:	fe 01       	movw	r30, r28
    1e98:	ed 0d       	add	r30, r13
    1e9a:	f1 1d       	adc	r31, r1
    1e9c:	20 81       	ld	r18, Z
    1e9e:	20 33       	cpi	r18, 0x30	; 48
    1ea0:	11 f4       	brne	.+4      	; 0x1ea6 <vfprintf+0x2e2>
    1ea2:	09 7e       	andi	r16, 0xE9	; 233
    1ea4:	09 c0       	rjmp	.+18     	; 0x1eb8 <vfprintf+0x2f4>
    1ea6:	02 ff       	sbrs	r16, 2
    1ea8:	06 c0       	rjmp	.+12     	; 0x1eb6 <vfprintf+0x2f2>
    1eaa:	1e 5f       	subi	r17, 0xFE	; 254
    1eac:	05 c0       	rjmp	.+10     	; 0x1eb8 <vfprintf+0x2f4>
    1eae:	86 78       	andi	r24, 0x86	; 134
    1eb0:	90 70       	andi	r25, 0x00	; 0
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	09 f0       	breq	.+2      	; 0x1eb8 <vfprintf+0x2f4>
    1eb6:	1f 5f       	subi	r17, 0xFF	; 255
    1eb8:	80 2e       	mov	r8, r16
    1eba:	99 24       	eor	r9, r9
    1ebc:	03 fd       	sbrc	r16, 3
    1ebe:	12 c0       	rjmp	.+36     	; 0x1ee4 <vfprintf+0x320>
    1ec0:	00 ff       	sbrs	r16, 0
    1ec2:	0d c0       	rjmp	.+26     	; 0x1ede <vfprintf+0x31a>
    1ec4:	fd 2c       	mov	r15, r13
    1ec6:	1e 15       	cp	r17, r14
    1ec8:	50 f4       	brcc	.+20     	; 0x1ede <vfprintf+0x31a>
    1eca:	fe 0c       	add	r15, r14
    1ecc:	f1 1a       	sub	r15, r17
    1ece:	1e 2d       	mov	r17, r14
    1ed0:	06 c0       	rjmp	.+12     	; 0x1ede <vfprintf+0x31a>
    1ed2:	80 e2       	ldi	r24, 0x20	; 32
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	b3 01       	movw	r22, r6
    1ed8:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <fputc>
    1edc:	1f 5f       	subi	r17, 0xFF	; 255
    1ede:	1e 15       	cp	r17, r14
    1ee0:	c0 f3       	brcs	.-16     	; 0x1ed2 <vfprintf+0x30e>
    1ee2:	04 c0       	rjmp	.+8      	; 0x1eec <vfprintf+0x328>
    1ee4:	1e 15       	cp	r17, r14
    1ee6:	10 f4       	brcc	.+4      	; 0x1eec <vfprintf+0x328>
    1ee8:	e1 1a       	sub	r14, r17
    1eea:	01 c0       	rjmp	.+2      	; 0x1eee <vfprintf+0x32a>
    1eec:	ee 24       	eor	r14, r14
    1eee:	84 fe       	sbrs	r8, 4
    1ef0:	0f c0       	rjmp	.+30     	; 0x1f10 <vfprintf+0x34c>
    1ef2:	80 e3       	ldi	r24, 0x30	; 48
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	b3 01       	movw	r22, r6
    1ef8:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <fputc>
    1efc:	82 fe       	sbrs	r8, 2
    1efe:	1f c0       	rjmp	.+62     	; 0x1f3e <vfprintf+0x37a>
    1f00:	81 fe       	sbrs	r8, 1
    1f02:	03 c0       	rjmp	.+6      	; 0x1f0a <vfprintf+0x346>
    1f04:	88 e5       	ldi	r24, 0x58	; 88
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	10 c0       	rjmp	.+32     	; 0x1f2a <vfprintf+0x366>
    1f0a:	88 e7       	ldi	r24, 0x78	; 120
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	0d c0       	rjmp	.+26     	; 0x1f2a <vfprintf+0x366>
    1f10:	c4 01       	movw	r24, r8
    1f12:	86 78       	andi	r24, 0x86	; 134
    1f14:	90 70       	andi	r25, 0x00	; 0
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	91 f0       	breq	.+36     	; 0x1f3e <vfprintf+0x37a>
    1f1a:	81 fc       	sbrc	r8, 1
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <vfprintf+0x35e>
    1f1e:	80 e2       	ldi	r24, 0x20	; 32
    1f20:	01 c0       	rjmp	.+2      	; 0x1f24 <vfprintf+0x360>
    1f22:	8b e2       	ldi	r24, 0x2B	; 43
    1f24:	07 fd       	sbrc	r16, 7
    1f26:	8d e2       	ldi	r24, 0x2D	; 45
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	b3 01       	movw	r22, r6
    1f2c:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <fputc>
    1f30:	06 c0       	rjmp	.+12     	; 0x1f3e <vfprintf+0x37a>
    1f32:	80 e3       	ldi	r24, 0x30	; 48
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	b3 01       	movw	r22, r6
    1f38:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <fputc>
    1f3c:	fa 94       	dec	r15
    1f3e:	df 14       	cp	r13, r15
    1f40:	c0 f3       	brcs	.-16     	; 0x1f32 <vfprintf+0x36e>
    1f42:	da 94       	dec	r13
    1f44:	f2 01       	movw	r30, r4
    1f46:	ed 0d       	add	r30, r13
    1f48:	f1 1d       	adc	r31, r1
    1f4a:	80 81       	ld	r24, Z
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	b3 01       	movw	r22, r6
    1f50:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <fputc>
    1f54:	dd 20       	and	r13, r13
    1f56:	a9 f7       	brne	.-22     	; 0x1f42 <vfprintf+0x37e>
    1f58:	06 c0       	rjmp	.+12     	; 0x1f66 <vfprintf+0x3a2>
    1f5a:	80 e2       	ldi	r24, 0x20	; 32
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	b3 01       	movw	r22, r6
    1f60:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <fputc>
    1f64:	ea 94       	dec	r14
    1f66:	ee 20       	and	r14, r14
    1f68:	c1 f7       	brne	.-16     	; 0x1f5a <vfprintf+0x396>
    1f6a:	40 ce       	rjmp	.-896    	; 0x1bec <vfprintf+0x28>
    1f6c:	f3 01       	movw	r30, r6
    1f6e:	86 81       	ldd	r24, Z+6	; 0x06
    1f70:	97 81       	ldd	r25, Z+7	; 0x07
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <vfprintf+0x3b4>
    1f74:	8f ef       	ldi	r24, 0xFF	; 255
    1f76:	9f ef       	ldi	r25, 0xFF	; 255
    1f78:	2d 96       	adiw	r28, 0x0d	; 13
    1f7a:	e2 e1       	ldi	r30, 0x12	; 18
    1f7c:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__epilogue_restores__>

00001f80 <strnlen_P>:
    1f80:	fc 01       	movw	r30, r24
    1f82:	05 90       	lpm	r0, Z+
    1f84:	61 50       	subi	r22, 0x01	; 1
    1f86:	70 40       	sbci	r23, 0x00	; 0
    1f88:	01 10       	cpse	r0, r1
    1f8a:	d8 f7       	brcc	.-10     	; 0x1f82 <strnlen_P+0x2>
    1f8c:	80 95       	com	r24
    1f8e:	90 95       	com	r25
    1f90:	8e 0f       	add	r24, r30
    1f92:	9f 1f       	adc	r25, r31
    1f94:	08 95       	ret

00001f96 <strnlen>:
    1f96:	fc 01       	movw	r30, r24
    1f98:	61 50       	subi	r22, 0x01	; 1
    1f9a:	70 40       	sbci	r23, 0x00	; 0
    1f9c:	01 90       	ld	r0, Z+
    1f9e:	01 10       	cpse	r0, r1
    1fa0:	d8 f7       	brcc	.-10     	; 0x1f98 <strnlen+0x2>
    1fa2:	80 95       	com	r24
    1fa4:	90 95       	com	r25
    1fa6:	8e 0f       	add	r24, r30
    1fa8:	9f 1f       	adc	r25, r31
    1faa:	08 95       	ret

00001fac <fputc>:
    1fac:	0f 93       	push	r16
    1fae:	1f 93       	push	r17
    1fb0:	cf 93       	push	r28
    1fb2:	df 93       	push	r29
    1fb4:	8c 01       	movw	r16, r24
    1fb6:	eb 01       	movw	r28, r22
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	81 ff       	sbrs	r24, 1
    1fbc:	1b c0       	rjmp	.+54     	; 0x1ff4 <fputc+0x48>
    1fbe:	82 ff       	sbrs	r24, 2
    1fc0:	0d c0       	rjmp	.+26     	; 0x1fdc <fputc+0x30>
    1fc2:	2e 81       	ldd	r18, Y+6	; 0x06
    1fc4:	3f 81       	ldd	r19, Y+7	; 0x07
    1fc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fca:	28 17       	cp	r18, r24
    1fcc:	39 07       	cpc	r19, r25
    1fce:	64 f4       	brge	.+24     	; 0x1fe8 <fputc+0x3c>
    1fd0:	e8 81       	ld	r30, Y
    1fd2:	f9 81       	ldd	r31, Y+1	; 0x01
    1fd4:	01 93       	st	Z+, r16
    1fd6:	f9 83       	std	Y+1, r31	; 0x01
    1fd8:	e8 83       	st	Y, r30
    1fda:	06 c0       	rjmp	.+12     	; 0x1fe8 <fputc+0x3c>
    1fdc:	e8 85       	ldd	r30, Y+8	; 0x08
    1fde:	f9 85       	ldd	r31, Y+9	; 0x09
    1fe0:	80 2f       	mov	r24, r16
    1fe2:	09 95       	icall
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	31 f4       	brne	.+12     	; 0x1ff4 <fputc+0x48>
    1fe8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fea:	9f 81       	ldd	r25, Y+7	; 0x07
    1fec:	01 96       	adiw	r24, 0x01	; 1
    1fee:	9f 83       	std	Y+7, r25	; 0x07
    1ff0:	8e 83       	std	Y+6, r24	; 0x06
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <fputc+0x4c>
    1ff4:	0f ef       	ldi	r16, 0xFF	; 255
    1ff6:	1f ef       	ldi	r17, 0xFF	; 255
    1ff8:	c8 01       	movw	r24, r16
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	1f 91       	pop	r17
    2000:	0f 91       	pop	r16
    2002:	08 95       	ret

00002004 <__ultoa_invert>:
    2004:	fa 01       	movw	r30, r20
    2006:	aa 27       	eor	r26, r26
    2008:	28 30       	cpi	r18, 0x08	; 8
    200a:	51 f1       	breq	.+84     	; 0x2060 <__ultoa_invert+0x5c>
    200c:	20 31       	cpi	r18, 0x10	; 16
    200e:	81 f1       	breq	.+96     	; 0x2070 <__ultoa_invert+0x6c>
    2010:	e8 94       	clt
    2012:	6f 93       	push	r22
    2014:	6e 7f       	andi	r22, 0xFE	; 254
    2016:	6e 5f       	subi	r22, 0xFE	; 254
    2018:	7f 4f       	sbci	r23, 0xFF	; 255
    201a:	8f 4f       	sbci	r24, 0xFF	; 255
    201c:	9f 4f       	sbci	r25, 0xFF	; 255
    201e:	af 4f       	sbci	r26, 0xFF	; 255
    2020:	b1 e0       	ldi	r27, 0x01	; 1
    2022:	3e d0       	rcall	.+124    	; 0x20a0 <__ultoa_invert+0x9c>
    2024:	b4 e0       	ldi	r27, 0x04	; 4
    2026:	3c d0       	rcall	.+120    	; 0x20a0 <__ultoa_invert+0x9c>
    2028:	67 0f       	add	r22, r23
    202a:	78 1f       	adc	r23, r24
    202c:	89 1f       	adc	r24, r25
    202e:	9a 1f       	adc	r25, r26
    2030:	a1 1d       	adc	r26, r1
    2032:	68 0f       	add	r22, r24
    2034:	79 1f       	adc	r23, r25
    2036:	8a 1f       	adc	r24, r26
    2038:	91 1d       	adc	r25, r1
    203a:	a1 1d       	adc	r26, r1
    203c:	6a 0f       	add	r22, r26
    203e:	71 1d       	adc	r23, r1
    2040:	81 1d       	adc	r24, r1
    2042:	91 1d       	adc	r25, r1
    2044:	a1 1d       	adc	r26, r1
    2046:	20 d0       	rcall	.+64     	; 0x2088 <__ultoa_invert+0x84>
    2048:	09 f4       	brne	.+2      	; 0x204c <__ultoa_invert+0x48>
    204a:	68 94       	set
    204c:	3f 91       	pop	r19
    204e:	2a e0       	ldi	r18, 0x0A	; 10
    2050:	26 9f       	mul	r18, r22
    2052:	11 24       	eor	r1, r1
    2054:	30 19       	sub	r19, r0
    2056:	30 5d       	subi	r19, 0xD0	; 208
    2058:	31 93       	st	Z+, r19
    205a:	de f6       	brtc	.-74     	; 0x2012 <__ultoa_invert+0xe>
    205c:	cf 01       	movw	r24, r30
    205e:	08 95       	ret
    2060:	46 2f       	mov	r20, r22
    2062:	47 70       	andi	r20, 0x07	; 7
    2064:	40 5d       	subi	r20, 0xD0	; 208
    2066:	41 93       	st	Z+, r20
    2068:	b3 e0       	ldi	r27, 0x03	; 3
    206a:	0f d0       	rcall	.+30     	; 0x208a <__ultoa_invert+0x86>
    206c:	c9 f7       	brne	.-14     	; 0x2060 <__ultoa_invert+0x5c>
    206e:	f6 cf       	rjmp	.-20     	; 0x205c <__ultoa_invert+0x58>
    2070:	46 2f       	mov	r20, r22
    2072:	4f 70       	andi	r20, 0x0F	; 15
    2074:	40 5d       	subi	r20, 0xD0	; 208
    2076:	4a 33       	cpi	r20, 0x3A	; 58
    2078:	18 f0       	brcs	.+6      	; 0x2080 <__ultoa_invert+0x7c>
    207a:	49 5d       	subi	r20, 0xD9	; 217
    207c:	31 fd       	sbrc	r19, 1
    207e:	40 52       	subi	r20, 0x20	; 32
    2080:	41 93       	st	Z+, r20
    2082:	02 d0       	rcall	.+4      	; 0x2088 <__ultoa_invert+0x84>
    2084:	a9 f7       	brne	.-22     	; 0x2070 <__ultoa_invert+0x6c>
    2086:	ea cf       	rjmp	.-44     	; 0x205c <__ultoa_invert+0x58>
    2088:	b4 e0       	ldi	r27, 0x04	; 4
    208a:	a6 95       	lsr	r26
    208c:	97 95       	ror	r25
    208e:	87 95       	ror	r24
    2090:	77 95       	ror	r23
    2092:	67 95       	ror	r22
    2094:	ba 95       	dec	r27
    2096:	c9 f7       	brne	.-14     	; 0x208a <__ultoa_invert+0x86>
    2098:	00 97       	sbiw	r24, 0x00	; 0
    209a:	61 05       	cpc	r22, r1
    209c:	71 05       	cpc	r23, r1
    209e:	08 95       	ret
    20a0:	9b 01       	movw	r18, r22
    20a2:	ac 01       	movw	r20, r24
    20a4:	0a 2e       	mov	r0, r26
    20a6:	06 94       	lsr	r0
    20a8:	57 95       	ror	r21
    20aa:	47 95       	ror	r20
    20ac:	37 95       	ror	r19
    20ae:	27 95       	ror	r18
    20b0:	ba 95       	dec	r27
    20b2:	c9 f7       	brne	.-14     	; 0x20a6 <__ultoa_invert+0xa2>
    20b4:	62 0f       	add	r22, r18
    20b6:	73 1f       	adc	r23, r19
    20b8:	84 1f       	adc	r24, r20
    20ba:	95 1f       	adc	r25, r21
    20bc:	a0 1d       	adc	r26, r0
    20be:	08 95       	ret

000020c0 <__prologue_saves__>:
    20c0:	2f 92       	push	r2
    20c2:	3f 92       	push	r3
    20c4:	4f 92       	push	r4
    20c6:	5f 92       	push	r5
    20c8:	6f 92       	push	r6
    20ca:	7f 92       	push	r7
    20cc:	8f 92       	push	r8
    20ce:	9f 92       	push	r9
    20d0:	af 92       	push	r10
    20d2:	bf 92       	push	r11
    20d4:	cf 92       	push	r12
    20d6:	df 92       	push	r13
    20d8:	ef 92       	push	r14
    20da:	ff 92       	push	r15
    20dc:	0f 93       	push	r16
    20de:	1f 93       	push	r17
    20e0:	cf 93       	push	r28
    20e2:	df 93       	push	r29
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	ca 1b       	sub	r28, r26
    20ea:	db 0b       	sbc	r29, r27
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
    20f6:	09 94       	ijmp

000020f8 <__epilogue_restores__>:
    20f8:	2a 88       	ldd	r2, Y+18	; 0x12
    20fa:	39 88       	ldd	r3, Y+17	; 0x11
    20fc:	48 88       	ldd	r4, Y+16	; 0x10
    20fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2100:	6e 84       	ldd	r6, Y+14	; 0x0e
    2102:	7d 84       	ldd	r7, Y+13	; 0x0d
    2104:	8c 84       	ldd	r8, Y+12	; 0x0c
    2106:	9b 84       	ldd	r9, Y+11	; 0x0b
    2108:	aa 84       	ldd	r10, Y+10	; 0x0a
    210a:	b9 84       	ldd	r11, Y+9	; 0x09
    210c:	c8 84       	ldd	r12, Y+8	; 0x08
    210e:	df 80       	ldd	r13, Y+7	; 0x07
    2110:	ee 80       	ldd	r14, Y+6	; 0x06
    2112:	fd 80       	ldd	r15, Y+5	; 0x05
    2114:	0c 81       	ldd	r16, Y+4	; 0x04
    2116:	1b 81       	ldd	r17, Y+3	; 0x03
    2118:	aa 81       	ldd	r26, Y+2	; 0x02
    211a:	b9 81       	ldd	r27, Y+1	; 0x01
    211c:	ce 0f       	add	r28, r30
    211e:	d1 1d       	adc	r29, r1
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
    212a:	ed 01       	movw	r28, r26
    212c:	08 95       	ret

0000212e <_exit>:
    212e:	f8 94       	cli

00002130 <__stop_program>:
    2130:	ff cf       	rjmp	.-2      	; 0x2130 <__stop_program>
